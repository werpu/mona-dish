{"version":3,"file":"Lang.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {ArrayCollector, AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return Stream.of(...keys)\n            .flatMap(item => {\n                return Stream.of(...item.split(/\\]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            })\n\n            .collect(new ArrayCollector());\n    }\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\nconst ALL_VALUES = \"*\";\n\n\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assings an new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambigous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * returns the first config level as streeam\n     */\n    get stream(): Stream<[string, any]> {\n        return Stream.of(... Object.keys(this.value)).map(key => [key, this.value[key]]);\n    }\n    \n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semy typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        let currAccessPos = null;\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        const ABSENT = \"__ABSENT__\";\n        currAccessPos = this.configDef;\n\n\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos = (Array.isArray(currAccessPos)) ?\n                        Stream.of(...currAccessPos)\n                            .filter(item => !!(item?.[currKey] ?? false))\n                            .map(item => item?.[currKey]).first() :\n                        Optional.fromNullable(currAccessPos?.[currKey] ?? null);\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos)) ?\n                        Stream.of(...currAccessPos)\n                            .filter(item => Array.isArray(item))\n                            .flatMap(item => Stream.of(...item)).first() : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos)) ? Stream.of(...currAccessPos)\n                        .filter(item => !! (item?.[currKey] ?? false))\n                        .map(item => item?.[currKey])\n                        .first():\n                Optional.fromNullable(currAccessPos?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            currAccessPos = currAccessPos.value;\n\n            //no further testing needed, from this point onwards we are on our own\n            if(currAccessPos == CONFIG_ANY) {\n                return;\n            }\n        }\n\n    }\n\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\nimport type = Mocha.utils.type;\n\n/**\n * special status of the datasource location pointer\n * if an access, outside of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fullfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * returns the next element in the stream\n     * difference to next is, that the internal data position\n     * is not changed, so next still will deliver the next item from the current\n     * data position. Look ahead is mostly needed internally\n     * by possible endless data constructs which have no fixed data boundary, or index\n     * positions. (aka infinite sets, or flatmapped constructs)\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        //easy access trial\n        if (this?.activeDataSource && this?.activeDataSource?.lookAhead(cnt) != ITERATION_STATUS.EO_STRM) {\n            //this should coverr 95% of all accesses\n            return this?.activeDataSource.lookAhead(cnt);\n        }\n\n        /**\n         * we only can determine how many elems datasource has by going up\n         * (for now this suffices, however not ideal, we might have to introduce a numElements or so)\n         * @param datasource\n         */\n        function howManyElems(datasource: IStreamDataSource<any>): number {\n            let cnt = 1;\n            while (datasource.lookAhead(cnt) !== ITERATION_STATUS.EO_STRM) {\n                cnt++;\n            }\n            return cnt - 1;\n        }\n\n        function readjustSkip(dataSource) {\n            let skippedElems = (dataSource) ? howManyElems(dataSource) : 0;\n            cnt = cnt - skippedElems;\n        }\n\n        if (this.activeDataSource) {\n            readjustSkip(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams subsequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let currDatasource = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            if (currDatasource === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mapped = this.mapFunc(currDatasource as T);\n            //it either comes in as datasource or as array\n            let currentDataSource = this.toDatasource(mapped);\n            let ret = currentDataSource.lookAhead(cnt);\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            readjustSkip(currDatasource);\n\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            ;\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(805);\n"],"names":["Lang","trim","str","ws","i","replace","length","test","charAt","slice","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","fromNullable","e","absent","saveResolveLazy","strToArray","splitter","ret","split","forEach","element","push","objToArray","obj","offset","pack","Array","concat","prototype","call","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","target","TypeError","to","Object","assign","theArgs","item","filter","nextSource","keys","nextKey","hasOwnProperty","value","this","_value","map","fn","inval","Monad","flatMap","mapped","isAbsent","isPresent","presentRunnable","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","key","preprocessKeys","currentPos","cnt","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","get","defaultVal","toJson","JSON","stringify","start","indexOf","end","parseInt","substring","resolve","resolver","Stream","of","collect","ArrayCollector","rootElem","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","CONFIG_VALUE","CONFIG_ANY","root","configDef","shallowCopy$","Config","ofAssoc","AssocArrayCollector","deepCopy$","shallowMerge","other","overwrite","withAppend","isArray","each","append","noKeys","accessPath","assertAccessPath","lastKey","pathExists","buildPath","finalKeyArrPos","Error","retVal","apply","appendIf","condition","assignIf","delete","setVal","currAccessPos","ERR_ACCESS_PATH","first","parentVal","parentPos","alloc","arr","length1","length2","isArrayPos","tempVal","isNoArray","ITERATION_STATUS","total","hasNext","next","EO_STRM","lookAhead","reset","current","BEF_STRM","SequenceDataSource","dataPos","Math","max","ArrayStreamDataSource","filterFunc","parent","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","found","lookupVal","loop","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","readjustSkip","dataSource","skippedElems","datasource","howManyElems","dsLoop","currDatasource","toDatasource","ds","FlatMapStreamDataSource","data","unshift","InverseArrayCollector","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","toMerge","encodeFormElement","name","QueryFormDataCollector","formData","join","reduce","item1","item2","QueryFormStringCollector","_limits","pos","ofDataSource","limits","toConcat","toAppend","onElem","res","strmR","startVal","val1","last","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collector","isLimitsReached","isEndOfArray","Symbol","iterator","done","LazyStream","values","ofStreamDataSource","isOverLimits","nextFilter","t","el","stop","value1","value2","el1","el2","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}