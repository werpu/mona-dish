{"version":3,"file":"Messaging.js","mappings":"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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Messaging.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///external umd \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/global","webpack:///webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"rxjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"rxjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"rxjs\")) : factory(root[\"rxjs\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE__832__) {\nreturn ","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\nexport class Es2019Array<T> extends Array<T> {\n    constructor(...another: T[]) {\n        super(...another);\n        //for testing it definitely runs into this branch because we are on es5 level\n        if(!(<any>Array.prototype).flatMap) {\n            let flatmapFun = (<any>Es2019Array).prototype.flatMap_;\n            //unfortunately in es5 the flatMap function is lost due to inheritance of a primitive\n            //es  class, we have to remap it back in\n            this.flatMap = flatmapFun;\n        }\n    }\n\n    flatMap_(mapperFunction: Function, noFallback: boolean = false): Es2019Array<T> {\n\n        let res = [];\n\n        let remap = item => {\n            let opRes = mapperFunction(item);\n            if(Array.isArray(opRes)) {\n                if(opRes.length == 1) {\n                    res.push(opRes[1])\n                    return;\n                }\n                if(opRes.length > 1) {\n                    opRes.forEach(newItem => remap(newItem))\n                }\n            } else {\n                res.push(item);\n            }\n        };\n        this.forEach( item => remap(item) )\n\n        return new Es2019Array(...res);\n    }\n\n\n    concat(...items): T[] {\n        return new Es2019Array(...super.concat(...items));\n    }\n\n    reverse(): T[] {\n        return new Es2019Array(...super.reverse());\n    }\n\n    slice(start?: number, end?: number): T[] {\n        return new Es2019Array(...super.slice(start, end));\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        return new Es2019Array(...super.splice(start, deleteCount));\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        return new Es2019Array(...super.filter(predicate, thisArg)  as any);\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * a standardized message to be sent over the message bus\n */\nimport {Observable, Subject} from \"rxjs\";\nimport {Stream} from \"./Stream\";\nimport {_global$} from \"./Global\";\n\n\n/**\n * generic crypto interface\n * to encrypt messages before they are sent\n * to the message bus oder the underlying bus system\n *\n * The idea is to make it as easy as possible, you can use for instance crypto js to\n * handle everything\n */\nexport interface Crypto {\n    /**\n     * note anything can be passed\n     *\n     * @param data the data to be encrypted\n     * @returns the encrypted data in any format, important is decode must be able to handle it\n     */\n    encode(data: any): any;\n\n    /**\n     * @param data the encrypted data in the format you expect it to be\n     * @returns the unencrypted data\n     */\n    decode(data: any): any;\n}\n\n\n/**\n * generic hash interface which provides\n * exactly one method a hash encode which returns a string hash value of encoded data\n */\nexport interface Hash {\n    encode(encodedData: string): string;\n}\n\n/**\n * Default implementation = no encryption\n */\nexport class NoCrypto implements Crypto {\n    decode(data: any): string {\n        return data;\n    }\n\n    encode(data: any): any {\n        return data;\n    }\n}\n\n//TODO dynamic encryptor which flushes the messages before changing the keys\n//that way we can rotate and change internal crypto keys on the fly\n\nlet noEncryption = new NoCrypto();\n\nexport class Message {\n\n    creationDate?: number;\n    identifier?: string;\n    targetOrigin?: string;\n    encoded: boolean = false;\n\n    constructor(public message: any = {}, targetOrigin = \"*\") {\n        this.targetOrigin = targetOrigin;\n        this.creationDate = new Date().getMilliseconds();\n        this.identifier = new Date().getMilliseconds() + \"_\" + Math.random() + \"_\" + Math.random();\n    }\n}\n\n/**\n * custom dom event wrapping our messages\n */\nclass MessageWrapper implements CustomEventInit<Message> {\n\n    detail?: Message;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n    channel: string;\n\n    constructor(channel: string, message: Message) {\n        this.detail = message;\n        this.bubbles = true;\n        this.cancelable = true;\n        this.composed = true;\n        this.channel = channel;\n    }\n}\n\n/**\n * abstract broker class\n * (The broker is the central distribution unit of messages)\n */\nabstract class BaseBroker {\n\n    static readonly EVENT_TYPE = \"brokerEvent\";\n    /**\n     * we can split the listeners with the system\n     * namespace... and type (aka identifier criteria)\n     */\n    protected messageListeners: any = {};\n    protected subjects: any = {};\n    protected processedMessages: any = {};\n\n    protected cleanupCnt = 0;\n    protected rootElem;\n    protected msgHandler;\n\n    protected readonly TIMEOUT_IN_MS = 1000;\n    protected readonly MSG_EVENT = \"message\";\n\n    //must be public because we also must have the option\n    //to set it outside of the constructor\n    crypto = noEncryption;\n\n\n    abstract register(scopeElement?: any): BaseBroker;\n\n    abstract unregister(): BaseBroker;\n\n    abstract broadcast(channel: string, message: Message | string): BaseBroker;\n\n\n    /**\n     * registers a listener on a channel\n     * @param channel the channel to register the listeners for\n     * @param listener the listener to register\n     */\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.reserveListenerNS(channel);\n\n        //we skip the processed messages, because they originated here\n        //and already are processed\n        this.messageListeners[channel].push((msg: Message) => {\n            if (msg.identifier in this.processedMessages) {\n                return;\n            }\n            if (msg?.encoded || msg?.[\"detail\"]?.encoded) {\n                if (msg?.[\"detail\"]) {\n                    msg[\"detail\"].message = this.crypto.decode(msg[\"detail\"].message);\n                    msg[\"detail\"].encoded = false;\n                } else {\n                    msg.message = this.crypto.decode(msg.message);\n                    msg.encoded = false;\n                }\n\n            }\n            listener(msg);\n        });\n        return this;\n    }\n\n    /**\n     * binding into rxjs\n     * produces a subject which can be used via next calls to send messages\n     * on the other hand we\n     * @param channel\n     */\n    asSubject(channel: string): Subject<Message> {\n        this.reserveSubjectNS(channel);\n        let subject = this.subjects[channel];\n        let oldNext = subject.next;\n\n        subject.next = (msg: Message | MessageWrapper) => {\n            //We use a recursive call to let the broadcaster handle\n            //The wrapper conversion and then again call us here\n            //that way both directions are handled.. next calls the broker\n            //and a broadcast calls next\n            if ((<MessageWrapper>msg)?.detail) {\n                oldNext.call(subject, (<MessageWrapper>msg)?.detail);\n            } else {\n                this.broadcast(channel, <Message>msg);\n            }\n        }\n        return subject;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * returns an observable on the baseBroker\n     * @param channel\n     */\n    asObservable(channel: string): Observable<Message> {\n        return this.asSubject(channel).asObservable();\n    }\n\n    /**\n     * reserves the listener namespace and wildcard namespace for the given identifier\n     * @param identifier\n     * @private\n     */\n    private reserveListenerNS(identifier: string) {\n        if (!this.messageListeners[identifier]) {\n            this.messageListeners[identifier] = [];\n        }\n        if (!this.messageListeners[\"*\"]) {\n            this.messageListeners[\"*\"] = [];\n        }\n    }\n\n    private reserveSubjectNS(identifier: string) {\n        if (!this.subjects[identifier]) {\n            this.subjects[identifier] = new Subject();\n        }\n        if (!this.subjects[\"*\"]) {\n            this.subjects[\"*\"] = new Subject();\n        }\n    }\n\n    /**\n     * unregisters a listener from this channel\n     *\n     * @param channel the channel to unregister from\n     * @param listener the listener to unregister the channel from\n     */\n    unregisterListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.messageListeners[channel] = (this.messageListeners[channel] || []).filter((item: any) => item !== listener);\n        return this;\n    }\n\n    /**\n     * answers a bidirectional message received\n     * usage, the client can use this method, to answer an incoming message in a precise manner\n     * so that the caller sending the bidirectional message knows how to deal with it\n     * this mechanism can be used for global storages where we have one answering entity per channel delivering the\n     * requested data, the request can be done asynchronously via promises waiting for answers\n     *\n     * @param channel the channel the originating message\n     * @param request the requesting message\n     * @param answer the answer to the request\n     */\n    answer(channel: string, request: Message | string, answer: Message): BaseBroker {\n        if ('string' == typeof request) {\n            request = new Message(request);\n        }\n\n        if (BaseBroker.isAnswer(request)) {\n            return;\n        }\n        answer.identifier = BaseBroker.getAnswerId(request);\n        this.broadcast(channel, answer);\n        return this;\n    }\n\n    private static getAnswerId(request: Message) {\n        return \"_r_\" + request.identifier;\n    }\n\n    private static isAnswer(request: Message) {\n        return request.identifier.indexOf(\"_r_\") == 0;\n    }\n\n    /**\n     * idea... a bidirectional broadcast\n     * sends a message and waits for the first answer coming in from one of the receivers\n     * sending the message back with a messageIdentifier_broadCastId answer\n     *\n     * @param channel\n     * @param message\n     */\n    request(channel: string, message: Message | string): Promise<Message> {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        let messageId = message.identifier;\n\n        let ret = new Promise<Message>((resolve, reject) => {\n            let timeout = null;\n            let listener = (message2: Message) => {\n                if (message2.identifier == messageId) {\n                    //broadcast from same source, we do not want\n                    //to deal with it now\n                    return;\n                }\n\n                if (message2.identifier == \"_r_\" + messageId) {\n                    clearTimeout(timeout);\n                    this.unregisterListener(channel, listener);\n                    resolve(message2);\n                }\n            }\n            timeout = setTimeout(() => {\n                this.unregisterListener(channel, listener);\n                reject(\"request message performed, timeout, no return value\");\n            }, 3000);\n            this.registerListener(channel, listener);\n\n        });\n        this.broadcast(channel, message);\n        return ret;\n    }\n\n\n    /**\n     * garbage collects the processed messages queue\n     * usually after one second\n     */\n    protected gcProcessedMessages() {\n        if ((++this.cleanupCnt) % 10 != 0) {\n            return;\n        }\n        let newProcessedMessages: any = {};\n        Object.keys(this.processedMessages).forEach(key => {\n            if (this.messageStillActive(key)) return;\n            newProcessedMessages[key] = this.processedMessages[key];\n        });\n        this.processedMessages = newProcessedMessages;\n    }\n\n    private messageStillActive(key: string): boolean {\n        return this.processedMessages[key] > ((new Date()).getMilliseconds() - this.TIMEOUT_IN_MS);\n    }\n\n    protected markMessageAsProcessed(message: Message) {\n        this.processedMessages[message.identifier] = message.creationDate;\n    }\n}\n\nlet broadCastChannelBrokerGenerator = (name) => {\n    if (_global$()?.BroadcastChannel) {\n        return new (_global$()).BroadcastChannel(name);\n    }\n    throw Error(\"No Broadcast channel in the system, use a shim or provide a factory function\" +\n        \"in the constructor\");\n};\n\nconst DEFAULT_CHANNEL_GROUP = \"brokr\";\n\n/**\n * a broker which hooks into the Broadcast Channel\n * either via shim or substitute lib\n *\n * The broadcast channels are a standardized messaging library\n * The broker mechanism sets a layer on top to make it more manageable!\n *\n */\nexport class BroadcastChannelBroker extends BaseBroker {\n    private openChannels: [{ key: string }, BroadcastChannel] = <any>{};\n    private readonly msgListener: Function;\n\n\n    /**\n     * @param brokerFactory a factory generating a broker\n     * @param channelGroup a group to combine a set of channels\n     * @param crypto a crypto class\n     */\n    constructor(private brokerFactory: Function = broadCastChannelBrokerGenerator, private channelGroup = DEFAULT_CHANNEL_GROUP, public crypto: Crypto = noEncryption) {\n        super();\n        this.msgListener = (messageData: MessageWrapper) => {\n            if (messageData.detail.encoded) {\n                messageData.detail.message = <any>this.crypto.decode(messageData.detail.message);\n                messageData.detail.encoded = false;\n            }\n            let coreMessage = messageData.detail;\n            let channel: string = messageData.channel;\n\n            if (this.messageListeners?.[channel]) {\n                this.messageListeners?.[channel].forEach(listener => {\n                    listener(coreMessage);\n                })\n            }\n            this.markMessageAsProcessed(coreMessage);\n            return true;\n        }\n        this.crypto = crypto;\n        this.register();\n    }\n\n    broadcast(channel: string, message: Message | string, includeOrigin = true): BaseBroker {\n        try {\n            if ('string' == typeof message) {\n                message = new Message(message);\n            }\n            //we now run a quick remapping to avoid\n            //serialisation errors\n            let msgString = JSON.stringify(<Message>message);\n            message = <Message>JSON.parse(msgString);\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n            messageWrapper.detail.encoded = true;\n\n            if (this?.subjects[channel]) {\n                this.subjects[channel].next(messageWrapper);\n            }\n\n            this.openChannels[this.channelGroup].postMessage(messageWrapper);\n            if (includeOrigin) {\n                this.msgListener(messageWrapper);\n            }\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        super.registerListener(channel, listener);\n        return <BaseBroker>this;\n    }\n\n    register(): BaseBroker {\n        if (!this.openChannels[this.channelGroup]) {\n            this.openChannels[this.channelGroup] = this.brokerFactory(this.channelGroup);\n        }\n        this.openChannels[this.channelGroup].addEventListener(\"message\", this.msgListener);\n        return <BaseBroker>this;\n    }\n\n    unregister(): BaseBroker {\n        this.openChannels[this.channelGroup].close();\n        return <BaseBroker>this;\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a broadcast channel broker\n */\nexport class BroadcastChannelBrokerBuilder {\n    private broadCastChannelGenerator: Function = broadCastChannelBrokerGenerator;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withGeneratorFunc(generatorFunc: Function): BroadcastChannelBrokerBuilder {\n        this.broadCastChannelGenerator = generatorFunc;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BroadcastChannelBrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n    withChannelGroup(channelGroup: string): BroadcastChannelBrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BroadcastChannelBrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): BroadcastChannelBroker {\n        let broker = new BroadcastChannelBroker(this.broadCastChannelGenerator, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}\n\n\n/**\n * implementation of a messaging based transport\n */\n\n/**\n * central message broker which uses various dom constructs\n * to broadcast messages into subelements\n *\n * we use the dom event system as transport and iframe and shadow dom mechanisms in a transparent way to\n * pull this off\n *\n * usage\n *\n * broker = new Broker(optional rootElement)\n *\n * defines a message broker within a scope of rootElement (without it is window aka the current isolation level)\n *\n * broker.registerListener(channel, listener) registers a new listener to the current broker and channel\n * broker.unregisterListener(channel, listener) unregisters the given listener\n *\n * broker.broadcast(message, optional direction, optional callBrokerListeners)\n * sends a message (channel included in the message object) in a direction (up, down, both)\n * and also optionally calls the listeners on the same broker (default off)\n *\n * the flow is like\n * up messages are propagated upwards only until it reaches the outer top of the dom\n * downwards, the messages are propagated downwards only\n * both the message is propagated into both directions\n *\n * Usually messages sent from the same broker are not processed within... however by setting\n * callBrokerListeners to true the listeners on the same broker also are called\n * brokers on the same level will get the message and process it automatically no matter what.\n * That way you can exclude the source from message processing (and it is done that way automatically)\n *\n * Isolation levels. Usually every isolation level needs its own broker object registering\n * on the outer bounds\n *\n * aka documents will register on window\n * iframes on the iframe windowObject\n * isolated shadow doms... document\n *\n *\n *\n */\nexport class Broker extends BaseBroker {\n\n    /**\n     * constructor has an optional root element\n     * and an internal name\n     *\n     * @param scopeElement\n     * @param brokerGroup\n     * @param crypto\n     */\n    constructor(scopeElement: HTMLElement | Window | ShadowRoot = window, public brokerGroup = \"brokr\", crypto: Crypto = noEncryption) {\n\n        super();\n\n        /**\n         * message relay.. identifies message events and relays them to the listeners\n         * @param event\n         */\n        let evtHandler = (event: MessageEvent | CustomEvent<Message>) => {\n            let details = (<any>event)?.detail ?? (<MessageEvent>event)?.data?.detail;\n            //TODO possible crypto hook, needs unit testing\n            let channel = ((<any>event)?.data?.channel) ?? ((<any>event)?.channel);\n\n            //javascript loses the type info in certain module types\n            if (details?.identifier && details?.message) {\n                let msg: Message = details;\n                if (msg.identifier in this.processedMessages) {\n                    return;\n                }\n                //coming in from up... we need to send it down\n                //a relayed message always has to trigger the listeners as well\n                if ((<any>event)?.detail) {\n                    this.broadcast(channel, msg);\n                } else {\n                    this.broadcast(channel, msg);\n                }\n\n            }\n        };\n        this.msgHandler = (evt: MessageEvent) => evtHandler(evt);\n        this.crypto = crypto;\n        this.register(scopeElement);\n    }\n\n    /**\n     * register the current broker into a scope defined by wnd\n     * @param scopeElement\n     */\n    register(scopeElement: HTMLElement | Window | ShadowRoot): BaseBroker {\n        this.rootElem = (<any>scopeElement).host ? (<any>scopeElement).host : scopeElement;\n        if ((<any>scopeElement).host) {\n            let host = (<ShadowRoot>scopeElement).host;\n            host.setAttribute(\"data-broker\", \"1\");\n        } else {\n            if (scopeElement?.[\"setAttribute\"])\n                (<any>scopeElement).setAttribute(\"data-broker\", \"1\");\n        }\n\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler, {capture: true});\n        /*dom message usable by iframes*/\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE + this.MSG_EVENT, this.msgHandler, {capture: true});\n        return <any>this;\n    }\n\n    /**\n     * manual unregister function, to unregister as broker from the current\n     * scope\n     */\n    unregister(): BaseBroker {\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler)\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + this.MSG_EVENT, this.msgHandler)\n        return <any>this;\n    }\n\n\n    /**\n     * broadcast a message\n     * the message contains the channel and the data and some internal bookkeeping data\n     *\n     * @param channel the channel to broadcast to\n     * @param message the message dot send\n     * (for instance 2 iframes within the same parent broker)\n     */\n    broadcast(channel: string, message: Message | string): BaseBroker {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        //message.message = this.crypto.encode(message);\n        //message.encoded = true;\n\n        if (this?.subjects[channel]) {\n            let messageWrapper = new MessageWrapper(channel, message);\n            if (!messageWrapper.detail.encoded) {\n                messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n                messageWrapper.detail.encoded = true;\n            }\n            this.subjects[channel].next(messageWrapper);\n        }\n\n        try {\n            this.dispatchUp(channel, message, false, true);\n            //listeners already called\n            this.dispatchDown(channel, message, true, false)\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n\n    private dispatchUp(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.markMessageAsProcessed(message);\n        if (_global$().parent != null) {\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            _global$().parent.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        }\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n    private dispatchSameLevel(channel: string, message: Message) {\n        let event = this.transformToEvent(channel, message, true);\n        //we also dispatch sideways\n        _global$().dispatchEvent(event);\n    }\n\n    //a dispatch of our own should never trigger the listeners hence the default true\n    private dispatchDown(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        let evt = this.transformToEvent(channel, message);\n\n        /*we now notify all iframes lying underneath */\n        Array.prototype.slice.call(document.querySelectorAll(\"iframe\")).forEach((element: HTMLIFrameElement) => {\n            let messageWrapper = new MessageWrapper(channel, message);\n            element.contentWindow.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        });\n\n        Array.prototype.slice.call(document.querySelectorAll(\"[data-broker='1']\")).forEach((element: HTMLElement) => element.dispatchEvent(evt))\n\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n\n    private msgCallListeners(channel: string, message: Message) {\n        let listeners = this.messageListeners[channel];\n        if (listeners?.length) {\n            let callElement = (element: (msg: Message) => void) => {\n                element(message);\n            }\n\n            listeners.forEach(callElement);\n        }\n    }\n\n    private transformToEvent(channel: string, message: Message, bubbles = false): CustomEvent {\n        let messageWrapper = new MessageWrapper(channel, message);\n        messageWrapper.bubbles = bubbles;\n        return Broker.createCustomEvent(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, messageWrapper);\n    }\n\n    private static createCustomEvent(name: string, wrapper: MessageWrapper): any {\n        if ('function' != typeof _global$().CustomEvent) {\n            let e: any = document.createEvent('HTMLEvents');\n            e.detail = wrapper.detail;\n            e.channel = wrapper.channel;\n            e.initEvent(name, wrapper.bubbles, wrapper.cancelable);\n            return e;\n\n        } else {\n            let customEvent = new (_global$()).CustomEvent(name, wrapper);\n            (<any>customEvent).channel = wrapper.channel;\n            return customEvent;\n        }\n\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a dom broker\n */\nexport class BrokerBuilder {\n    private scopeElement: HTMLElement | Window | ShadowRoot = window;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withScopeElement(scopeElement: HTMLElement | Window | ShadowRoot): BrokerBuilder {\n        this.scopeElement = scopeElement;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n\n    withChannelGroup(channelGroup: string): BrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): Broker {\n        let broker = new Broker(this.scopeElement, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        new Es2019Array(...other.getIf(key).value).forEach(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos =  Array.isArray(currAccessPos.value) ?\n                         Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !! (item?.[currKey] ?? false);\n                        })?.[currKey])  :\n                Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if(currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Config} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array<S>(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {Config, IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource, calculateSkips,\n    FilteredStreamDatasource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource, MultiStreamDatasource\n} from \"./SourcesCollectors\";\nimport {DomQuery} from \"./DomQuery\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n\n        let lookAhead = this?.activeDataSource?.lookAhead(cnt);\n        if (this?.activeDataSource && lookAhead != ITERATION_STATUS.EO_STRM) {\n            //this should cover 95% of all cases\n            return lookAhead;\n        }\n\n        if (this.activeDataSource) {\n            cnt -= calculateSkips(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams sub-sequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them, so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let datasourceData = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            //no embedded data anymore? we are done, data\n            //can either be a scalar an array or another datasource\n            if (datasourceData === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mappedData = this.mapFunc(datasourceData as T);\n\n            //it either comes in as datasource or as array\n            //both cases must be unified into a datasource\n            let currentDataSource = this.toDatasource(mappedData);\n            //we now run again  a lookahead\n            let ret = currentDataSource.lookAhead(cnt);\n            //if the value is found then we are set\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            //reduce the next lookahead by the number of elements\n            //we are now skipping in the current data source\n            cnt -= calculateSkips(currentDataSource);\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns the currently element selected in the stream\n     */\n    current(): T | ITERATION_STATUS\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T>, IStreamDataSource<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    static ofDomQuery(value: DomQuery): Stream<DomQuery> {\n        return Stream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): Stream<[string, any]> {\n        return Stream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    current(): T | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        if(this.pos >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos];\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    static ofDomQuery(value: DomQuery): LazyStream<DomQuery> {\n        return LazyStream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): LazyStream<[string, any]> {\n        return LazyStream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.ofStreamDataSource(new MultiStreamDatasource(this, toAppend as any) as any)\n        //return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","module.exports = __WEBPACK_EXTERNAL_MODULE__832__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(493);\n"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE__832__","another","Array","prototype","flatMap","flatmapFun","Es2019Array","flatMap_","mapperFunction","noFallback","res","remap","item","opRes","isArray","length","push","forEach","newItem","concat","items","reverse","slice","start","end","splice","deleteCount","filter","predicate","thisArg","_global$","globalThis","window","g","Lang","trim","str","ws","replace","test","charAt","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","fromNullable","e","absent","saveResolveLazy","strToArray","splitter","ret","split","element","objToArray","obj","offset","pack","call","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","target","TypeError","to","Object","assign","theArgs","nextSource","keys","nextKey","hasOwnProperty","decode","data","encode","NoCrypto","noEncryption","message","targetOrigin","encoded","creationDate","Date","getMilliseconds","identifier","Math","random","Message","channel","detail","bubbles","cancelable","composed","messageListeners","subjects","processedMessages","cleanupCnt","TIMEOUT_IN_MS","MSG_EVENT","crypto","registerListener","listener","reserveListenerNS","msg","asSubject","reserveSubjectNS","subject","oldNext","next","broadcast","asObservable","Subject","unregisterListener","answer","request","BaseBroker","isAnswer","getAnswerId","indexOf","messageId","Promise","resolve","reject","timeout","message2","clearTimeout","setTimeout","gcProcessedMessages","newProcessedMessages","key","messageStillActive","markMessageAsProcessed","EVENT_TYPE","broadCastChannelBrokerGenerator","name","BroadcastChannel","Error","DEFAULT_CHANNEL_GROUP","brokerFactory","channelGroup","openChannels","msgListener","messageData","coreMessage","register","includeOrigin","msgString","JSON","stringify","parse","messageWrapper","MessageWrapper","postMessage","addEventListener","unregister","close","BroadcastChannelBroker","broadCastChannelGenerator","listeners","withGeneratorFunc","generatorFunc","withListener","Stream","of","each","withChannelGroup","withCrypto","build","broker","listenerItem","BroadcastChannelBrokerBuilder","scopeElement","brokerGroup","msgHandler","evt","event","details","evtHandler","rootElem","host","setAttribute","Broker","capture","removeEventListener","dispatchUp","dispatchDown","ignoreListeners","callBrokerListeners","msgCallListeners","parent","dispatchSameLevel","transformToEvent","dispatchEvent","document","querySelectorAll","contentWindow","createCustomEvent","wrapper","CustomEvent","createEvent","initEvent","customEvent","withScopeElement","BrokerBuilder","value","_value","map","fn","inVal","Monad","mapped","isAbsent","isPresent","presentRunnable","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","preprocessKeys","currentPos","cnt","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","get","defaultVal","toJson","parseInt","substring","resolver","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","CONFIG_VALUE","CONFIG_ANY","configDef","shallowCopy$","Config","shallowMerge","deepCopy$","other","overwrite","withAppend","append","noKeys","accessPath","assertAccessPath","lastKey","pathExists","buildPath","finalKeyArrPos","apply","appendIf","condition","assignIf","delete","setVal","ERR_ACCESS_PATH","currAccessPos","find","parentVal","parentPos","alloc","arr","length1","length2","isArrayPos","tempVal","isNoArray","ITERATION_STATUS","calculateSkips","next_strm","pos","lookAhead","EO_STRM","first","selectedPos","strms","activeStrm","current","hasNext","findNextStrm","all_strms","shift","reset","MultiStreamDatasource","total","BEF_STRM","SequenceDataSource","dataPos","max","ArrayStreamDataSource","filterFunc","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","found","lookupVal","loop","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","collect","ShimArrayCollector","unshift","InverseArrayCollector","finalValue","ArrayAssocArrayCollector","Run","AssocArrayCollector","ConfigCollector","FormData","FormDataCollector","toMerge","encodeFormElement","QueryFormDataCollector","formData","join","reduce","item1","item2","QueryFormStringCollector","ArrayCollector","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","dsLoop","datasourceData","mappedData","currentDataSource","toDatasource","ds","FlatMapStreamDataSource","_limits","ofAssoc","ofDataSource","dataSource","ofDomQuery","asArray","ofConfig","limits","toConcat","toAppend","onElem","inval","strmR","startVal","val1","last","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collector","isLimitsReached","isEndOfArray","Symbol","iterator","done","LazyStream","values","ofStreamDataSource","isOverLimits","nextFilter","t","el","stop","value1","value2","el1","el2","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}