{"version":3,"file":"Stream.js","mappings":"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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {ArrayCollector, AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return Stream.of(...keys)\n            .flatMap(item => {\n                return Stream.of(...item.split(/\\]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            })\n\n            .collect(new ArrayCollector());\n    }\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\nconst ALL_VALUES = \"*\";\n\n\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assings an new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambigous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * returns the first config level as streeam\n     */\n    get stream(): Stream<[string, any]> {\n        return Stream.of(... Object.keys(this.value)).map(key => [key, this.value[key]]);\n    }\n    \n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semy typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        let currAccessPos = null;\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        const ABSENT = \"__ABSENT__\";\n        currAccessPos = this.configDef;\n\n\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos = (Array.isArray(currAccessPos)) ?\n                        Stream.of(...currAccessPos)\n                            .filter(item => !!(item?.[currKey] ?? false))\n                            .map(item => item?.[currKey]).first() :\n                        Optional.fromNullable(currAccessPos?.[currKey] ?? null);\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos)) ?\n                        Stream.of(...currAccessPos)\n                            .filter(item => Array.isArray(item))\n                            .flatMap(item => Stream.of(...item)).first() : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos)) ? Stream.of(...currAccessPos)\n                        .filter(item => !! (item?.[currKey] ?? false))\n                        .map(item => item?.[currKey])\n                        .first():\n                Optional.fromNullable(currAccessPos?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            currAccessPos = currAccessPos.value;\n\n            //no further testing needed, from this point onwards we are on our own\n            if(currAccessPos == CONFIG_ANY) {\n                return;\n            }\n        }\n\n    }\n\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IStream, Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\nimport type = Mocha.utils.type;\nimport {Config} from \"./Monad\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fullfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * returns the next element in the stream\n     * difference to next is, that the internal data position\n     * is not changed, so next still will deliver the next item from the current\n     * data position. Look ahead is mostly needed internally\n     * by possible endless data constructs which have no fixed data boundary, or index\n     * positions. (aka infinite sets, or flatmapped constructs)\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt?: number): T | ITERATION_STATUS {\n        let posPtr = 1;\n        let strmPos = this.selectedPos;\n        let valueFound = null;\n        if(this.strms[strmPos].lookAhead(cnt) != ITERATION_STATUS.EO_STRM) {\n            //speedup\n            return this.strms[strmPos].lookAhead(cnt);\n        }\n        for(let loop = posPtr; loop <= cnt; loop++) {\n            if(!this.strms[strmPos]) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let val = (posPtr > 0) ? this.strms[strmPos].lookAhead(posPtr): this.strms[strmPos].current();\n            valueFound = val;\n            if(val != ITERATION_STATUS.EO_STRM) {\n                posPtr++;\n            } else {\n                if(strmPos >= this.strms.length) {\n                    return ITERATION_STATUS.EO_STRM;\n                }\n                strmPos++;\n                posPtr = 1;\n                loop--; //empty iteration\n            }\n        }\n        return valueFound;\n    }\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        //easy access trial\n        if (this?.activeDataSource && this?.activeDataSource?.lookAhead(cnt) != ITERATION_STATUS.EO_STRM) {\n            //this should cover 95% of all cases\n            return this?.activeDataSource.lookAhead(cnt);\n        }\n\n        /**\n         * we only can determine how many elems datasource has by going up\n         * (for now this suffices, however not ideal, we might have to introduce a numElements or so)\n         * @param datasource\n         */\n        function howManyElems(datasource: IStreamDataSource<any>): number {\n            let cnt = 1;\n            while (datasource.lookAhead(cnt) !== ITERATION_STATUS.EO_STRM) {\n                cnt++;\n            }\n            return cnt - 1;\n        }\n\n        function readjustSkip(dataSource) {\n            let skippedElems = (dataSource) ? howManyElems(dataSource) : 0;\n            cnt = cnt - skippedElems;\n        }\n\n        if (this.activeDataSource) {\n            readjustSkip(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams sub-sequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them, so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let datasourceData = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            //no embedded data anymore? we are done, data\n            //can either be a scalar an array or another datasource\n            if (datasourceData === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mappedData = this.mapFunc(datasourceData as T);\n\n            //it either comes in as datasource or as array\n            //both cases must be unified into a datasource\n            let currentDataSource = this.toDatasource(mappedData);\n            //we now run again  a lookahead\n            let ret = currentDataSource.lookAhead(cnt);\n            //if the value is found then we are set\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            //reduce the next lookahead by the number of elements\n            //we are now skipping in the current data source\n            readjustSkip(currentDataSource);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource, MultiStreamDatasource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns the currently element selected in the stream\n     */\n    current(): T | ITERATION_STATUS\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T>, IStreamDataSource<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    current(): T | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        if(this.pos >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos];\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.ofStreamDataSource(new MultiStreamDatasource(this, toAppend as any) as any)\n        //return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(551);\n"],"names":["root","factory","exports","module","define","amd","a","i","this","Lang","trim","str","ws","replace","length","test","charAt","slice","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","fromNullable","e","absent","saveResolveLazy","strToArray","splitter","ret","split","forEach","element","push","objToArray","obj","offset","pack","Array","concat","prototype","call","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","target","TypeError","to","Object","assign","theArgs","item","filter","nextSource","keys","nextKey","hasOwnProperty","value","_value","map","fn","inval","Monad","flatMap","mapped","isAbsent","isPresent","presentRunnable","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","key","preprocessKeys","currentPos","cnt","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","get","defaultVal","toJson","JSON","stringify","start","indexOf","end","parseInt","substring","resolve","resolver","Stream","of","collect","ArrayCollector","rootElem","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","CONFIG_VALUE","CONFIG_ANY","configDef","shallowCopy$","Config","ofAssoc","AssocArrayCollector","deepCopy$","shallowMerge","other","overwrite","withAppend","isArray","each","append","noKeys","accessPath","assertAccessPath","lastKey","pathExists","buildPath","finalKeyArrPos","Error","retVal","apply","appendIf","condition","assignIf","delete","setVal","currAccessPos","ERR_ACCESS_PATH","first","parentVal","parentPos","alloc","arr","length1","length2","isArrayPos","tempVal","isNoArray","ITERATION_STATUS","selectedPos","strms","activeStrm","current","hasNext","findNextStrm","lookAhead","posPtr","strmPos","valueFound","EO_STRM","loop","next","reset","MultiStreamDatasource","total","BEF_STRM","SequenceDataSource","dataPos","Math","max","ArrayStreamDataSource","filterFunc","parent","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","found","lookupVal","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","readjustSkip","dataSource","skippedElems","datasource","howManyElems","dsLoop","datasourceData","mappedData","currentDataSource","toDatasource","ds","FlatMapStreamDataSource","data","unshift","InverseArrayCollector","finalValue","ArrayAssocArrayCollector","Run","ConfigCollector","FormData","FormDataCollector","toMerge","encodeFormElement","name","QueryFormDataCollector","formData","join","reduce","item1","item2","QueryFormStringCollector","_limits","pos","ofDataSource","limits","toConcat","toAppend","onElem","res","strmR","startVal","val1","last","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collector","isLimitsReached","isEndOfArray","Symbol","iterator","done","LazyStream","values","ofStreamDataSource","isOverLimits","nextFilter","t","el","stop","value1","value2","el1","el2","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}