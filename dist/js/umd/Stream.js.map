{"version":3,"file":"Stream.js","mappings":"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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\nexport class Es2019Array<T> extends Array<T> {\n    constructor(...another: T[]) {\n        super(...another);\n        //for testing it definitely runs into this branch because we are on es5 level\n        if(!(<any>Array.prototype).flatMap) {\n            let flatmapFun = (<any>Es2019Array).prototype.flatMap_;\n            //unfortunately in es5 the flatMap function is lost due to inheritance of a primitive\n            //es  class, we have to remap it back in\n            this.flatMap = flatmapFun;\n        }\n    }\n\n    flatMap_(mapperFunction: Function, noFallback: boolean = false): Es2019Array<T> {\n\n        let res = [];\n\n        let remap = item => {\n            let opRes = mapperFunction(item);\n            if(Array.isArray(opRes)) {\n                if(opRes.length == 1) {\n                    res.push(opRes[1])\n                    return;\n                }\n                if(opRes.length > 1) {\n                    opRes.forEach(newItem => remap(newItem))\n                }\n            } else {\n                res.push(item);\n            }\n        };\n        this.forEach( item => remap(item) )\n\n        return new Es2019Array(...res);\n    }\n\n\n    concat(...items): T[] {\n        return new Es2019Array(...super.concat(...items));\n    }\n\n    reverse(): T[] {\n        return new Es2019Array(...super.reverse());\n    }\n\n    slice(start?: number, end?: number): T[] {\n        return new Es2019Array(...super.slice(start, end));\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        return new Es2019Array(...super.splice(start, deleteCount));\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        return new Es2019Array(...super.filter(predicate, thisArg)  as any);\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        new Es2019Array(...other.getIf(key).value).forEach(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos =  Array.isArray(currAccessPos.value) ?\n                         Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !! (item?.[currKey] ?? false);\n                        })?.[currKey])  :\n                Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if(currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Config} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array<S>(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {Config, IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource, calculateSkips,\n    FilteredStreamDatasource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource, MultiStreamDatasource\n} from \"./SourcesCollectors\";\nimport {DomQuery} from \"./DomQuery\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n\n        let lookAhead = this?.activeDataSource?.lookAhead(cnt);\n        if (this?.activeDataSource && lookAhead != ITERATION_STATUS.EO_STRM) {\n            //this should cover 95% of all cases\n            return lookAhead;\n        }\n\n        if (this.activeDataSource) {\n            cnt -= calculateSkips(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams sub-sequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them, so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let datasourceData = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            //no embedded data anymore? we are done, data\n            //can either be a scalar an array or another datasource\n            if (datasourceData === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mappedData = this.mapFunc(datasourceData as T);\n\n            //it either comes in as datasource or as array\n            //both cases must be unified into a datasource\n            let currentDataSource = this.toDatasource(mappedData);\n            //we now run again  a lookahead\n            let ret = currentDataSource.lookAhead(cnt);\n            //if the value is found then we are set\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            //reduce the next lookahead by the number of elements\n            //we are now skipping in the current data source\n            cnt -= calculateSkips(currentDataSource);\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns the currently element selected in the stream\n     */\n    current(): T | ITERATION_STATUS\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T>, IStreamDataSource<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    static ofDomQuery(value: DomQuery): Stream<DomQuery> {\n        return Stream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): Stream<[string, any]> {\n        return Stream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    current(): T | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        if(this.pos >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos];\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    static ofDomQuery(value: DomQuery): LazyStream<DomQuery> {\n        return LazyStream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): LazyStream<[string, any]> {\n        return LazyStream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.ofStreamDataSource(new MultiStreamDatasource(this, toAppend as any) as any)\n        //return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n"],"names":["root","factory","exports","module","define","amd","a","i","this","Es2019Array","Array","constructor","another","super","prototype","flatMap","flatmapFun","flatMap_","mapperFunction","noFallback","res","remap","item","opRes","isArray","length","push","forEach","newItem","concat","items","reverse","slice","start","end","splice","deleteCount","filter","predicate","thisArg","Lang","trim","str","ws","replace","test","charAt","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","e","saveResolveLazy","strToArray","splitter","ret","split","element","objToArray","obj","offset","pack","call","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","target","theArgs","TypeError","to","Object","assign","nextSource","keys","nextKey","hasOwnProperty","Monad","value","_value","map","fn","inVal","mapped","static","isAbsent","isPresent","presentRunnable","absent","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","fromNullable","getIf","key","preprocessKeys","currentPos","cnt","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","get","defaultVal","toJson","JSON","stringify","indexOf","parseInt","substring","resolve","resolver","ValueEmbedder","rootElem","valueKey","newVal","alternative","ConfigEntry","ITERATION_STATUS","calculateSkips","next_strm","pos","lookAhead","EO_STRM","MultiStreamDatasource","first","strms","selectedPos","activeStrm","current","hasNext","findNextStrm","all_strms","shift","next","reset","ArrayStreamDataSource","dataPos","Math","max","FilteredStreamDatasource","filterFunc","parent","_current","BEF_STRM","_filterIdx","_unfilteredPos","inputDataSource","steps","found","lookupVal","loop","MappedStreamDataSource","mapFunc","lookAheadVal","ArrayCollector","data","collect","finalValue","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","o","defineProperty","enumerable","prop","r","Symbol","toStringTag","FlatMapStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","dsLoop","datasourceData","mappedData","currentDataSource","toDatasource","ds","Stream","_limits","of","dataSource","asArray","limits","toAppend","toConcat","onElem","each","inval","strmR","reduce","startVal","val1","last","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collector","isLimitsReached","isEndOfArray","iterator","done","LazyStream","values","isOverLimits","ofStreamDataSource","nextFilter","t","el","stop","value1","value2","el1","el2","arr"],"sourceRoot":""}