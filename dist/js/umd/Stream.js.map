{"version":3,"file":"Stream.js","mappings":"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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\n\nimport {ICollector, IStreamDataSource, ITERATION_STATUS} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport {_global$} from \"./Global\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport objToArray = Lang.objToArray;\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\ninterface IDomQuery {\n    /**\n     * reference to the systems global object\n     * (globalThis, window, global, depending on the environment)\n     */\n    readonly global: any;\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n\n    /**\n     * accumulated top element offsetWidth\n     */\n    readonly offsetWidth: number;\n    /**\n     * accumulated top element offsetHeight\n     */\n    readonly offsetHeight: number;\n    /**\n     * accumulated top element offsetLeft\n     */\n    readonly offsetLeft: number;\n    /**\n     * accumulated top element offsetTop\n     */\n    readonly offsetTop: number;\n\n\n    /**\n     * abbreviation for inputValue\\.value to make\n     * the code terser\n     */\n    val: string | boolean;\n\n    /**\n     * the underlying form elements as DomQuery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: any;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: any;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * inner html property\n     * setter and getter which works directly on strings\n     */\n    innerHTML: string;\n\n    /**\n     * same as innerHTML\n     * will be removed once\n     * my code is transitioned\n     * @deprecated do not use anymore, user innerHTML instead\n     */\n    innerHtml: string;\n\n    /**\n     * convenience for dq.id.value to make the code a little bit tighter\n     */\n    nodeId: string;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded ( highest level )\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n\n    /**\n     * closest, walks up the dom tree to fid the closest element to match\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchEvent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    lastElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * Runs an eval and keeps the evaluated code in the head\n     * This is a corner condition, where we want to update the head with custom\n     * code and leave the code in (instead of deleting ig)\n     *\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {DomQuery} DomQuery of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    append(elem: DomQuery): DomQuery;\n\n    /**\n     * replace convenience function replaces the domquery elements with the\n     * elements passed as parameter\n     * @param toReplace the replacement elements\n     * @return a reference on the replacement elements\n     */\n    replace(toReplace: DomQuery): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    prepend(elem: DomQuery): DomQuery;\n\n    /**\n     * prepend equivalent to appendTo\n     *\n     * @param elem the element to prepend to\n     */\n    prependTo(elem: DomQuery): DomQuery;\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param charSet\n     */\n    loadScriptEval(src: string, delay: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the DomQuery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery;\n\n    /**\n     * first parents with a matching selector\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery;\n\n    /**\n     * all parents until the selector match stops\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery;\n\n\n    /**\n     * the parent of the elements\n     */\n    parent(): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another DomQuery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the element must be left in the head after eval default === false\n     * @param whiteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky?: boolean, whiteListed?: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinString?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinString?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the sub-nodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    // observable: Observable<DomQuery>;\n\n    // observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    get stream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    get lazyStream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return new Es2019Array(...this.values).every(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n\n    get asArray(): DomQuery[] {\n        // filter not supported by IE11\n        let items = new Es2019Array(...this.rootNode).filter(item => {\n            return item != null\n        }).map(item => {\n            return DomQuery.byId(item)\n        });\n        return items as DomQuery[];\n    }\n\n    get offsetWidth(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetHeight(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetLeft(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetTop(): number {\n        return new Es2019Array(this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as any).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get asNodeArray(): Array<Element> {\n        return new Es2019Array(...this.rootNode.filter(item => item != null));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/<!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(...\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(((item) => id == item.id) as any)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = new Es2019Array(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce((reduction: any, item: Element) => reduction.concat([item]), res);\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        return this.asArray\n            .some(item => this._mozMatchesSelector(item.getAsElem(0).value, selector));\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        new Es2019Array(...this.rootNode)\n            .forEach((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                new Es2019Array(...scriptsToProcess).forEach(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.asArray\n                .flatMap(item => [...item.values])\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) // preceding 2, following == 4)\n                .forEach(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n            const _toReplace = DomQuery.byId(toReplace);\n            const tagName = _toReplace.tagName.orElse(\"\").value;\n            const head = DomQuery.byTagName(\"head\");\n\n            if (tagName && eqi(tagName, \"link\") && eqi(toReplace.getAttribute(\"rel\"), \"stylesheet\")) {\n                const rel = toReplace.getAttribute(\"rel\");\n                //if possible we are now replacing the existing elements where we reference this stylesheet\n                const matches = head.querySelectorAll(`link[rel='stylesheet'][href='${rel}']`);\n\n                if(matches.length) {\n                    matches.replace(_toReplace);\n                } else {\n                    head.append(_toReplace);\n                }\n            } else if (tagName && eqi(tagName, \"style\")) {\n                let innerText = _toReplace.innerHTML.replace(/\\s+/gi, \"\");\n                let styles = head.querySelectorAll(\"style\");\n                let filteredStyles = styles.asArray.filter(style => {\n                    return style.innerHTML.replace(/\\s+/gi, \"\") == innerText;\n                });\n                styles = new DomQuery(...filteredStyles);\n                if(!styles.length) { //already present\n                    head.append(_toReplace);\n                }\n            }\n        };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.asArray\n            .flatMap(item => [...item.values])\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .forEach(item => execCss(item as HTMLElement));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n\n\n        let finalOptions: any = new Config({\n            bubbles: true, cancelable: true\n        });\n        finalOptions.shallowMerge(new Config(options));\n        finalOptions = JSON.parse(finalOptions.toJson());\n\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Object.keys(finalOptions).forEach(key => event[key] = finalOptions[key]);\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\");\n    }\n\n    innerText(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => {\n                return [text1, text2].join(joinString)\n            }, \"\");\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        target.assign(name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res = this.asArray\n            .flatMap( item => {\n                return item.childNodes.asArray;\n            })\n            .filter(item => {\n                return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n            })\n            .reduce((reduced: Array<any>, item: DomQuery) => {\n                reduced.push((<any>item?.value?.value)?.data ?? \"\");\n                return reduced;\n            }, []);\n        /*let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;*/\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): DomQuery {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): DomQuery {\n        let domQueries = this.asArray;\n        const ret = new DomQuery(...domQueries.concat(toAttach.asArray));\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return new DomQuery(...ret.asArray.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }));\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(...objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\n\n\n\n\n\nclass Es2019Array_<T>  extends Array<T>{\n\n    _another: T[];\n\n    constructor(...another: T[]) {\n        super(...another);\n        if((another as any)._another)  {\n            this._another = (another as any)._another;\n        } else {\n            this._another = another;\n        }\n\n        //for testing it definitely runs into this branch because we are on es5 level\n        //if (!(<any>Array.prototype).flatMap) {\n            this.flatMap = (flatMapFun) => this._flatMap(flatMapFun) as any;\n        //}\n        //if (!(<any>Array.prototype).flat) {\n            this.flat = (flatLevel: number = 1) => this._flat(flatLevel);\n        //}\n    }\n\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] {\n        const ret = Array.prototype.map.call(this._another, callbackfn, thisArg);\n        return new (_Es2019Array as any) (... ret);\n    }\n\n    concat(...items): T[] {\n        const ret = Array.prototype.concat.call(this._another, ...items);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    reverse(): T[] {\n        const ret = Array.prototype.reverse.call(this._another);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    slice(start?: number, end?: number): T[] {\n        const ret = Array.prototype.slice.call(this._another, start, end);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        const ret = Array.prototype.splice.call(this._another, start, deleteCount);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        const ret = Array.prototype.filter.call(this._another, predicate, thisArg);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n        const ret = Array.prototype.reduce.call(this._another, callbackfn, initialValue);\n        return ret;\n    }\n\n    /*reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T {\n        const ret = Array.prototype.reduceRight.call(callbackfn, initialValue);\n        return ret;\n    }*/\n\n    private _flat(flatDepth = 1) {\n        return this._flatResolve(this._another, flatDepth);\n    }\n\n    private _flatResolve(arr, flatDepth = 1) {\n        //recursion break\n        if (flatDepth == 0) {\n            return arr;\n        }\n        let res = [];\n\n        let reFlat = item => {\n            item = Array.isArray(item) ? item : [item];\n            let mapped = this._flatResolve(item, flatDepth - 1);\n            res = res.concat(mapped);\n        };\n        arr.forEach(reFlat)\n\n        return new Es2019Array(...res);\n    }\n\n    private _flatMap(mapperFunction: Function): any {\n        let res = this.map(item => mapperFunction(item));\n        return this._flatResolve(res);\n    }\n}\n\n//let _Es2019Array = function<T>(...data: T[]) {};\n\n//let oldProto = Es2019Array.prototype;\n\nexport function _Es2019Array<T>(...data: T[]): Es2019Array_<T> {\n    let ret = new Es2019Array_<T>(...data);\n    let proxied = new Proxy<Es2019Array_<T>>(ret, {\n        get(target: Es2019Array_<unknown>, p: string | symbol, receiver: any): any {\n            if(\"symbol\" == typeof p) {\n\n                return target._another[p];\n            }\n            if(!isNaN(parseInt(p as string))) {\n                return target._another[p];\n            } else {\n                return target[p];\n            }\n        },\n\n        set(target, property, value): boolean {\n            target[property] = value;\n            target._another[property] = value;\n            return true;\n        }\n\n    });\n    return proxied;\n};\n\nexport var Es2019Array: any = (Array.prototype.flatMap) ? function<T>(...data: T[]): T[] {\n    return data;\n} : _Es2019Array;","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return new Es2019Array(...pack.concat(Array.prototype.slice.call(obj, offset)));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        new Es2019Array(...other.getIf(key).value).forEach(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos =  Array.isArray(currAccessPos.value) ?\n                         Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !! (item?.[currKey] ?? false);\n                        })?.[currKey])  :\n                Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if(currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Config} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {Config, IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource, calculateSkips,\n    FilteredStreamDatasource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource, MultiStreamDatasource\n} from \"./SourcesCollectors\";\nimport {DomQuery} from \"./DomQuery\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n\n        let lookAhead = this?.activeDataSource?.lookAhead(cnt);\n        if (this?.activeDataSource && lookAhead != ITERATION_STATUS.EO_STRM) {\n            //this should cover 95% of all cases\n            return lookAhead;\n        }\n\n        if (this.activeDataSource) {\n            cnt -= calculateSkips(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams sub-sequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them, so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let datasourceData = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            //no embedded data anymore? we are done, data\n            //can either be a scalar an array or another datasource\n            if (datasourceData === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mappedData = this.mapFunc(datasourceData as T);\n\n            //it either comes in as datasource or as array\n            //both cases must be unified into a datasource\n            let currentDataSource = this.toDatasource(mappedData);\n            //we now run again  a lookahead\n            let ret = currentDataSource.lookAhead(cnt);\n            //if the value is found then we are set\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            //reduce the next lookahead by the number of elements\n            //we are now skipping in the current data source\n            cnt -= calculateSkips(currentDataSource);\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns the currently element selected in the stream\n     */\n    current(): T | ITERATION_STATUS\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T>, IStreamDataSource<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    static ofDomQuery(value: DomQuery): Stream<DomQuery> {\n        return Stream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): Stream<[string, any]> {\n        return Stream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    current(): T | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        if(this.pos >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos];\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    static ofDomQuery(value: DomQuery): LazyStream<DomQuery> {\n        return LazyStream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): LazyStream<[string, any]> {\n        return LazyStream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.ofStreamDataSource(new MultiStreamDatasource(this, toAppend as any) as any)\n        //return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n/**\n * 1.0 backwards compatibility functions\n *\n * this restores the stream and lazy stream\n * property on DomQuery on prototype level\n *\n */\n\nObject.defineProperty(DomQuery.prototype, \"stream\", {\n    get: function stream(){\n        return Stream.ofDomQuery(this);\n    }\n})\n\n\nObject.defineProperty(DomQuery.prototype, \"lazyStream\", {\n    get: function lazyStream(){\n        return LazyStream.ofDomQuery(this);\n    }\n})"],"names":["root","factory","exports","module","define","amd","a","i","this","ALLOWED_SUBMITTABLE_ELEMENTS","trim","Lang","isString","eqi","objToArray","ElementAttribute","ValueEmbedder","constructor","element","name","defaultVal","super","value","val","get","orElse","values","length","getAttribute","cnt","setAttribute","getClass","static","valueKey","Style","style","DEFAULT_WHITELIST","DomQuery","rootNode","pos","_limits","Optional","isAbsent","foundElement","querySelectorAll","push","getAsElem","allElems","global","stream","Error","lazyStream","id","tagName","getIf","nodeName","isTag","toLowerCase","type","inputValue","isPresent","nodeId","checked","Es2019Array","every","el","newChecked","eachElem","elements","deepElements","querySelectorAllDeep","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","disabled","attr","removeAttribute","item","childNodes","childNodeArr","concat","asArray","filter","map","byId","offsetWidth","elem","reduce","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","asNodeArray","selector","document","indexOf","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","code","nonce","globalEval","globalEvalSticky","markup","doc","implementation","createHTMLDocument","lowerMarkup","search","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","absent","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","closest","_closestDeep","_closest","includeRoot","res","subItems","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","first","newInnerHTML","dispatchEvent","evt","retArr","innerHtml","newInnerHtml","filterSelector","matched","_mozMatchesSelector","some","nodeSelector","selectorStage","func","len","firstElem","lastElem","each","forEach","replace","toReplace","asElem","parent","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","insertBefore","insertAfter","append","last","lastNode","reArr","head","getElementsByTagName","script","newScriptElement","appendChild","applyNonce","appendTo","orElseLazy","loadScriptEval","src","delay","_loadScriptEval","loadScriptEvalSticky","toInsertParams","existingItem","existingElement","nextSibling","insertElem","elseValue","allParents","ret","firstParent","parentsWhileMatch","host","copyAttrs","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","fromMarkup","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","sticky","whitelisted","evalCollectedScripts","scriptsToProcess","joinedScripts","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","substring","flatMap","sort","node1","node2","compareDocumentPosition","e","console","error","message","description","_toReplace","rel","matches","styles","filteredStyles","execCss","click","fireEvent","addEventListener","listener","options","removeEventListener","eventName","finalOptions","Config","bubbles","cancelable","shallowMerge","JSON","parse","toJson","ownerDocument","nodeType","EventClass","Event","MouseEvent","KeyboardEvent","event","synthetic","createEventObject","Object","keys","key","textContent","joinString","text1","text2","encodeFormElement","toMerge","target","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","assign","Array","from","cDATAAsString","reduced","data","subNodes","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","current","reset","attachShadow","params","mode","shadowElement","waitUntilDom","condition","childList","subtree","timeout","interval","Promise","success","observer","MUT_ERROR","findElement","MutationObserver","mutTimeout","setTimeout","disconnect","callback","mutationList","mut","clearTimeout","observableOpts","observe","setInterval","clearInterval","shadowElements","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","domQueries","idx","notFound","prependTo","prepend","foundNodes","selectors","split","cnt2","levelSelector","toMatch","prototypeOwner","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","srcNode","createSourceNode","nonceCheck","marker","Date","now","random","attrName","Es2019Array_","another","_another","flatMapFun","_flatMap","flat","flatLevel","_flat","callbackfn","thisArg","_Es2019Array","prototype","items","reverse","start","splice","deleteCount","predicate","initialValue","flatDepth","_flatResolve","arr","isArray","mapperFunction","Proxy","p","receiver","isNaN","parseInt","set","property","_global$","globalThis","window","g","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","equalsIgnoreCase","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","theArgs","TypeError","nextSource","nextKey","hasOwnProperty","Monad","_value","fn","inVal","fromNullable","preprocessKeys","currentPos","currKey","keyVal","arrPos","arrayIndex","getIfPresent","match","stringify","resolve","resolver","rootElem","newVal","alternative","ConfigEntry","configDef","shallowCopy$","deepCopy","deepCopy$","other","overwrite","withAppend","accessPath","assertAccessPath","lastKey","pathExists","buildPath","finalKeyArrPos","apply","appendIf","assignIf","setVal","currAccessPos","find","parentVal","parentPos","alloc","length1","length2","isArrayPos","tempVal","isNoArray","ITERATION_STATUS","calculateSkips","next_strm","EO_STRM","MultiStreamDatasource","strms","selectedPos","activeStrm","findNextStrm","all_strms","shift","ArrayStreamDataSource","dataPos","max","FilteredStreamDatasource","filterFunc","_current","BEF_STRM","_filterIdx","_unfilteredPos","inputDataSource","steps","lookupVal","loop","MappedStreamDataSource","mapFunc","lookAheadVal","ArrayCollector","collect","finalValue","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","o","defineProperty","enumerable","prop","r","toStringTag","FlatMapStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","dsLoop","datasourceData","mappedData","currentDataSource","toDatasource","ds","Stream","of","dataSource","toAppend","toConcat","onElem","inval","strmR","startVal","val1","anyMatch","allMatch","noneMatch","comparator","newArr","collector","LazyStream","isOverLimits","ofStreamDataSource","nextFilter","t","stop","value1","value2","el1","el2","ofDomQuery"],"sourceRoot":""}