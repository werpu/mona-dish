{"version":3,"file":"Monad.js","mappings":"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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn ","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\nexport class Es2019Array<T> extends Array<T> {\n    constructor(...another: T[]) {\n        super(...another);\n        //for testing it definitely runs into this branch because we are on es5 level\n        if(!(<any>Array.prototype).flatMap) {\n            let flatmapFun = (<any>Es2019Array).prototype.flatMap_;\n            //unfortunately in es5 the flatMap function is lost due to inheritance of a primitive\n            //es  class, we have to remap it back in\n            this.flatMap = flatmapFun;\n        }\n    }\n\n    flatMap_(mapperFunction: Function, noFallback: boolean = false): Es2019Array<T> {\n\n        let res = [];\n\n        let remap = item => {\n            let opRes = mapperFunction(item);\n            if(Array.isArray(opRes)) {\n                if(opRes.length == 1) {\n                    res.push(opRes[1])\n                    return;\n                }\n                if(opRes.length > 1) {\n                    opRes.forEach(newItem => remap(newItem))\n                }\n            } else {\n                res.push(item);\n            }\n        };\n        this.forEach( item => remap(item) )\n\n        return new Es2019Array(...res);\n    }\n\n\n    concat(...items): T[] {\n        return new Es2019Array(...super.concat(...items));\n    }\n\n    reverse(): T[] {\n        return new Es2019Array(...super.reverse());\n    }\n\n    slice(start?: number, end?: number): T[] {\n        return new Es2019Array(...super.slice(start, end));\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        return new Es2019Array(...super.splice(start, deleteCount));\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        return new Es2019Array(...super.filter(predicate, thisArg)  as any);\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        new Es2019Array(...other.getIf(key).value).forEach(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos =  Array.isArray(currAccessPos.value) ?\n                         Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !! (item?.[currKey] ?? false);\n                        })?.[currKey])  :\n                Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if(currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(152);\n"],"names":["root","factory","exports","module","define","amd","a","i","this","Es2019Array","Array","constructor","another","super","prototype","flatMap","flatmapFun","flatMap_","mapperFunction","noFallback","res","remap","item","opRes","isArray","length","push","forEach","newItem","concat","items","reverse","slice","start","end","splice","deleteCount","filter","predicate","thisArg","Lang","trim","str","ws","replace","test","charAt","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","e","saveResolveLazy","strToArray","splitter","ret","split","element","objToArray","obj","offset","pack","call","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","target","theArgs","TypeError","to","Object","assign","nextSource","keys","nextKey","hasOwnProperty","Monad","value","_value","map","fn","inVal","mapped","static","isAbsent","isPresent","presentRunnable","absent","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","fromNullable","getIf","key","preprocessKeys","currentPos","cnt","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","get","defaultVal","toJson","JSON","stringify","indexOf","parseInt","substring","resolve","resolver","ValueEmbedder","rootElem","valueKey","newVal","alternative","ConfigEntry","CONFIG_VALUE","CONFIG_ANY","Config","configDef","shallowCopy","shallowCopy$","shallowMerge","deepCopy","deepCopy$","other","overwrite","withAppend","append","accessPath","assertAccessPath","lastKey","pathExists","buildPath","finalKeyArrPos","Error","apply","appendIf","condition","assignIf","delete","setVal","currAccessPos","find","parentVal","parentPos","alloc","arr","length1","length2","isArrayPos","tempVal","isNoArray","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","o","defineProperty","enumerable","prop","r","Symbol","toStringTag"],"sourceRoot":""}