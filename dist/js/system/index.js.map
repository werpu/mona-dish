{"version":3,"file":"index.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/AssocArray.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Messaging.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/TagBuilder.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///external system \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/CryptoExtensions.ts"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * various helpers to deal with associative\n * arrays. If someone feels uncomfortable using\n * The config system, this is similar!\n */\nimport {IValueHolder} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * A nop as assign functionality (aka ignore assign)\n */\nconst IGNORE_ASSIGN: IValueHolder<any> = new (class {\n    set value(value: any | Array<any>) {\n    }\n})();\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assign<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let assigner: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            lastPathItem.target[lastPathItem.key] = value;\n        }\n    })();\n    return assigner;\n}\n\n\nexport function append<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let appender: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            if(!Array.isArray(value)) {\n                value = [value];\n            }\n            if(!lastPathItem.target[lastPathItem.key]) {\n                lastPathItem.target[lastPathItem.key] = value\n            } else {\n                if(!Array.isArray(lastPathItem.target[lastPathItem.key])) {\n                    lastPathItem.target[lastPathItem.key] = [lastPathItem.target[lastPathItem.key]];\n                }\n                lastPathItem.target[lastPathItem.key].push(...value);\n            }\n        }\n    })();\n    return appender;\n}\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assignIf<T>(condition: boolean, target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    return assign(target, ...accessPath);\n}\n\n\nfunction keyVal(key: string): string {\n    let start = key.indexOf(\"[\");\n\n    if (start >= 0) {\n        return key.substring(0, start);\n    } else {\n        return key;\n    }\n}\n\nfunction arrayIndex(key: string): number {\n    let start = key.indexOf(\"[\");\n    let end = key.indexOf(\"]\");\n    if (start >= 0 && end > 0 && start < end) {\n        return parseInt(key.substring(start + 1, end));\n    } else {\n        return -1;\n    }\n}\n\nfunction isArrayPos(currKey: string, arrPos: number): boolean {\n    return currKey === \"\" && arrPos >= 0;\n}\n\nfunction isNoArray(arrPos: number): boolean {\n    return arrPos == -1;\n}\n\nfunction alloc(arr: Array<any>, length: number, defaultVal = {}) {\n    let toAdd = [];\n    toAdd.length = length;\n    toAdd[length - 1] = defaultVal;\n    arr.push(...toAdd);\n}\n\n\n/**\n * builds up a path, only done if no data is present!\n * @param target\n * @param accessPath\n * @returns the last assignable entry\n */\nexport function buildPath(target, ...accessPath: string[]) {\n    accessPath = accessPath.flatMap(path => path.split(\"[\"))\n        .map(path => path.indexOf(\"]\") != -1 ? \"[\"+ path : path);\n    //we now have a pattern of having the array accessors always in separate items\n    let parentPtr = target;\n    let parKeyArrPos = null;\n    let currKey = null;\n    let arrPos = -1;\n\n    for (let cnt = 0; cnt < accessPath.length; cnt++) {\n        currKey = keyVal(accessPath[cnt]);\n        arrPos = arrayIndex(accessPath[cnt]);\n        //it now is either key or arrPos\n        if (arrPos != -1) {\n            //case root(array)[5] -> root must be array and allocate 5 elements\n            //case root.item[5] root.item must be array and of 5 elements\n            if(!Array.isArray(parentPtr)) {\n                throw Error(\"Associative array referenced as index array in path reference\");\n            }\n\n            //we need to look ahead for proper allocation\n            //not end reached\n            let nextArrPos = -1;\n            if(cnt < accessPath.length - 1) {\n                nextArrPos = arrayIndex(accessPath[cnt + 1])\n            }\n            let dataPresent = 'undefined' != typeof parentPtr?.[arrPos];\n            //no data present check here is needed, because alloc only reserves if not present\n            alloc(parentPtr, arrPos + 1, nextArrPos != -1 ?[]: {});\n            parKeyArrPos = arrPos;\n            //we now go to the reserved element\n            if(cnt == accessPath.length - 1) {\n                parentPtr[arrPos] = (dataPresent) ? parentPtr[arrPos] : null;\n            } else {\n                parentPtr = parentPtr[arrPos];\n            }\n        } else {\n            if(Array.isArray(parentPtr)) {\n                throw Error(\"Index array referenced as associative array in path reference\");\n            }\n            //again look ahead whether the next value is an array or assoc array\n            let nextArrPos = -1;\n            if(cnt < accessPath.length - 1) {\n                nextArrPos = arrayIndex(accessPath[cnt + 1])\n            }\n            parKeyArrPos = currKey;\n            let dataPresent = 'undefined' != typeof parentPtr?.[currKey];\n            if(cnt == accessPath.length - 1) {\n                if(!dataPresent) {\n                    parentPtr[currKey] = null;\n                }\n            } else {\n                if(!dataPresent) {\n                    parentPtr[currKey] = nextArrPos == -1 ? {} : [];\n                }\n                parentPtr = parentPtr[currKey];\n            }\n        }\n    }\n\n    return {target: parentPtr, key: parKeyArrPos};\n\n}\n\nexport function deepCopy(fromAssoc: {[key: string]: any}): {[key: string]: any} {\n    return JSON.parse(JSON.stringify(fromAssoc));\n}\n\n/**\n * simple left to right merge\n *\n * @param assocArrays\n */\nexport function simpleShallowMerge(...assocArrays) {\n   return shallowMerge(true, false, ...assocArrays);\n}\n\n/**\n * Shallow merge as in config\n *\n * @param overwrite\n * @param withAppend\n * @param assocArrays\n */\nexport function shallowMerge(overwrite = true, withAppend = false, ...assocArrays) {\n    let target: {[key: string]: any} = {};\n    assocArrays.map(arr => {\n        return {arr, keys: Object.keys(arr)};\n    }).forEach(({arr, keys}) => {\n        keys.forEach(key => {\n            if(overwrite || !target?.[key]) {\n                if(!withAppend) {\n                    target[key] = arr[key];\n                } else {\n                    if (Array.isArray(arr[key])) {\n                        if('undefined' == typeof target?.[key]) {\n                            target[key] = new Es2019Array(...arr[key])\n                        } else if(!Array.isArray(target[key])) {\n                            let oldVal = target[key];\n                            target[key] = new Es2019Array(...[]);\n                            target[key].push(oldVal);\n                            target[key].push(...arr[key]);\n                        } else {\n                            target[key].push(...arr[key]);\n                        }\n                        //new Es2019Array(...arr[key]).forEach(item => this.append(key).value = item);\n                    } else {\n                        if('undefined' == typeof target?.[key]) {\n                            target[key] = arr[key];\n                        } else if(!Array.isArray(target[key])) {\n                            let oldVal = target[key];\n                            target[key] = new Es2019Array(...[]);\n                            target[key].push(oldVal);\n                            target[key].push(arr[key]);\n                        } else {\n                            target[key].push(arr[key]);\n                        }\n                    }\n                }\n            }\n        })\n    });\n    return target;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\n\nimport {ICollector, IStreamDataSource, ITERATION_STATUS} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport {_global$} from \"./Global\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport objToArray = Lang.objToArray;\nimport {append, assign, simpleShallowMerge} from \"./AssocArray\";\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\ninterface IDomQuery {\n    /**\n     * reference to the systems global object\n     * (globalThis, window, global, depending on the environment)\n     */\n    readonly global: any;\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n\n    /**\n     * accumulated top element offsetWidth\n     */\n    readonly offsetWidth: number;\n    /**\n     * accumulated top element offsetHeight\n     */\n    readonly offsetHeight: number;\n    /**\n     * accumulated top element offsetLeft\n     */\n    readonly offsetLeft: number;\n    /**\n     * accumulated top element offsetTop\n     */\n    readonly offsetTop: number;\n\n\n    /**\n     * abbreviation for inputValue\\.value to make\n     * the code terser\n     */\n    val: string | boolean;\n\n    /**\n     * the underlying form elements as DomQuery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: any;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: any;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * inner html property\n     * setter and getter which works directly on strings\n     */\n    innerHTML: string;\n\n    /**\n     * same as innerHTML\n     * will be removed once\n     * my code is transitioned\n     * @deprecated do not use anymore, user innerHTML instead\n     */\n    innerHtml: string;\n\n    /**\n     * convenience for dq.id.value to make the code a little tighter\n     */\n    nodeId: string;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded ( highest level )\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n\n    /**\n     * closest, walks up the dom tree to fid the closest element to match\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchEvent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    lastElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * Runs an eval and keeps the evaluated code in the head\n     * This is a corner condition, where we want to update the head with custom\n     * code and leave the code in (instead of deleting ig)\n     *\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {DomQuery} DomQuery of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    append(elem: DomQuery): DomQuery;\n\n    /**\n     * replace convenience function replaces the domquery elements with the\n     * elements passed as parameter\n     * @param toReplace the replacement elements\n     * @return a reference on the replacement elements\n     */\n    replace(toReplace: DomQuery): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    prepend(elem: DomQuery): DomQuery;\n\n    /**\n     * prepend equivalent to appendTo\n     *\n     * @param elem the element to prepend to\n     */\n    prependTo(elem: DomQuery): DomQuery;\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param charSet\n     */\n    loadScriptEval(src: string, delay: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the DomQuery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery;\n\n    /**\n     * first parents with a matching selector\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery;\n\n    /**\n     * all parents until the selector match stops\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery;\n\n\n    /**\n     * the parent of the elements\n     */\n    parent(): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another DomQuery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the element must be left in the head after eval default === false\n     * @param whiteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky?: boolean, whiteListed?: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinString?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinString?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): {[key: string]: any};\n\n    /**\n     * fetches the sub-nodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    // observable: Observable<DomQuery>;\n\n    // observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    get stream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    get lazyStream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return new Es2019Array(...this.values).every(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n\n    get asArray(): DomQuery[] {\n        // filter not supported by IE11\n        let items = new Es2019Array(...this.rootNode).filter(item => {\n            return item != null\n        }).map(item => {\n            return DomQuery.byId(item)\n        });\n        return items as DomQuery[];\n    }\n\n    get offsetWidth(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetHeight(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetLeft(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetTop(): number {\n        return new Es2019Array(this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as any).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get asNodeArray(): Array<Element> {\n        return new Es2019Array(...this.rootNode.filter(item => item != null));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/<!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(...\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(((item) => id == item.id) as any)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = new Es2019Array(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce((reduction: any, item: Element) => reduction.concat([item]), res);\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        return this.asArray\n            .some(item => this._mozMatchesSelector(item.getAsElem(0).value, selector));\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        new Es2019Array(...this.rootNode)\n            .forEach((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                new Es2019Array(...scriptsToProcess).forEach(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.asArray\n                .flatMap(item => [...item.values])\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) // preceding 2, following == 4)\n                .forEach(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n            const _toReplace = DomQuery.byId(toReplace);\n            const tagName = _toReplace.tagName.orElse(\"\").value;\n            const head = DomQuery.byTagName(\"head\");\n\n            if (tagName && eqi(tagName, \"link\") && eqi(toReplace.getAttribute(\"rel\"), \"stylesheet\")) {\n                const rel = toReplace.getAttribute(\"rel\");\n                //if possible we are now replacing the existing elements where we reference this stylesheet\n                const matches = head.querySelectorAll(`link[rel='stylesheet'][href='${rel}']`);\n\n                if(matches.length) {\n                    matches.replace(_toReplace);\n                } else {\n                    head.append(_toReplace);\n                }\n            } else if (tagName && eqi(tagName, \"style\")) {\n                let innerText = _toReplace.innerHTML.replace(/\\s+/gi, \"\");\n                let styles = head.querySelectorAll(\"style\");\n                let filteredStyles = styles.asArray.filter(style => {\n                    return style.innerHTML.replace(/\\s+/gi, \"\") == innerText;\n                });\n                styles = new DomQuery(...filteredStyles);\n                if(!styles.length) { //already present\n                    head.append(_toReplace);\n                }\n            }\n        };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.asArray\n            .flatMap(item => [...item.values])\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .forEach(item => execCss(item as HTMLElement));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n\n        let finalOptions: any = {\n            bubbles: true, cancelable: true\n        }\n        finalOptions = simpleShallowMerge(finalOptions, options);\n\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Object.keys(finalOptions).forEach(key => event[key] = finalOptions[key]);\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\");\n    }\n\n    innerText(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => {\n                return [text1, text2].join(joinString)\n            }, \"\");\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = {}): {[key: string]: any} {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = simpleShallowMerge(toMerge);\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                append(target, name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        assign(target, name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        append(target, name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res = this.asArray\n            .flatMap( item => {\n                return item.childNodes.asArray;\n            })\n            .filter(item => {\n                return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n            })\n            .reduce((reduced: Array<any>, item: DomQuery) => {\n                reduced.push((<any>item?.value?.value)?.data ?? \"\");\n                return reduced;\n            }, []);\n        /*let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;*/\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): DomQuery {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): DomQuery {\n        let domQueries = this.asArray;\n        const ret = new DomQuery(...domQueries.concat(toAttach.asArray));\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return new DomQuery(...ret.asArray.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }));\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(...objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\n\n\n\n\n\nclass Es2019Array_<T>  extends Array<T>{\n\n    _another: T[];\n\n    constructor(...another: T[]) {\n        super(...another);\n        if((another as any)._another)  {\n            this._another = (another as any)._another;\n        } else {\n            this._another = another;\n        }\n\n        //for testing it definitely runs into this branch because we are on es5 level\n        //if (!(<any>Array.prototype).flatMap) {\n            this.flatMap = (flatMapFun) => this._flatMap(flatMapFun) as any;\n        //}\n        //if (!(<any>Array.prototype).flat) {\n            this.flat = (flatLevel: number = 1) => this._flat(flatLevel);\n        //}\n    }\n\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] {\n        const ret = Array.prototype.map.call(this._another, callbackfn, thisArg);\n        return new (_Es2019Array as any) (... ret);\n    }\n\n    concat(...items): T[] {\n        const ret = Array.prototype.concat.call(this._another, ...items);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    reverse(): T[] {\n        const ret = Array.prototype.reverse.call(this._another);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    slice(start?: number, end?: number): T[] {\n        const ret = Array.prototype.slice.call(this._another, start, end);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        const ret = Array.prototype.splice.call(this._another, start, deleteCount);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        const ret = Array.prototype.filter.call(this._another, predicate, thisArg);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n        const ret = Array.prototype.reduce.call(this._another, callbackfn, initialValue);\n        return ret;\n    }\n\n    /*reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T {\n        const ret = Array.prototype.reduceRight.call(callbackfn, initialValue);\n        return ret;\n    }*/\n\n    private _flat(flatDepth = 1) {\n        return this._flatResolve(this._another, flatDepth);\n    }\n\n    private _flatResolve(arr, flatDepth = 1) {\n        //recursion break\n        if (flatDepth == 0) {\n            return arr;\n        }\n        let res = [];\n\n        let reFlat = item => {\n            item = Array.isArray(item) ? item : [item];\n            let mapped = this._flatResolve(item, flatDepth - 1);\n            res = res.concat(mapped);\n        };\n        arr.forEach(reFlat)\n\n        return new Es2019Array(...res);\n    }\n\n    private _flatMap(mapperFunction: Function): any {\n        let res = this.map(item => mapperFunction(item));\n        return this._flatResolve(res);\n    }\n}\n\n//let _Es2019Array = function<T>(...data: T[]) {};\n\n//let oldProto = Es2019Array.prototype;\n\nexport function _Es2019Array<T>(...data: T[]): Es2019Array_<T> {\n    let ret = new Es2019Array_<T>(...data);\n    let proxied = new Proxy<Es2019Array_<T>>(ret, {\n        get(target: Es2019Array_<unknown>, p: string | symbol, receiver: any): any {\n            if(\"symbol\" == typeof p) {\n\n                return target._another[p];\n            }\n            if(!isNaN(parseInt(p as string))) {\n                return target._another[p];\n            } else {\n                return target[p];\n            }\n        },\n\n        set(target, property, value): boolean {\n            target[property] = value;\n            target._another[property] = value;\n            return true;\n        }\n\n    });\n    return proxied;\n};\n\n/**\n * this is the switch between normal array and our shim\n * the shim is only provided in case the native browser\n * does not yet have flatMap support on arrays\n */\nexport var Es2019Array: any = (Array.prototype.flatMap) ? function<T>(...data: T[]): T[] {\n    return data;\n} : _Es2019Array;","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return new Es2019Array(...pack.concat(Array.prototype.slice.call(obj, offset)));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * a standardized message to be sent over the message bus\n */\nimport {Observable, Subject} from \"rxjs\";\nimport {Stream} from \"./Stream\";\nimport {_global$} from \"./Global\";\n\n\n/**\n * generic crypto interface\n * to encrypt messages before they are sent\n * to the message bus oder the underlying bus system\n *\n * The idea is to make it as easy as possible, you can use for instance crypto js to\n * handle everything\n */\nexport interface Crypto {\n    /**\n     * note anything can be passed\n     *\n     * @param data the data to be encrypted\n     * @returns the encrypted data in any format, important is decode must be able to handle it\n     */\n    encode(data: any): any;\n\n    /**\n     * @param data the encrypted data in the format you expect it to be\n     * @returns the unencrypted data\n     */\n    decode(data: any): any;\n}\n\n\n/**\n * generic hash interface which provides\n * exactly one method a hash encode which returns a string hash value of encoded data\n */\nexport interface Hash {\n    encode(encodedData: string): string;\n}\n\n/**\n * Default implementation = no encryption\n */\nexport class NoCrypto implements Crypto {\n    decode(data: any): string {\n        return data;\n    }\n\n    encode(data: any): any {\n        return data;\n    }\n}\n\n//TODO dynamic encryptor which flushes the messages before changing the keys\n//that way we can rotate and change internal crypto keys on the fly\n\nlet noEncryption = new NoCrypto();\n\nexport class Message {\n\n    creationDate?: number;\n    identifier?: string;\n    targetOrigin?: string;\n    encoded: boolean = false;\n\n    constructor(public message: any = {}, targetOrigin = \"*\") {\n        this.targetOrigin = targetOrigin;\n        this.creationDate = new Date().getMilliseconds();\n        this.identifier = new Date().getMilliseconds() + \"_\" + Math.random() + \"_\" + Math.random();\n    }\n}\n\n/**\n * custom dom event wrapping our messages\n */\nclass MessageWrapper implements CustomEventInit<Message> {\n\n    detail?: Message;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n    channel: string;\n\n    constructor(channel: string, message: Message) {\n        this.detail = message;\n        this.bubbles = true;\n        this.cancelable = true;\n        this.composed = true;\n        this.channel = channel;\n    }\n}\n\n/**\n * abstract broker class\n * (The broker is the central distribution unit of messages)\n */\nabstract class BaseBroker {\n\n    static readonly EVENT_TYPE = \"brokerEvent\";\n    /**\n     * we can split the listeners with the system\n     * namespace... and type (aka identifier criteria)\n     */\n    protected messageListeners: any = {};\n    protected subjects: any = {};\n    protected processedMessages: any = {};\n\n    protected cleanupCnt = 0;\n    protected rootElem;\n    protected msgHandler;\n\n    protected readonly TIMEOUT_IN_MS = 1000;\n    protected readonly MSG_EVENT = \"message\";\n\n    //must be public because we also must have the option\n    //to set it outside of the constructor\n    crypto = noEncryption;\n\n\n    abstract register(scopeElement?: any): BaseBroker;\n\n    abstract unregister(): BaseBroker;\n\n    abstract broadcast(channel: string, message: Message | string): BaseBroker;\n\n\n    /**\n     * registers a listener on a channel\n     * @param channel the channel to register the listeners for\n     * @param listener the listener to register\n     */\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.reserveListenerNS(channel);\n\n        //we skip the processed messages, because they originated here\n        //and already are processed\n        this.messageListeners[channel].push((msg: Message) => {\n            if (msg.identifier in this.processedMessages) {\n                return;\n            }\n            if (msg?.encoded || msg?.[\"detail\"]?.encoded) {\n                if (msg?.[\"detail\"]) {\n                    msg[\"detail\"].message = this.crypto.decode(msg[\"detail\"].message);\n                    msg[\"detail\"].encoded = false;\n                } else {\n                    msg.message = this.crypto.decode(msg.message);\n                    msg.encoded = false;\n                }\n\n            }\n            listener(msg);\n        });\n        return this;\n    }\n\n    /**\n     * binding into rxjs\n     * produces a subject which can be used via next calls to send messages\n     * on the other hand we\n     * @param channel\n     */\n    asSubject(channel: string): Subject<Message> {\n        this.reserveSubjectNS(channel);\n        let subject = this.subjects[channel];\n        let oldNext = subject.next;\n\n        subject.next = (msg: Message | MessageWrapper) => {\n            //We use a recursive call to let the broadcaster handle\n            //The wrapper conversion and then again call us here\n            //that way both directions are handled.. next calls the broker\n            //and a broadcast calls next\n            if ((<MessageWrapper>msg)?.detail) {\n                oldNext.call(subject, (<MessageWrapper>msg)?.detail);\n            } else {\n                this.broadcast(channel, <Message>msg);\n            }\n        }\n        return subject;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * returns an observable on the baseBroker\n     * @param channel\n     */\n    asObservable(channel: string): Observable<Message> {\n        return this.asSubject(channel).asObservable();\n    }\n\n    /**\n     * reserves the listener namespace and wildcard namespace for the given identifier\n     * @param identifier\n     * @private\n     */\n    private reserveListenerNS(identifier: string) {\n        if (!this.messageListeners[identifier]) {\n            this.messageListeners[identifier] = [];\n        }\n        if (!this.messageListeners[\"*\"]) {\n            this.messageListeners[\"*\"] = [];\n        }\n    }\n\n    private reserveSubjectNS(identifier: string) {\n        if (!this.subjects[identifier]) {\n            this.subjects[identifier] = new Subject();\n        }\n        if (!this.subjects[\"*\"]) {\n            this.subjects[\"*\"] = new Subject();\n        }\n    }\n\n    /**\n     * unregisters a listener from this channel\n     *\n     * @param channel the channel to unregister from\n     * @param listener the listener to unregister the channel from\n     */\n    unregisterListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.messageListeners[channel] = (this.messageListeners[channel] || []).filter((item: any) => item !== listener);\n        return this;\n    }\n\n    /**\n     * answers a bidirectional message received\n     * usage, the client can use this method, to answer an incoming message in a precise manner\n     * so that the caller sending the bidirectional message knows how to deal with it\n     * this mechanism can be used for global storages where we have one answering entity per channel delivering the\n     * requested data, the request can be done asynchronously via promises waiting for answers\n     *\n     * @param channel the channel the originating message\n     * @param request the requesting message\n     * @param answer the answer to the request\n     */\n    answer(channel: string, request: Message | string, answer: Message): BaseBroker {\n        if ('string' == typeof request) {\n            request = new Message(request);\n        }\n\n        if (BaseBroker.isAnswer(request)) {\n            return;\n        }\n        answer.identifier = BaseBroker.getAnswerId(request);\n        this.broadcast(channel, answer);\n        return this;\n    }\n\n    private static getAnswerId(request: Message) {\n        return \"_r_\" + request.identifier;\n    }\n\n    private static isAnswer(request: Message) {\n        return request.identifier.indexOf(\"_r_\") == 0;\n    }\n\n    /**\n     * idea... a bidirectional broadcast\n     * sends a message and waits for the first answer coming in from one of the receivers\n     * sending the message back with a messageIdentifier_broadCastId answer\n     *\n     * @param channel\n     * @param message\n     */\n    request(channel: string, message: Message | string): Promise<Message> {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        let messageId = message.identifier;\n\n        let ret = new Promise<Message>((resolve, reject) => {\n            let timeout = null;\n            let listener = (message2: Message) => {\n                if (message2.identifier == messageId) {\n                    //broadcast from same source, we do not want\n                    //to deal with it now\n                    return;\n                }\n\n                if (message2.identifier == \"_r_\" + messageId) {\n                    clearTimeout(timeout);\n                    this.unregisterListener(channel, listener);\n                    resolve(message2);\n                }\n            }\n            timeout = setTimeout(() => {\n                this.unregisterListener(channel, listener);\n                reject(\"request message performed, timeout, no return value\");\n            }, 3000);\n            this.registerListener(channel, listener);\n\n        });\n        this.broadcast(channel, message);\n        return ret;\n    }\n\n\n    /**\n     * garbage collects the processed messages queue\n     * usually after one second\n     */\n    protected gcProcessedMessages() {\n        if ((++this.cleanupCnt) % 10 != 0) {\n            return;\n        }\n        let newProcessedMessages: any = {};\n        Object.keys(this.processedMessages).forEach(key => {\n            if (this.messageStillActive(key)) return;\n            newProcessedMessages[key] = this.processedMessages[key];\n        });\n        this.processedMessages = newProcessedMessages;\n    }\n\n    private messageStillActive(key: string): boolean {\n        return this.processedMessages[key] > ((new Date()).getMilliseconds() - this.TIMEOUT_IN_MS);\n    }\n\n    protected markMessageAsProcessed(message: Message) {\n        this.processedMessages[message.identifier] = message.creationDate;\n    }\n}\n\nlet broadCastChannelBrokerGenerator = (name) => {\n    if (_global$()?.BroadcastChannel) {\n        return new (_global$()).BroadcastChannel(name);\n    }\n    throw Error(\"No Broadcast channel in the system, use a shim or provide a factory function\" +\n        \"in the constructor\");\n};\n\nconst DEFAULT_CHANNEL_GROUP = \"brokr\";\n\n/**\n * a broker which hooks into the Broadcast Channel\n * either via shim or substitute lib\n *\n * The broadcast channels are a standardized messaging library\n * The broker mechanism sets a layer on top to make it more manageable!\n *\n */\nexport class BroadcastChannelBroker extends BaseBroker {\n    private openChannels: [{ key: string }, BroadcastChannel] = <any>{};\n    private readonly msgListener: Function;\n\n\n    /**\n     * @param brokerFactory a factory generating a broker\n     * @param channelGroup a group to combine a set of channels\n     * @param crypto a crypto class\n     */\n    constructor(private brokerFactory: Function = broadCastChannelBrokerGenerator, private channelGroup = DEFAULT_CHANNEL_GROUP, public crypto: Crypto = noEncryption) {\n        super();\n        this.msgListener = (messageData: MessageWrapper) => {\n            if (messageData.detail.encoded) {\n                messageData.detail.message = <any>this.crypto.decode(messageData.detail.message);\n                messageData.detail.encoded = false;\n            }\n            let coreMessage = messageData.detail;\n            let channel: string = messageData.channel;\n\n            if (this.messageListeners?.[channel]) {\n                this.messageListeners?.[channel].forEach(listener => {\n                    listener(coreMessage);\n                })\n            }\n            this.markMessageAsProcessed(coreMessage);\n            return true;\n        }\n        this.crypto = crypto;\n        this.register();\n    }\n\n    broadcast(channel: string, message: Message | string, includeOrigin = true): BaseBroker {\n        try {\n            if ('string' == typeof message) {\n                message = new Message(message);\n            }\n            //we now run a quick remapping to avoid\n            //serialisation errors\n            let msgString = JSON.stringify(<Message>message);\n            message = <Message>JSON.parse(msgString);\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n            messageWrapper.detail.encoded = true;\n\n            if (this?.subjects[channel]) {\n                this.subjects[channel].next(messageWrapper);\n            }\n\n            this.openChannels[this.channelGroup].postMessage(messageWrapper);\n            if (includeOrigin) {\n                this.msgListener(messageWrapper);\n            }\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        super.registerListener(channel, listener);\n        return <BaseBroker>this;\n    }\n\n    register(): BaseBroker {\n        if (!this.openChannels[this.channelGroup]) {\n            this.openChannels[this.channelGroup] = this.brokerFactory(this.channelGroup);\n        }\n        this.openChannels[this.channelGroup].addEventListener(\"message\", this.msgListener);\n        return <BaseBroker>this;\n    }\n\n    unregister(): BaseBroker {\n        this.openChannels[this.channelGroup].close();\n        return <BaseBroker>this;\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a broadcast channel broker\n */\nexport class BroadcastChannelBrokerBuilder {\n    private broadCastChannelGenerator: Function = broadCastChannelBrokerGenerator;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withGeneratorFunc(generatorFunc: Function): BroadcastChannelBrokerBuilder {\n        this.broadCastChannelGenerator = generatorFunc;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BroadcastChannelBrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n    withChannelGroup(channelGroup: string): BroadcastChannelBrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BroadcastChannelBrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): BroadcastChannelBroker {\n        let broker = new BroadcastChannelBroker(this.broadCastChannelGenerator, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}\n\n\n/**\n * implementation of a messaging based transport\n */\n\n/**\n * central message broker which uses various dom constructs\n * to broadcast messages into subelements\n *\n * we use the dom event system as transport and iframe and shadow dom mechanisms in a transparent way to\n * pull this off\n *\n * usage\n *\n * broker = new Broker(optional rootElement)\n *\n * defines a message broker within a scope of rootElement (without it is window aka the current isolation level)\n *\n * broker.registerListener(channel, listener) registers a new listener to the current broker and channel\n * broker.unregisterListener(channel, listener) unregisters the given listener\n *\n * broker.broadcast(message, optional direction, optional callBrokerListeners)\n * sends a message (channel included in the message object) in a direction (up, down, both)\n * and also optionally calls the listeners on the same broker (default off)\n *\n * the flow is like\n * up messages are propagated upwards only until it reaches the outer top of the dom\n * downwards, the messages are propagated downwards only\n * both the message is propagated into both directions\n *\n * Usually messages sent from the same broker are not processed within... however by setting\n * callBrokerListeners to true the listeners on the same broker also are called\n * brokers on the same level will get the message and process it automatically no matter what.\n * That way you can exclude the source from message processing (and it is done that way automatically)\n *\n * Isolation levels. Usually every isolation level needs its own broker object registering\n * on the outer bounds\n *\n * aka documents will register on window\n * iframes on the iframe windowObject\n * isolated shadow doms... document\n *\n *\n *\n */\nexport class Broker extends BaseBroker {\n\n    /**\n     * constructor has an optional root element\n     * and an internal name\n     *\n     * @param scopeElement\n     * @param brokerGroup\n     * @param crypto\n     */\n    constructor(scopeElement: HTMLElement | Window | ShadowRoot = window, public brokerGroup = \"brokr\", crypto: Crypto = noEncryption) {\n\n        super();\n\n        /**\n         * message relay.. identifies message events and relays them to the listeners\n         * @param event\n         */\n        let evtHandler = (event: MessageEvent | CustomEvent<Message>) => {\n            let details = (<any>event)?.detail ?? (<MessageEvent>event)?.data?.detail;\n            //TODO possible crypto hook, needs unit testing\n            let channel = ((<any>event)?.data?.channel) ?? ((<any>event)?.channel);\n\n            //javascript loses the type info in certain module types\n            if (details?.identifier && details?.message) {\n                let msg: Message = details;\n                if (msg.identifier in this.processedMessages) {\n                    return;\n                }\n                //coming in from up... we need to send it down\n                //a relayed message always has to trigger the listeners as well\n                if ((<any>event)?.detail) {\n                    this.broadcast(channel, msg);\n                } else {\n                    this.broadcast(channel, msg);\n                }\n\n            }\n        };\n        this.msgHandler = (evt: MessageEvent) => evtHandler(evt);\n        this.crypto = crypto;\n        this.register(scopeElement);\n    }\n\n    /**\n     * register the current broker into a scope defined by wnd\n     * @param scopeElement\n     */\n    register(scopeElement: HTMLElement | Window | ShadowRoot): BaseBroker {\n        this.rootElem = (<any>scopeElement).host ? (<any>scopeElement).host : scopeElement;\n        if ((<any>scopeElement).host) {\n            let host = (<ShadowRoot>scopeElement).host;\n            host.setAttribute(\"data-broker\", \"1\");\n        } else {\n            if (scopeElement?.[\"setAttribute\"])\n                (<any>scopeElement).setAttribute(\"data-broker\", \"1\");\n        }\n\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler, {capture: true});\n        /*dom message usable by iframes*/\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE + this.MSG_EVENT, this.msgHandler, {capture: true});\n        return <any>this;\n    }\n\n    /**\n     * manual unregister function, to unregister as broker from the current\n     * scope\n     */\n    unregister(): BaseBroker {\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler)\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + this.MSG_EVENT, this.msgHandler)\n        return <any>this;\n    }\n\n\n    /**\n     * broadcast a message\n     * the message contains the channel and the data and some internal bookkeeping data\n     *\n     * @param channel the channel to broadcast to\n     * @param message the message dot send\n     * (for instance 2 iframes within the same parent broker)\n     */\n    broadcast(channel: string, message: Message | string): BaseBroker {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        //message.message = this.crypto.encode(message);\n        //message.encoded = true;\n\n        if (this?.subjects[channel]) {\n            let messageWrapper = new MessageWrapper(channel, message);\n            if (!messageWrapper.detail.encoded) {\n                messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n                messageWrapper.detail.encoded = true;\n            }\n            this.subjects[channel].next(messageWrapper);\n        }\n\n        try {\n            this.dispatchUp(channel, message, false, true);\n            //listeners already called\n            this.dispatchDown(channel, message, true, false)\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n\n    private dispatchUp(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.markMessageAsProcessed(message);\n        if (_global$().parent != null) {\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            _global$().parent.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        }\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n    private dispatchSameLevel(channel: string, message: Message) {\n        let event = this.transformToEvent(channel, message, true);\n        //we also dispatch sideways\n        _global$().dispatchEvent(event);\n    }\n\n    //a dispatch of our own should never trigger the listeners hence the default true\n    private dispatchDown(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        let evt = this.transformToEvent(channel, message);\n\n        /*we now notify all iframes lying underneath */\n        Array.prototype.slice.call(document.querySelectorAll(\"iframe\")).forEach((element: HTMLIFrameElement) => {\n            let messageWrapper = new MessageWrapper(channel, message);\n            element.contentWindow.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        });\n\n        Array.prototype.slice.call(document.querySelectorAll(\"[data-broker='1']\")).forEach((element: HTMLElement) => element.dispatchEvent(evt))\n\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n\n    private msgCallListeners(channel: string, message: Message) {\n        let listeners = this.messageListeners[channel];\n        if (listeners?.length) {\n            let callElement = (element: (msg: Message) => void) => {\n                element(message);\n            }\n\n            listeners.forEach(callElement);\n        }\n    }\n\n    private transformToEvent(channel: string, message: Message, bubbles = false): CustomEvent {\n        let messageWrapper = new MessageWrapper(channel, message);\n        messageWrapper.bubbles = bubbles;\n        return Broker.createCustomEvent(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, messageWrapper);\n    }\n\n    private static createCustomEvent(name: string, wrapper: MessageWrapper): any {\n        if ('function' != typeof _global$().CustomEvent) {\n            let e: any = document.createEvent('HTMLEvents');\n            e.detail = wrapper.detail;\n            e.channel = wrapper.channel;\n            e.initEvent(name, wrapper.bubbles, wrapper.cancelable);\n            return e;\n\n        } else {\n            let customEvent = new (_global$()).CustomEvent(name, wrapper);\n            (<any>customEvent).channel = wrapper.channel;\n            return customEvent;\n        }\n\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a dom broker\n */\nexport class BrokerBuilder {\n    private scopeElement: HTMLElement | Window | ShadowRoot = window;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withScopeElement(scopeElement: HTMLElement | Window | ShadowRoot): BrokerBuilder {\n        this.scopeElement = scopeElement;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n\n    withChannelGroup(channelGroup: string): BrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): Broker {\n        let broker = new Broker(this.scopeElement, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        new Es2019Array(...other.getIf(key).value).forEach(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos =  Array.isArray(currAccessPos.value) ?\n                         Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !! (item?.[currKey] ?? false);\n                        })?.[currKey])  :\n                Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if(currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let toAdd = [];\n            toAdd.length = length;\n            toAdd[length - 1] = {};\n            arr.push(...toAdd);\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/*\n * Promise wrappers for timeout and interval\n */\nexport function timeout(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setTimeout(() => apply(), timeout);\n    }, () => {\n        if (handler) {\n            clearTimeout(handler);\n            handler = null;\n        }\n    });\n}\n\nexport function interval(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setInterval(() => {\n            apply();\n        }, timeout);\n    }, () => {\n        if (handler) {\n            clearInterval(handler);\n            handler = null;\n        }\n    });\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //let func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n            if (fn.catch) {\n                let funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            let fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Config} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {Config, IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource, calculateSkips,\n    FilteredStreamDatasource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource, MultiStreamDatasource\n} from \"./SourcesCollectors\";\nimport {DomQuery} from \"./DomQuery\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n\n        let lookAhead = this?.activeDataSource?.lookAhead(cnt);\n        if (this?.activeDataSource && lookAhead != ITERATION_STATUS.EO_STRM) {\n            //this should cover 95% of all cases\n            return lookAhead;\n        }\n\n        if (this.activeDataSource) {\n            cnt -= calculateSkips(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams sub-sequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them, so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let datasourceData = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            //no embedded data anymore? we are done, data\n            //can either be a scalar an array or another datasource\n            if (datasourceData === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mappedData = this.mapFunc(datasourceData as T);\n\n            //it either comes in as datasource or as array\n            //both cases must be unified into a datasource\n            let currentDataSource = this.toDatasource(mappedData);\n            //we now run again  a lookahead\n            let ret = currentDataSource.lookAhead(cnt);\n            //if the value is found then we are set\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            //reduce the next lookahead by the number of elements\n            //we are now skipping in the current data source\n            cnt -= calculateSkips(currentDataSource);\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns the currently element selected in the stream\n     */\n    current(): T | ITERATION_STATUS\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T>, IStreamDataSource<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    static ofDomQuery(value: DomQuery): Stream<DomQuery> {\n        return Stream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): Stream<[string, any]> {\n        return Stream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    current(): T | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        if(this.pos >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos];\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    static ofDomQuery(value: DomQuery): LazyStream<DomQuery> {\n        return LazyStream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): LazyStream<[string, any]> {\n        return LazyStream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.ofStreamDataSource(new MultiStreamDatasource(this, toAppend as any) as any)\n        //return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n/**\n * 1.0 backwards compatibility functions\n *\n * this restores the stream and lazy stream\n * property on DomQuery on prototype level\n *\n */\n\nObject.defineProperty(DomQuery.prototype, \"stream\", {\n    get: function stream(){\n        return Stream.ofDomQuery(this);\n    }\n})\n\n\nObject.defineProperty(DomQuery.prototype, \"lazyStream\", {\n    get: function lazyStream(){\n        return LazyStream.ofDomQuery(this);\n    }\n})","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//poliyfill from @webcomponents/webcomponentsjs\nimport {DomQuery} from \"./DomQuery\";\nimport {_global$} from \"./Global\";\n\n\nif (\"undefined\" != typeof _global$) {\n    (function () {\n        if (void 0 === _global$().Reflect || void 0 === _global$().customElements || (<any>_global$().customElements).polyfillWrapFlushCallback) return;\n        const a = HTMLElement;\n        _global$().HTMLElement = {\n            HTMLElement: function HTMLElement() {\n                return Reflect.construct(a, [], this.constructor)\n            }\n        }.HTMLElement, HTMLElement.prototype = a.prototype, HTMLElement.prototype.constructor = HTMLElement, Object.setPrototypeOf(HTMLElement, a);\n    })();\n}\n\n/**\n * beginning custom tag support\n *\n * This api is still experimental\n * and might be interwoven with DomQuery\n * so it is bound to change\n *\n * it follows a builder pattern to allow easier creations\n * with less code of custom tags\n */\nexport class TagBuilder {\n    tagName: string;\n    connectedCallback?: Function;\n    clazz?: CustomElementConstructor;\n    extendsType: CustomElementConstructor = HTMLElement;\n    theOptions: ElementDefinitionOptions | null;\n    markup: string;\n    disconnectedCallback?: Function;\n    adoptedCallback ?: Function;\n    attributeChangedCallback ?: Function;\n    observedAttrs: string[] = [];\n\n    // noinspection JSUnusedGlobalSymbols\n    static withTagName(tagName): TagBuilder {\n        return new TagBuilder(tagName);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withObservedAttributes(...oAttrs) {\n        this.observedAttrs = oAttrs;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withConnectedCallback(callback: Function) {\n        this.connectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withDisconnectedCallback(callback: Function) {\n        this.disconnectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAdoptedCallback(callback: Function) {\n        this.adoptedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAttributeChangedCallback(callback: Function) {\n        this.attributeChangedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withExtendsType(extendsType: CustomElementConstructor) {\n        this.extendsType = extendsType;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withOptions(theOptions) {\n        this.theOptions = theOptions;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withClass(clazz) {\n        if (this.markup) {\n            throw Error(\"Markup already defined, markup must be set in the class\");\n        }\n        this.clazz = clazz;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withMarkup(markup) {\n        if (this.clazz) {\n            throw Error(\"Class already defined, markup must be set in the class\");\n        }\n        this.markup = markup;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    register() {\n        if (!this.clazz && !this.markup) {\n            throw Error(\"Class or markup must be defined\")\n        }\n        if (this.clazz) {\n\n            let applyCallback = (name: string) => {\n                let outerCallback = this[name];\n                let protoCallback = (<any>this.clazz.prototype)[name];\n                let finalCallback = outerCallback || protoCallback;\n                if (finalCallback) {\n                    (<any>this.clazz.prototype)[name] = function () {\n                        if(outerCallback) {\n                            finalCallback.apply(DomQuery.byId(this));\n                        } else {\n                            protoCallback.apply(<any>this);\n                        }\n                    }\n                }\n            }\n\n            applyCallback(\"connectedCallback\");\n            applyCallback(\"disconnectedCallback\");\n            applyCallback(\"adoptedCallback\");\n            applyCallback(\"attributeChangedCallback\");\n\n            //TODO how do we handle the oAttrs?\n            if (this.observedAttrs.length) {\n                Object.defineProperty(this.clazz.prototype, \"observedAttributes\", {\n                    get(): any {\n                        return this.observedAttrs;\n                    }\n                });\n            }\n\n            _global$().customElements.define(this.tagName, this.clazz, this.theOptions || null);\n        } else {\n            let _t_ = this;\n            let applyCallback = (name: string, scope: any) => {\n                if (_t_[name]) {\n                    _t_[name].apply(DomQuery.byId(<any>scope));\n                }\n            };\n\n            _global$().customElements.define(this.tagName, class extends this.extendsType {\n                constructor() {\n                    super();\n                    this.innerHTML = _t_.markup;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                static get observedAttributes() {\n                    return _t_.observedAttrs;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                connectedCallback() {\n                    applyCallback(\"connectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                disconnectedCallback() {\n                    applyCallback(\"disconnectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                adoptedCallback() {\n                    applyCallback(\"adoptedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                attributeChangedCallback() {\n                    applyCallback(\"attributeChangedCallback\", this);\n                }\n\n            }, this.theOptions || null);\n        }\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\nimport {_global$} from \"./Global\";\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new (_global$()).DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (_global$())?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","module.exports = __WEBPACK_EXTERNAL_MODULE__792__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {Crypto, Hash} from \"./Messaging\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {LazyStream} from \"./Stream\";\n\n/*\n * Some crypto implementations which might come in handy\n */\n\n\n/**\n * basic json stringify encryption impl\n * this does not really full encryption except for a standard json stringyfywith an encapsulation json\n *\n * the return value resembles:\n * <pre>\n *     {\n *         encryptedData: <data as string>\n *     }\n * </pre>\n */\nexport class JSONCrypto implements Crypto {\n    decode(data: any): any {\n        if (data?.encryptedData) {\n            return JSON.parse(data.encryptedData);\n        }\n        return data;\n    }\n\n    encode(data: any) {\n        return {\n            encryptedData: JSON.stringify(data)\n        }\n    }\n}\n\n\n/**\n * a class with  timeout functionality which blocks decodes after a certain period of time\n * if the message is not decoded by then\n * We use hash as identifier generation after encryption to make sure\n * a trace was possible\n *\n * The idea behind this is to have a generic wrapper which allows messages with dynamic encryption\n * where keys/salts only exist for a certain period of time before expiring!\n * That way someone who implements such a scheme does not have to take care about the bookeeping mechanisms!\n * Or you can use crypto mechanisms which do not have expiring keys and still expire them automatically\n *\n * I will leave it up to the system integrator to provide a rotating crypto class, because this is highly\n * implementation dependent. But it helps to have a wrapper!\n */\nexport class ExpiringCrypto implements Crypto {\n\n    private static MAX_GC_CYCLES = 10;\n    private gcCycleCnt = 0;\n    private storedMessages: { [key: string]: number } = {};\n    private lastCall = 0;\n\n    /**\n     * @param timeout timeout in miliseconds until a message is expired\n     * @param parentCrypto the embedded decorated crypto algorithm\n     * @param hashSum hashshum implementation to generate a hash\n     */\n    constructor(private timeout: number, private parentCrypto: Crypto, private hashSum: Hash) {\n\n    }\n\n    /**\n     * decode implementation with a timeout hook install\n     * @param data\n     */\n    decode(data: any): any {\n        //if ((this.gcCycleCnt++ % ExpiringCrypto.MAX_GC_CYCLES) === 0) {\n\n        const currTime = new Date().getTime();\n        if(this.gcLimitReached(currTime)) {\n            this.storedMessages = LazyStream\n                .ofAssoc(this.storedMessages)\n                .filter(data => data[1] >= currTime)\n                .collect(new AssocArrayCollector());\n        }\n        this.lastCall = currTime;\n\n\n        let rotatingEncoded = this.hashSum.encode(data);\n        if (!this.storedMessages?.[rotatingEncoded.toString()]) {\n            throw Error(\"An item was tried to be decryted which either was expired or invalid\");\n        }\n        return this.parentCrypto.decode(data);\n    }\n\n    /**\n     * trigger function to determine whether the gc needs to cycle again, this is either time or call based\n     * the gc itself collects only on expiration dates\n     * The idea is to run this operation only occasionally because it is costly\n     * We also could have used timeouts etc.. but those would need shutdown/destroy cleanups\n     *\n     * @param currTime\n     * @private\n     */\n    private gcLimitReached(currTime: number) {\n        return (this.lastCall + this.timeout) < currTime || ((++this.gcCycleCnt) % ExpiringCrypto.MAX_GC_CYCLES == 0);\n    }\n\n    /**\n     * encode with a timeout hook installed\n     * calls the encode of the delegated object\n     *\n     * @param data\n     */\n    encode(data: any): any {\n        let encoded = this.parentCrypto.encode(data);\n        //ok use the hashsum really only to store expirations, theoretically there could be a second message which does not invalidate the first one\n        //but this is very unlikely unless a message is sent over and over again, in this case we have a timeout extension anyway!\n        let rotatingEncoded = this.hashSum.encode(encoded);\n        this.storedMessages[rotatingEncoded.toString()] = (new Date().getTime()) + this.timeout;\n        return encoded;\n    }\n}"],"names":["IGNORE_ASSIGN","value","assign","target","accessPath","length","lastPathItem","buildPath","key","append","Array","isArray","push","assignIf","condition","keyVal","start","indexOf","substring","arrayIndex","end","parseInt","alloc","arr","defaultVal","toAdd","flatMap","path","split","map","parentPtr","parKeyArrPos","currKey","arrPos","cnt","Error","nextArrPos","dataPresent","simpleShallowMerge","assocArrays","shallowMerge","overwrite","withAppend","keys","Object","forEach","Es2019Array","oldVal","ALLOWED_SUBMITTABLE_ELEMENTS","trim","Lang","isString","eqi","objToArray","ElementAttribute","ValueEmbedder","constructor","element","name","super","val","this","get","orElse","values","getAttribute","setAttribute","getClass","static","valueKey","Style","style","DEFAULT_WHITELIST","DomQuery","rootNode","pos","_limits","Optional","isAbsent","foundElement","querySelectorAll","getAsElem","allElems","global","stream","lazyStream","id","tagName","getIf","nodeName","isTag","toLowerCase","type","inputValue","isPresent","nodeId","checked","every","el","newChecked","eachElem","elements","deepElements","querySelectorAllDeep","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","disabled","attr","removeAttribute","item","childNodes","childNodeArr","concat","asArray","filter","byId","offsetWidth","elem","reduce","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","asNodeArray","selector","document","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","code","nonce","globalEval","globalEvalSticky","markup","doc","implementation","createHTMLDocument","lowerMarkup","search","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","absent","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","closest","_closestDeep","_closest","includeRoot","res","subItems","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","first","newInnerHTML","dispatchEvent","evt","retArr","innerHtml","newInnerHtml","filterSelector","matched","_mozMatchesSelector","some","nodeSelector","selectorStage","func","len","firstElem","lastElem","each","replace","toReplace","asElem","parent","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","insertBefore","insertAfter","last","lastNode","reArr","head","getElementsByTagName","script","newScriptElement","appendChild","applyNonce","appendTo","orElseLazy","loadScriptEval","src","delay","_loadScriptEval","loadScriptEvalSticky","toInsertParams","existingItem","existingElement","nextSibling","insertElem","elseValue","allParents","ret","firstParent","parentsWhileMatch","host","copyAttrs","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","fromMarkup","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","sticky","whitelisted","evalCollectedScripts","scriptsToProcess","joinedScripts","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","sort","node1","node2","compareDocumentPosition","e","console","error","message","description","_toReplace","rel","matches","styles","filteredStyles","execCss","click","fireEvent","addEventListener","listener","options","removeEventListener","eventName","finalOptions","bubbles","cancelable","ownerDocument","nodeType","EventClass","Event","MouseEvent","KeyboardEvent","event","synthetic","createEventObject","textContent","joinString","text1","text2","encodeFormElement","toMerge","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","from","cDATAAsString","reduced","data","subNodes","to","Math","min","limits","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","current","reset","attachShadow","params","mode","shadowElement","waitUntilDom","childList","subtree","timeout","interval","root","Promise","success","observer","MUT_ERROR","findElement","MutationObserver","mutTimeout","setTimeout","disconnect","callback","mutationList","mut","clearTimeout","observableOpts","observe","setInterval","clearInterval","shadowElements","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","domQueries","idx","notFound","prependTo","prepend","foundNodes","selectors","cnt2","levelSelector","toMatch","prototypeOwner","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","i","srcNode","createSourceNode","nonceCheck","marker","Date","now","random","attrName","DomQueryCollector","collect","finalValue","DQ","DQ$","Es2019Array_","another","_another","flatMapFun","_flatMap","flat","flatLevel","_flat","callbackfn","thisArg","_Es2019Array","prototype","items","reverse","splice","deleteCount","predicate","initialValue","flatDepth","_flatResolve","mapperFunction","Proxy","p","receiver","isNaN","set","property","_global$","globalThis","window","g","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","equalsIgnoreCase","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","theArgs","TypeError","nextSource","nextKey","hasOwnProperty","NoCrypto","decode","encode","noEncryption","Message","targetOrigin","encoded","creationDate","getMilliseconds","identifier","MessageWrapper","channel","detail","composed","BaseBroker","messageListeners","subjects","processedMessages","cleanupCnt","TIMEOUT_IN_MS","MSG_EVENT","crypto","registerListener","reserveListenerNS","msg","asSubject","reserveSubjectNS","subject","oldNext","broadcast","asObservable","Subject","unregisterListener","answer","request","isAnswer","getAnswerId","messageId","resolve","reject","message2","gcProcessedMessages","newProcessedMessages","messageStillActive","markMessageAsProcessed","EVENT_TYPE","broadCastChannelBrokerGenerator","BroadcastChannel","BroadcastChannelBroker","brokerFactory","channelGroup","DEFAULT_CHANNEL_GROUP","openChannels","msgListener","messageData","coreMessage","register","includeOrigin","msgString","JSON","stringify","parse","messageWrapper","postMessage","unregister","close","Broker","scopeElement","brokerGroup","evtHandler","details","msgHandler","rootElem","capture","dispatchUp","dispatchDown","ignoreListeners","callBrokerListeners","msgCallListeners","dispatchSameLevel","transformToEvent","contentWindow","listeners","callElement","createCustomEvent","wrapper","CustomEvent","createEvent","initEvent","customEvent","Monad","_value","fn","inVal","fromNullable","preprocessKeys","currentPos","getIfPresent","match","toJson","resolver","newVal","alternative","ConfigEntry","CONFIG_VALUE","CONFIG_ANY","Config","configDef","shallowCopy","shallowCopy$","deepCopy","deepCopy$","other","assertAccessPath","lastKey","pathExists","finalKeyArrPos","apply","appendIf","setVal","currAccessPos","find","parentVal","parentPos","isArrayPos","tempVal","isNoArray","PromiseStatus","executor","status","PENDING","allFuncs","promises","myapply","promiseCnt","myPromise","__last__","finally","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","CancellablePromise","cancellator","cancel","ITERATION_STATUS","calculateSkips","next_strm","EO_STRM","MultiStreamDatasource","strms","selectedPos","activeStrm","findNextStrm","all_strms","SequenceDataSource","total","BEF_STRM","ArrayStreamDataSource","dataPos","max","FilteredStreamDatasource","filterFunc","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","lookupVal","loop","MappedStreamDataSource","mapFunc","lookAheadVal","AssocArrayCollector","ConfigCollector","FormDataCollector","FormData","QueryFormDataCollector","QueryFormStringCollector","formData","item1","item2","ArrayCollector","FlatMapStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","dsLoop","datasourceData","mappedData","currentDataSource","toDatasource","ds","Stream","of","dataSource","toAppend","toConcat","onElem","inval","strmR","startVal","val1","anyMatch","allMatch","noneMatch","comparator","newArr","collector","LazyStream","isOverLimits","ofStreamDataSource","nextFilter","t","stop","value1","value2","el1","el2","defineProperty","ofDomQuery","Reflect","customElements","polyfillWrapFlushCallback","a","HTMLElement","construct","setPrototypeOf","TagBuilder","extendsType","observedAttrs","withObservedAttributes","oAttrs","withConnectedCallback","connectedCallback","withDisconnectedCallback","disconnectedCallback","withAdoptedCallback","adoptedCallback","withAttributeChangedCallback","attributeChangedCallback","withExtendsType","withOptions","theOptions","withClass","withMarkup","applyCallback","outerCallback","protoCallback","finalCallback","define","_t_","scope","observedAttributes","XMLQuery","docType","parseXML","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","createIe11DomQueryShim","isXMLParserError","toString","serialized","XMLSerializer","serializeToString","parserErrorText","joinstr","txt","parseType","XQ","module","exports","__WEBPACK_EXTERNAL_MODULE__792__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","o","enumerable","prop","r","toStringTag","JSONCrypto","encryptedData","ExpiringCrypto","parentCrypto","hashSum","gcCycleCnt","storedMessages","lastCall","currTime","getTime","gcLimitReached","rotatingEncoded","MAX_GC_CYCLES"],"sourceRoot":""}