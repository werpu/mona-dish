{"version":3,"file":"index.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/CryptoExtensions.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Messaging.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/TagBuilder.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///external system \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/global","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/index.ts"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {Crypto, Hash} from \"./Messaging\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {LazyStream} from \"./Stream\";\n\n/*\n * Some crypto implementations which might come in handy\n */\n\n\n/**\n * basic json stringify encryption impl\n * this does not really full encryption except for a standard json stringyfywith an encapsulation json\n *\n * the return value resembles:\n * <pre>\n *     {\n *         encryptedData: <data as string>\n *     }\n * </pre>\n */\nexport class JSONCrypto implements Crypto {\n    decode(data: any): any {\n        if (data?.encryptedData) {\n            return JSON.parse(data.encryptedData);\n        }\n        return data;\n    }\n\n    encode(data: any) {\n        return {\n            encryptedData: JSON.stringify(data)\n        }\n    }\n}\n\n\n/**\n * a class with  timeout functionality which blocks decodes after a certain period of time\n * if the message is not decoded by then\n * We use hash as identifier generation after encryption to make sure\n * a trace was possible\n *\n * The idea behind this is to have a generic wrapper which allows messages with dynamic encryption\n * where keys/salts only exist for a certain period of time before expiring!\n * That way someone who implements such a scheme does not have to take care about the bookeeping mechanisms!\n * Or you can use crypto mechanisms which do not have expiring keys and still expire them automatically\n *\n * I will leave it up to the system integrator to provide a rotating crypto class, because this is highly\n * implementation dependent. But it helps to have a wrapper!\n */\nexport class ExpiringCrypto implements Crypto {\n\n    private static MAX_GC_CYCLES = 10;\n    private gcCycleCnt = 0;\n    private storedMessages: { [key: string]: number } = {};\n    private lastCall = 0;\n\n    /**\n     * @param timeout timeout in miliseconds until a message is expired\n     * @param parentCrypto the embedded decorated crypto algorithm\n     * @param hashSum hashshum implementation to generate a hash\n     */\n    constructor(private timeout: number, private parentCrypto: Crypto, private hashSum: Hash) {\n\n    }\n\n    /**\n     * decode implementation with a timeout hook install\n     * @param data\n     */\n    decode(data: any): any {\n        //if ((this.gcCycleCnt++ % ExpiringCrypto.MAX_GC_CYCLES) === 0) {\n\n        const currTime = new Date().getTime();\n        if(this.gcLimitReached(currTime)) {\n            this.storedMessages = LazyStream\n                .ofAssoc(this.storedMessages)\n                .filter(data => data[1] >= currTime)\n                .collect(new AssocArrayCollector());\n        }\n        this.lastCall = currTime;\n\n\n        let rotatingEncoded = this.hashSum.encode(data);\n        if (!this.storedMessages?.[rotatingEncoded.toString()]) {\n            throw Error(\"An item was tried to be decryted which either was expired or invalid\");\n        }\n        return this.parentCrypto.decode(data);\n    }\n\n    /**\n     * trigger function to determine whether the gc needs to cycle again, this is either time or call based\n     * the gc itself collects only on expiration dates\n     * The idea is to run this operation only occasionally because it is costly\n     * We also could have used timeouts etc.. but those would need shutdown/destroy cleanups\n     *\n     * @param currTime\n     * @private\n     */\n    private gcLimitReached(currTime: number) {\n        return (this.lastCall + this.timeout) < currTime || ((++this.gcCycleCnt) % ExpiringCrypto.MAX_GC_CYCLES == 0);\n    }\n\n    /**\n     * encode with a timeout hook installed\n     * calls the encode of the delegated object\n     *\n     * @param data\n     */\n    encode(data: any): any {\n        let encoded = this.parentCrypto.encode(data);\n        //ok use the hashsum really only to store expirations, theoretically there could be a second message which does not invalidate the first one\n        //but this is very unlikely unless a message is sent over and over again, in this case we have a timeout extension anyway!\n        let rotatingEncoded = this.hashSum.encode(encoded);\n        this.storedMessages[rotatingEncoded.toString()] = (new Date().getTime()) + this.timeout;\n        return encoded;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\n\nimport {\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS\n} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport {_global$} from \"./Global\";\nimport objToArray = Lang.objToArray;\nimport {Es2019Array} from \"./Es2019Array\";\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\ninterface IDomQuery {\n    /**\n     * reference to the systems global object\n     * (globalThis, window, global, depending on the environment)\n     */\n    readonly global: any;\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n\n    /**\n     * accumulated top element offsetWidth\n     */\n    readonly offsetWidth: number;\n    /**\n     * accumulated top element offsetHeight\n     */\n    readonly offsetHeight: number;\n    /**\n     * accumulated top element offsetLeft\n     */\n    readonly offsetLeft: number;\n    /**\n     * accumulated top element offsetTop\n     */\n    readonly offsetTop: number;\n\n\n    /**\n     * abbreviation for inputValue\\.value to make\n     * the code terser\n     */\n    val: string | boolean;\n\n    /**\n     * the underlying form elements as DomQuery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * inner html property\n     * setter and getter which works directly on strings\n     */\n    innerHTML: string;\n\n    /**\n     * same as innerHTML\n     * will be removed once\n     * my code is transitioned\n     * @deprecated do not use anymore, user innerHTML instead\n     */\n    innerHtml: string;\n\n    /**\n     * convenience for dq.id.value to make the code a little bit tighter\n     */\n    nodeId: string;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded ( highest level )\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n\n    /**\n     * closest, walks up the dom tree to fid the closest element to match\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchEvent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    lastElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * Runs an eval and keeps the evaluated code in the head\n     * This is a corner condition, where we want to update the head with custom\n     * code and leave the code in (instead of deleting ig)\n     *\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {DomQuery} DomQuery of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    append(elem: DomQuery): DomQuery;\n\n    /**\n     * replace convenience function replaces the domquery elements with the\n     * elements passed as parameter\n     * @param toReplace the replacement elements\n     * @return a reference on the replacement elements\n     */\n    replace(toReplace: DomQuery): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    prepend(elem: DomQuery): DomQuery;\n\n    /**\n     * prepend equivalent to appendTo\n     *\n     * @param elem the element to prepend to\n     */\n    prependTo(elem: DomQuery): DomQuery;\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param charSet\n     */\n    loadScriptEval(src: string, delay: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the DomQuery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery;\n\n    /**\n     * first parents with a matching selector\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery;\n\n    /**\n     * all parents until the selector match stops\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery;\n\n\n    /**\n     * the parent of the elements\n     */\n    parent(): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another DomQuery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the element must be left in the head after eval default === false\n     * @param whiteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky?: boolean, whiteListed?: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinString?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinString?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the sub-nodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    // observable: Observable<DomQuery>;\n\n    // observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return new Es2019Array(...this.values).every(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n\n    get asArray(): Es2019Array<DomQuery> {\n        // filter not supported by IE11\n        let items = new Es2019Array<Element>(...this.rootNode).filter(item => {\n            return item != null\n        }).map(item => {\n            return DomQuery.byId(item)\n        });\n        return items as Es2019Array<DomQuery>;\n    }\n\n    get offsetWidth(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetHeight(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetLeft(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetTop(): number {\n        return new Es2019Array(this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as any).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get asNodeArray(): Array<Element> {\n        return new Es2019Array<Element>(...this.rootNode.filter(item => item != null));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/\\<\\!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(...\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(((item) => id == item.id) as any)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any>new Es2019Array(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res);\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        return this.asArray\n            .some(item => this._mozMatchesSelector(item.getAsElem(0).value, selector));\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        new Es2019Array(...this.rootNode)\n            .forEach((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                new Es2019Array(...scriptsToProcess).forEach(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.asArray\n                .flatMap(item => [...item.values])\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) // preceding 2, following == 4)\n                .forEach(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n            const _toReplace = DomQuery.byId(toReplace);\n            const tagName = _toReplace.tagName.orElse(\"\").value;\n            const head = DomQuery.byTagName(\"head\");\n\n            if (tagName && eqi(tagName, \"link\") && eqi(toReplace.getAttribute(\"rel\"), \"stylesheet\")) {\n                const rel = toReplace.getAttribute(\"rel\");\n                //if possible we are now replacing the existing elements where we reference this stylesheet\n                const matches = head.querySelectorAll(`link[rel='stylesheet'][href='${rel}']`);\n\n                if(matches.length) {\n                    matches.replace(_toReplace);\n                } else {\n                    head.append(_toReplace);\n                }\n            } else if (tagName && eqi(tagName, \"style\")) {\n                let innerText = _toReplace.innerHTML.replace(/\\s+/gi, \"\");\n                let styles = head.querySelectorAll(\"style\");\n                let filteredStyles = styles.asArray.filter(style => {\n                    return style.innerHTML.replace(/\\s+/gi, \"\") == innerText;\n                });\n                styles = new DomQuery(...filteredStyles);\n                if(!styles.length) { //already present\n                    head.append(_toReplace);\n                }\n            }\n        };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.asArray\n            .flatMap(item => [...item.values])\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .forEach(item => execCss(item as HTMLElement));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n\n\n        let finalOptions: any = new Config({\n            bubbles: true, cancelable: true\n        });\n        finalOptions.shallowMerge(new Config(options));\n        finalOptions = JSON.parse(finalOptions.toJson());\n\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Object.keys(finalOptions).forEach(key => event[key] = finalOptions[key]);\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\");\n    }\n\n    innerText(joinString: string = \"\"): string {\n        let ret = this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => {\n                return [text1, text2].join(joinString)\n            }, \"\");\n        return ret;\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        target.assign(name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res = this.asArray\n            .flatMap( item => item.childNodes.asArray)\n            .filter(item => item?.value?.value?.nodeType == TYPE_CDATA_BLOCK)\n            .reduce((reduced: Array<any>, item: DomQuery) => {\n                reduced.push((<any>item?.value?.value)?.data ?? \"\");\n                return reduced;\n            }, []);\n        /*let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;*/\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): DomQuery {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): DomQuery {\n        const ret = new DomQuery(...this.asArray.concat(toAttach.asArray));\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return new DomQuery(...ret.asArray.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }));\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\nexport class Es2019Array<T> extends Array<T> {\n    constructor(...another: T[]) {\n        super(...another);\n        //for testing it definitely runs into this branch because we are on es5 level\n        if(!(<any>Array.prototype).flatMap) {\n            let flatmapFun = (<any>Es2019Array).prototype.flatMap_;\n            //unfortunately in es5 the flatMap function is lost due to inheritance of a primitive\n            //es  class, we have to remap it back in\n            this.flatMap = flatmapFun;\n        }\n    }\n\n    flatMap_(mapperFunction: Function, noFallback: boolean = false): Es2019Array<T> {\n\n        let res = [];\n\n        let remap = item => {\n            let opRes = mapperFunction(item);\n            if(Array.isArray(opRes)) {\n                if(opRes.length == 1) {\n                    res.push(opRes[1])\n                    return;\n                }\n                if(opRes.length > 1) {\n                    opRes.forEach(newItem => remap(newItem))\n                }\n            } else {\n                res.push(item);\n            }\n        };\n        this.forEach( item => remap(item) )\n\n        return new Es2019Array(...res);\n    }\n\n\n    concat(...items): T[] {\n        return new Es2019Array(...super.concat(...items));\n    }\n\n    reverse(): T[] {\n        return new Es2019Array(...super.reverse());\n    }\n\n    slice(start?: number, end?: number): T[] {\n        return new Es2019Array(...super.slice(start, end));\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        return new Es2019Array(...super.splice(start, deleteCount));\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        return new Es2019Array(...super.filter(predicate, thisArg)  as any);\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * a standardized message to be sent over the message bus\n */\nimport {Observable, Subject} from \"rxjs\";\nimport {Stream} from \"./Stream\";\nimport {_global$} from \"./Global\";\n\n\n/**\n * generic crypto interface\n * to encrypt messages before they are sent\n * to the message bus oder the underlying bus system\n *\n * The idea is to make it as easy as possible, you can use for instance crypto js to\n * handle everything\n */\nexport interface Crypto {\n    /**\n     * note anything can be passed\n     *\n     * @param data the data to be encrypted\n     * @returns the encrypted data in any format, important is decode must be able to handle it\n     */\n    encode(data: any): any;\n\n    /**\n     * @param data the encrypted data in the format you expect it to be\n     * @returns the unencrypted data\n     */\n    decode(data: any): any;\n}\n\n\n/**\n * generic hash interface which provides\n * exactly one method a hash encode which returns a string hash value of encoded data\n */\nexport interface Hash {\n    encode(encodedData: string): string;\n}\n\n/**\n * Default implementation = no encryption\n */\nexport class NoCrypto implements Crypto {\n    decode(data: any): string {\n        return data;\n    }\n\n    encode(data: any): any {\n        return data;\n    }\n}\n\n//TODO dynamic encryptor which flushes the messages before changing the keys\n//that way we can rotate and change internal crypto keys on the fly\n\nlet noEncryption = new NoCrypto();\n\nexport class Message {\n\n    creationDate?: number;\n    identifier?: string;\n    targetOrigin?: string;\n    encoded: boolean = false;\n\n    constructor(public message: any = {}, targetOrigin = \"*\") {\n        this.targetOrigin = targetOrigin;\n        this.creationDate = new Date().getMilliseconds();\n        this.identifier = new Date().getMilliseconds() + \"_\" + Math.random() + \"_\" + Math.random();\n    }\n}\n\n/**\n * custom dom event wrapping our messages\n */\nclass MessageWrapper implements CustomEventInit<Message> {\n\n    detail?: Message;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n    channel: string;\n\n    constructor(channel: string, message: Message) {\n        this.detail = message;\n        this.bubbles = true;\n        this.cancelable = true;\n        this.composed = true;\n        this.channel = channel;\n    }\n}\n\n/**\n * abstract broker class\n * (The broker is the central distribution unit of messages)\n */\nabstract class BaseBroker {\n\n    static readonly EVENT_TYPE = \"brokerEvent\";\n    /**\n     * we can split the listeners with the system\n     * namespace... and type (aka identifier criteria)\n     */\n    protected messageListeners: any = {};\n    protected subjects: any = {};\n    protected processedMessages: any = {};\n\n    protected cleanupCnt = 0;\n    protected rootElem;\n    protected msgHandler;\n\n    protected readonly TIMEOUT_IN_MS = 1000;\n    protected readonly MSG_EVENT = \"message\";\n\n    //must be public because we also must have the option\n    //to set it outside of the constructor\n    crypto = noEncryption;\n\n\n    abstract register(scopeElement?: any): BaseBroker;\n\n    abstract unregister(): BaseBroker;\n\n    abstract broadcast(channel: string, message: Message | string): BaseBroker;\n\n\n    /**\n     * registers a listener on a channel\n     * @param channel the channel to register the listeners for\n     * @param listener the listener to register\n     */\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.reserveListenerNS(channel);\n\n        //we skip the processed messages, because they originated here\n        //and already are processed\n        this.messageListeners[channel].push((msg: Message) => {\n            if (msg.identifier in this.processedMessages) {\n                return;\n            }\n            if (msg?.encoded || msg?.[\"detail\"]?.encoded) {\n                if (msg?.[\"detail\"]) {\n                    msg[\"detail\"].message = this.crypto.decode(msg[\"detail\"].message);\n                    msg[\"detail\"].encoded = false;\n                } else {\n                    msg.message = this.crypto.decode(msg.message);\n                    msg.encoded = false;\n                }\n\n            }\n            listener(msg);\n        });\n        return this;\n    }\n\n    /**\n     * binding into rxjs\n     * produces a subject which can be used via next calls to send messages\n     * on the other hand we\n     * @param channel\n     */\n    asSubject(channel: string): Subject<Message> {\n        this.reserveSubjectNS(channel);\n        let subject = this.subjects[channel];\n        let oldNext = subject.next;\n\n        subject.next = (msg: Message | MessageWrapper) => {\n            //We use a recursive call to let the broadcaster handle\n            //The wrapper conversion and then again call us here\n            //that way both directions are handled.. next calls the broker\n            //and a broadcast calls next\n            if ((<MessageWrapper>msg)?.detail) {\n                oldNext.call(subject, (<MessageWrapper>msg)?.detail);\n            } else {\n                this.broadcast(channel, <Message>msg);\n            }\n        }\n        return subject;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * returns an observable on the baseBroker\n     * @param channel\n     */\n    asObservable(channel: string): Observable<Message> {\n        return this.asSubject(channel).asObservable();\n    }\n\n    /**\n     * reserves the listener namespace and wildcard namespace for the given identifier\n     * @param identifier\n     * @private\n     */\n    private reserveListenerNS(identifier: string) {\n        if (!this.messageListeners[identifier]) {\n            this.messageListeners[identifier] = [];\n        }\n        if (!this.messageListeners[\"*\"]) {\n            this.messageListeners[\"*\"] = [];\n        }\n    }\n\n    private reserveSubjectNS(identifier: string) {\n        if (!this.subjects[identifier]) {\n            this.subjects[identifier] = new Subject();\n        }\n        if (!this.subjects[\"*\"]) {\n            this.subjects[\"*\"] = new Subject();\n        }\n    }\n\n    /**\n     * unregisters a listener from this channel\n     *\n     * @param channel the channel to unregister from\n     * @param listener the listener to unregister the channel from\n     */\n    unregisterListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.messageListeners[channel] = (this.messageListeners[channel] || []).filter((item: any) => item !== listener);\n        return this;\n    }\n\n    /**\n     * answers a bidirectional message received\n     * usage, the client can use this method, to answer an incoming message in a precise manner\n     * so that the caller sending the bidirectional message knows how to deal with it\n     * this mechanism can be used for global storages where we have one answering entity per channel delivering the\n     * requested data, the request can be done asynchronously via promises waiting for answers\n     *\n     * @param channel the channel the originating message\n     * @param request the requesting message\n     * @param answer the answer to the request\n     */\n    answer(channel: string, request: Message | string, answer: Message): BaseBroker {\n        if ('string' == typeof request) {\n            request = new Message(request);\n        }\n\n        if (BaseBroker.isAnswer(request)) {\n            return;\n        }\n        answer.identifier = BaseBroker.getAnswerId(request);\n        this.broadcast(channel, answer);\n        return this;\n    }\n\n    private static getAnswerId(request: Message) {\n        return \"_r_\" + request.identifier;\n    }\n\n    private static isAnswer(request: Message) {\n        return request.identifier.indexOf(\"_r_\") == 0;\n    }\n\n    /**\n     * idea... a bidirectional broadcast\n     * sends a message and waits for the first answer coming in from one of the receivers\n     * sending the message back with a messageIdentifier_broadCastId answer\n     *\n     * @param channel\n     * @param message\n     */\n    request(channel: string, message: Message | string): Promise<Message> {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        let messageId = message.identifier;\n\n        let ret = new Promise<Message>((resolve, reject) => {\n            let timeout = null;\n            let listener = (message2: Message) => {\n                if (message2.identifier == messageId) {\n                    //broadcast from same source, we do not want\n                    //to deal with it now\n                    return;\n                }\n\n                if (message2.identifier == \"_r_\" + messageId) {\n                    clearTimeout(timeout);\n                    this.unregisterListener(channel, listener);\n                    resolve(message2);\n                }\n            }\n            timeout = setTimeout(() => {\n                this.unregisterListener(channel, listener);\n                reject(\"request message performed, timeout, no return value\");\n            }, 3000);\n            this.registerListener(channel, listener);\n\n        });\n        this.broadcast(channel, message);\n        return ret;\n    }\n\n\n    /**\n     * garbage collects the processed messages queue\n     * usually after one second\n     */\n    protected gcProcessedMessages() {\n        if ((++this.cleanupCnt) % 10 != 0) {\n            return;\n        }\n        let newProcessedMessages: any = {};\n        Object.keys(this.processedMessages).forEach(key => {\n            if (this.messageStillActive(key)) return;\n            newProcessedMessages[key] = this.processedMessages[key];\n        });\n        this.processedMessages = newProcessedMessages;\n    }\n\n    private messageStillActive(key: string): boolean {\n        return this.processedMessages[key] > ((new Date()).getMilliseconds() - this.TIMEOUT_IN_MS);\n    }\n\n    protected markMessageAsProcessed(message: Message) {\n        this.processedMessages[message.identifier] = message.creationDate;\n    }\n}\n\nlet broadCastChannelBrokerGenerator = (name) => {\n    if (_global$()?.BroadcastChannel) {\n        return new (_global$()).BroadcastChannel(name);\n    }\n    throw Error(\"No Broadcast channel in the system, use a shim or provide a factory function\" +\n        \"in the constructor\");\n};\n\nconst DEFAULT_CHANNEL_GROUP = \"brokr\";\n\n/**\n * a broker which hooks into the Broadcast Channel\n * either via shim or substitute lib\n *\n * The broadcast channels are a standardized messaging library\n * The broker mechanism sets a layer on top to make it more manageable!\n *\n */\nexport class BroadcastChannelBroker extends BaseBroker {\n    private openChannels: [{ key: string }, BroadcastChannel] = <any>{};\n    private readonly msgListener: Function;\n\n\n    /**\n     * @param brokerFactory a factory generating a broker\n     * @param channelGroup a group to combine a set of channels\n     * @param crypto a crypto class\n     */\n    constructor(private brokerFactory: Function = broadCastChannelBrokerGenerator, private channelGroup = DEFAULT_CHANNEL_GROUP, public crypto: Crypto = noEncryption) {\n        super();\n        this.msgListener = (messageData: MessageWrapper) => {\n            if (messageData.detail.encoded) {\n                messageData.detail.message = <any>this.crypto.decode(messageData.detail.message);\n                messageData.detail.encoded = false;\n            }\n            let coreMessage = messageData.detail;\n            let channel: string = messageData.channel;\n\n            if (this.messageListeners?.[channel]) {\n                this.messageListeners?.[channel].forEach(listener => {\n                    listener(coreMessage);\n                })\n            }\n            this.markMessageAsProcessed(coreMessage);\n            return true;\n        }\n        this.crypto = crypto;\n        this.register();\n    }\n\n    broadcast(channel: string, message: Message | string, includeOrigin = true): BaseBroker {\n        try {\n            if ('string' == typeof message) {\n                message = new Message(message);\n            }\n            //we now run a quick remapping to avoid\n            //serialisation errors\n            let msgString = JSON.stringify(<Message>message);\n            message = <Message>JSON.parse(msgString);\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n            messageWrapper.detail.encoded = true;\n\n            if (this?.subjects[channel]) {\n                this.subjects[channel].next(messageWrapper);\n            }\n\n            this.openChannels[this.channelGroup].postMessage(messageWrapper);\n            if (includeOrigin) {\n                this.msgListener(messageWrapper);\n            }\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        super.registerListener(channel, listener);\n        return <BaseBroker>this;\n    }\n\n    register(): BaseBroker {\n        if (!this.openChannels[this.channelGroup]) {\n            this.openChannels[this.channelGroup] = this.brokerFactory(this.channelGroup);\n        }\n        this.openChannels[this.channelGroup].addEventListener(\"message\", this.msgListener);\n        return <BaseBroker>this;\n    }\n\n    unregister(): BaseBroker {\n        this.openChannels[this.channelGroup].close();\n        return <BaseBroker>this;\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a broadcast channel broker\n */\nexport class BroadcastChannelBrokerBuilder {\n    private broadCastChannelGenerator: Function = broadCastChannelBrokerGenerator;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withGeneratorFunc(generatorFunc: Function): BroadcastChannelBrokerBuilder {\n        this.broadCastChannelGenerator = generatorFunc;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BroadcastChannelBrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n    withChannelGroup(channelGroup: string): BroadcastChannelBrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BroadcastChannelBrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): BroadcastChannelBroker {\n        let broker = new BroadcastChannelBroker(this.broadCastChannelGenerator, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}\n\n\n/**\n * implementation of a messaging based transport\n */\n\n/**\n * central message broker which uses various dom constructs\n * to broadcast messages into subelements\n *\n * we use the dom event system as transport and iframe and shadow dom mechanisms in a transparent way to\n * pull this off\n *\n * usage\n *\n * broker = new Broker(optional rootElement)\n *\n * defines a message broker within a scope of rootElement (without it is window aka the current isolation level)\n *\n * broker.registerListener(channel, listener) registers a new listener to the current broker and channel\n * broker.unregisterListener(channel, listener) unregisters the given listener\n *\n * broker.broadcast(message, optional direction, optional callBrokerListeners)\n * sends a message (channel included in the message object) in a direction (up, down, both)\n * and also optionally calls the listeners on the same broker (default off)\n *\n * the flow is like\n * up messages are propagated upwards only until it reaches the outer top of the dom\n * downwards, the messages are propagated downwards only\n * both the message is propagated into both directions\n *\n * Usually messages sent from the same broker are not processed within... however by setting\n * callBrokerListeners to true the listeners on the same broker also are called\n * brokers on the same level will get the message and process it automatically no matter what.\n * That way you can exclude the source from message processing (and it is done that way automatically)\n *\n * Isolation levels. Usually every isolation level needs its own broker object registering\n * on the outer bounds\n *\n * aka documents will register on window\n * iframes on the iframe windowObject\n * isolated shadow doms... document\n *\n *\n *\n */\nexport class Broker extends BaseBroker {\n\n    /**\n     * constructor has an optional root element\n     * and an internal name\n     *\n     * @param scopeElement\n     * @param brokerGroup\n     * @param crypto\n     */\n    constructor(scopeElement: HTMLElement | Window | ShadowRoot = window, public brokerGroup = \"brokr\", crypto: Crypto = noEncryption) {\n\n        super();\n\n        /**\n         * message relay.. identifies message events and relays them to the listeners\n         * @param event\n         */\n        let evtHandler = (event: MessageEvent | CustomEvent<Message>) => {\n            let details = (<any>event)?.detail ?? (<MessageEvent>event)?.data?.detail;\n            //TODO possible crypto hook, needs unit testing\n            let channel = ((<any>event)?.data?.channel) ?? ((<any>event)?.channel);\n\n            //javascript loses the type info in certain module types\n            if (details?.identifier && details?.message) {\n                let msg: Message = details;\n                if (msg.identifier in this.processedMessages) {\n                    return;\n                }\n                //coming in from up... we need to send it down\n                //a relayed message always has to trigger the listeners as well\n                if ((<any>event)?.detail) {\n                    this.broadcast(channel, msg);\n                } else {\n                    this.broadcast(channel, msg);\n                }\n\n            }\n        };\n        this.msgHandler = (evt: MessageEvent) => evtHandler(evt);\n        this.crypto = crypto;\n        this.register(scopeElement);\n    }\n\n    /**\n     * register the current broker into a scope defined by wnd\n     * @param scopeElement\n     */\n    register(scopeElement: HTMLElement | Window | ShadowRoot): BaseBroker {\n        this.rootElem = (<any>scopeElement).host ? (<any>scopeElement).host : scopeElement;\n        if ((<any>scopeElement).host) {\n            let host = (<ShadowRoot>scopeElement).host;\n            host.setAttribute(\"data-broker\", \"1\");\n        } else {\n            if (scopeElement?.[\"setAttribute\"])\n                (<any>scopeElement).setAttribute(\"data-broker\", \"1\");\n        }\n\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler, {capture: true});\n        /*dom message usable by iframes*/\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE + this.MSG_EVENT, this.msgHandler, {capture: true});\n        return <any>this;\n    }\n\n    /**\n     * manual unregister function, to unregister as broker from the current\n     * scope\n     */\n    unregister(): BaseBroker {\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler)\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + this.MSG_EVENT, this.msgHandler)\n        return <any>this;\n    }\n\n\n    /**\n     * broadcast a message\n     * the message contains the channel and the data and some internal bookkeeping data\n     *\n     * @param channel the channel to broadcast to\n     * @param message the message dot send\n     * (for instance 2 iframes within the same parent broker)\n     */\n    broadcast(channel: string, message: Message | string): BaseBroker {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        //message.message = this.crypto.encode(message);\n        //message.encoded = true;\n\n        if (this?.subjects[channel]) {\n            let messageWrapper = new MessageWrapper(channel, message);\n            if (!messageWrapper.detail.encoded) {\n                messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n                messageWrapper.detail.encoded = true;\n            }\n            this.subjects[channel].next(messageWrapper);\n        }\n\n        try {\n            this.dispatchUp(channel, message, false, true);\n            //listeners already called\n            this.dispatchDown(channel, message, true, false)\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n\n    private dispatchUp(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.markMessageAsProcessed(message);\n        if (_global$().parent != null) {\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            _global$().parent.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        }\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n    private dispatchSameLevel(channel: string, message: Message) {\n        let event = this.transformToEvent(channel, message, true);\n        //we also dispatch sideways\n        _global$().dispatchEvent(event);\n    }\n\n    //a dispatch of our own should never trigger the listeners hence the default true\n    private dispatchDown(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        let evt = this.transformToEvent(channel, message);\n\n        /*we now notify all iframes lying underneath */\n        Array.prototype.slice.call(document.querySelectorAll(\"iframe\")).forEach((element: HTMLIFrameElement) => {\n            let messageWrapper = new MessageWrapper(channel, message);\n            element.contentWindow.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        });\n\n        Array.prototype.slice.call(document.querySelectorAll(\"[data-broker='1']\")).forEach((element: HTMLElement) => element.dispatchEvent(evt))\n\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n\n    private msgCallListeners(channel: string, message: Message) {\n        let listeners = this.messageListeners[channel];\n        if (listeners?.length) {\n            let callElement = (element: (msg: Message) => void) => {\n                element(message);\n            }\n\n            listeners.forEach(callElement);\n        }\n    }\n\n    private transformToEvent(channel: string, message: Message, bubbles = false): CustomEvent {\n        let messageWrapper = new MessageWrapper(channel, message);\n        messageWrapper.bubbles = bubbles;\n        return Broker.createCustomEvent(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, messageWrapper);\n    }\n\n    private static createCustomEvent(name: string, wrapper: MessageWrapper): any {\n        if ('function' != typeof _global$().CustomEvent) {\n            let e: any = document.createEvent('HTMLEvents');\n            e.detail = wrapper.detail;\n            e.channel = wrapper.channel;\n            e.initEvent(name, wrapper.bubbles, wrapper.cancelable);\n            return e;\n\n        } else {\n            let customEvent = new (_global$()).CustomEvent(name, wrapper);\n            (<any>customEvent).channel = wrapper.channel;\n            return customEvent;\n        }\n\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a dom broker\n */\nexport class BrokerBuilder {\n    private scopeElement: HTMLElement | Window | ShadowRoot = window;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withScopeElement(scopeElement: HTMLElement | Window | ShadowRoot): BrokerBuilder {\n        this.scopeElement = scopeElement;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n\n    withChannelGroup(channelGroup: string): BrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): Broker {\n        let broker = new Broker(this.scopeElement, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        new Es2019Array(...other.getIf(key).value).forEach(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos =  Array.isArray(currAccessPos.value) ?\n                         Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !! (item?.[currKey] ?? false);\n                        })?.[currKey])  :\n                Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if(currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/*\n * Promise wrappers for timeout and interval\n */\nexport function timeout(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setTimeout(() => apply(), timeout);\n    }, () => {\n        if (handler) {\n            clearTimeout(handler);\n            handler = null;\n        }\n    });\n}\n\nexport function interval(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setInterval(() => {\n            apply();\n        }, timeout);\n    }, () => {\n        if (handler) {\n            clearInterval(handler);\n            handler = null;\n        }\n    });\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //let func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n            if (fn.catch) {\n                let funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            let fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Config} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array<S>(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {Config, IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource, calculateSkips,\n    FilteredStreamDatasource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource, MultiStreamDatasource\n} from \"./SourcesCollectors\";\nimport {DomQuery} from \"./DomQuery\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n\n        let lookAhead = this?.activeDataSource?.lookAhead(cnt);\n        if (this?.activeDataSource && lookAhead != ITERATION_STATUS.EO_STRM) {\n            //this should cover 95% of all cases\n            return lookAhead;\n        }\n\n        if (this.activeDataSource) {\n            cnt -= calculateSkips(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams sub-sequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them, so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let datasourceData = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            //no embedded data anymore? we are done, data\n            //can either be a scalar an array or another datasource\n            if (datasourceData === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mappedData = this.mapFunc(datasourceData as T);\n\n            //it either comes in as datasource or as array\n            //both cases must be unified into a datasource\n            let currentDataSource = this.toDatasource(mappedData);\n            //we now run again  a lookahead\n            let ret = currentDataSource.lookAhead(cnt);\n            //if the value is found then we are set\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            //reduce the next lookahead by the number of elements\n            //we are now skipping in the current data source\n            cnt -= calculateSkips(currentDataSource);\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns the currently element selected in the stream\n     */\n    current(): T | ITERATION_STATUS\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T>, IStreamDataSource<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    static ofDomQuery(value: DomQuery): Stream<DomQuery> {\n        return Stream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): Stream<[string, any]> {\n        return Stream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    current(): T | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        if(this.pos >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos];\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    static ofDomQuery(value: DomQuery): LazyStream<DomQuery> {\n        return LazyStream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): LazyStream<[string, any]> {\n        return LazyStream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.ofStreamDataSource(new MultiStreamDatasource(this, toAppend as any) as any)\n        //return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//poliyfill from @webcomponents/webcomponentsjs\nimport {DomQuery} from \"./DomQuery\";\nimport {_global$} from \"./Global\";\n\n\nif (\"undefined\" != typeof _global$) {\n    (function () {\n        if (void 0 === _global$().Reflect || void 0 === _global$().customElements || (<any>_global$().customElements).polyfillWrapFlushCallback) return;\n        const a = HTMLElement;\n        _global$().HTMLElement = {\n            HTMLElement: function HTMLElement() {\n                return Reflect.construct(a, [], this.constructor)\n            }\n        }.HTMLElement, HTMLElement.prototype = a.prototype, HTMLElement.prototype.constructor = HTMLElement, Object.setPrototypeOf(HTMLElement, a);\n    })();\n}\n\n/**\n * beginning custom tag support\n *\n * This api is still experimental\n * and might be interwoven with DomQuery\n * so it is bound to change\n *\n * it follows a builder pattern to allow easier creations\n * with less code of custom tags\n */\nexport class TagBuilder {\n    tagName: string;\n    connectedCallback?: Function;\n    clazz?: CustomElementConstructor;\n    extendsType: CustomElementConstructor = HTMLElement;\n    theOptions: ElementDefinitionOptions | null;\n    markup: string;\n    disconnectedCallback?: Function;\n    adoptedCallback ?: Function;\n    attributeChangedCallback ?: Function;\n    observedAttrs: string[] = [];\n\n    // noinspection JSUnusedGlobalSymbols\n    static withTagName(tagName): TagBuilder {\n        return new TagBuilder(tagName);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withObservedAttributes(...oAttrs) {\n        this.observedAttrs = oAttrs;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withConnectedCallback(callback: Function) {\n        this.connectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withDisconnectedCallback(callback: Function) {\n        this.disconnectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAdoptedCallback(callback: Function) {\n        this.adoptedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAttributeChangedCallback(callback: Function) {\n        this.attributeChangedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withExtendsType(extendsType: CustomElementConstructor) {\n        this.extendsType = extendsType;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withOptions(theOptions) {\n        this.theOptions = theOptions;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withClass(clazz) {\n        if (this.markup) {\n            throw Error(\"Markup already defined, markup must be set in the class\");\n        }\n        this.clazz = clazz;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withMarkup(markup) {\n        if (this.clazz) {\n            throw Error(\"Class already defined, markup must be set in the class\");\n        }\n        this.markup = markup;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    register() {\n        if (!this.clazz && !this.markup) {\n            throw Error(\"Class or markup must be defined\")\n        }\n        if (this.clazz) {\n\n            let applyCallback = (name: string) => {\n                let outerCallback = this[name];\n                let protoCallback = (<any>this.clazz.prototype)[name];\n                let finalCallback = outerCallback || protoCallback;\n                if (finalCallback) {\n                    (<any>this.clazz.prototype)[name] = function () {\n                        if(outerCallback) {\n                            finalCallback.apply(DomQuery.byId(this));\n                        } else {\n                            protoCallback.apply(<any>this);\n                        }\n                    }\n                }\n            }\n\n            applyCallback(\"connectedCallback\");\n            applyCallback(\"disconnectedCallback\");\n            applyCallback(\"adoptedCallback\");\n            applyCallback(\"attributeChangedCallback\");\n\n            //TODO how do we handle the oAttrs?\n            if (this.observedAttrs.length) {\n                Object.defineProperty(this.clazz.prototype, \"observedAttributes\", {\n                    get(): any {\n                        return this.observedAttrs;\n                    }\n                });\n            }\n\n            _global$().customElements.define(this.tagName, this.clazz, this.theOptions || null);\n        } else {\n            let _t_ = this;\n            let applyCallback = (name: string, scope: any) => {\n                if (_t_[name]) {\n                    _t_[name].apply(DomQuery.byId(<any>scope));\n                }\n            };\n\n            _global$().customElements.define(this.tagName, class extends this.extendsType {\n                constructor() {\n                    super();\n                    this.innerHTML = _t_.markup;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                static get observedAttributes() {\n                    return _t_.observedAttrs;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                connectedCallback() {\n                    applyCallback(\"connectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                disconnectedCallback() {\n                    applyCallback(\"disconnectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                adoptedCallback() {\n                    applyCallback(\"adoptedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                attributeChangedCallback() {\n                    applyCallback(\"attributeChangedCallback\", this);\n                }\n\n            }, this.theOptions || null);\n        }\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\nimport {_global$} from \"./Global\";\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new (_global$()).DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (_global$())?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","module.exports = __WEBPACK_EXTERNAL_MODULE__792__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport {DomQuery, ElementAttribute, DomQueryCollector, DQ, DQ$} from \"./DomQuery\";\nexport {Lang} from \"./Lang\";\nexport {Config, CONFIG_VALUE, CONFIG_ANY, ConfigDef, Monad, IValueHolder, IFunctor, IMonad, IIdentity, Optional, ValueEmbedder} from \"./Monad\";\nexport {CancellablePromise, IPromise, PromiseStatus} from \"./Promise\";\nexport {XMLQuery, XQ} from \"./XmlQuery\";\nexport {Stream, LazyStream, IteratableConsumer, FlatMapStreamDataSource, IStream} from \"./Stream\";\nexport {\n    ArrayStreamDataSource,\n    MappedStreamDataSource,\n    FilteredStreamDatasource,\n    MultiStreamDatasource,\n    SequenceDataSource,\n    QueryFormStringCollector,\n    IStreamDataSource,\n    ICollector,\n    ArrayCollector,\n    ConfigCollector,\n    AssocArrayCollector,\n    FormDataCollector,\n    QueryFormDataCollector,\n} from \"./SourcesCollectors\";\n\n\nexport {TagBuilder} from \"./TagBuilder\";\n\nexport {Message, Broker, BroadcastChannelBroker, Crypto, NoCrypto, Hash} from \"./Messaging\";\nexport {JSONCrypto, ExpiringCrypto} from \"./CryptoExtensions\";\n\n\n"],"names":["decode","data","encryptedData","JSON","parse","encode","stringify","JSONCrypto","timeout","parentCrypto","hashSum","gcCycleCnt","storedMessages","lastCall","currTime","Date","getTime","this","gcLimitReached","LazyStream","ofAssoc","filter","collect","AssocArrayCollector","rotatingEncoded","toString","Error","ExpiringCrypto","MAX_GC_CYCLES","encoded","ALLOWED_SUBMITTABLE_ELEMENTS","trim","Lang","isString","eqi","equalsIgnoreCase","objToArray","waitUntilDom","root","condition","options","attributes","childList","subtree","interval","Promise","success","error","observer","MUT_ERROR","findElement","childNodes","item","first","value","querySelectorAll","foundElement","DomQuery","MutationObserver","setTimeout","disconnect","mutationList","found","map","mut","target","isPresent","clearTimeout","eachElem","observe","setInterval","clearInterval","element","name","defaultVal","val","get","orElse","values","length","getAttribute","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","style","Style","DEFAULT_WHITELIST","rootNode","pos","_limits","Optional","isAbsent","push","getAsElem","allElems","_global$","getIf","isTag","tagName","nodeName","toLowerCase","absent","inputValue","id","Es2019Array","every","el","checked","newChecked","querySelectorAllDeep","queryStr","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","childNodeArr","concat","byId","elem","offsetWidth","reduce","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","selector","document","indexOf","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","globalEvalSticky","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","search","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","closest","_closestDeep","_closest","includeRoot","res","subItems","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","newInnerHTML","dispatchEvent","evt","retArr","newInnerHtml","filterSelector","matched","_mozMatchesSelector","asArray","some","selectorStage","nodeSelector","func","len","firstElem","lastElem","each","forEach","replace","toReplace","asElem","parent","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","insertBefore","insertAfter","append","last","lastNode","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","applyNonce","appendTo","orElseLazy","loadScriptEval","src","delay","_loadScriptEval","loadScriptEvalSticky","existingItem","existingElement","nextSibling","toInsertParams","insertElem","elseValue","allParents","ret","firstParent","parentsWhileMatch","host","copyAttrs","sourceItem","sourceNode","attrs","resolveAttributeHolder","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","sticky","whitelisted","evalCollectedScripts","scriptsToProcess","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","substring","flatMap","sort","node1","node2","compareDocumentPosition","e","console","message","description","_toReplace","rel","matches","styles","filteredStyles","execCss","click","fireEvent","addEventListener","listener","removeEventListener","eventName","finalOptions","Config","bubbles","cancelable","shallowMerge","toJson","ownerDocument","nodeType","EventClass","Event","global","MouseEvent","KeyboardEvent","synthetic","createEventObject","Object","keys","key","textContent","joinString","text1","text2","encodeFormElement","toMerge","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","assign","Array","from","reduced","subNodes","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","ITERATION_STATUS","EO_STRM","current","BEF_STRM","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","idx","notFound","prependTo","prepend","foundNodes","selectors","split","cnt2","levelSelector","toMatch","prototypeOwner","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","i","srcNode","createSourceNode","nonceCheck","marker","now","random","attrName","DomQueryCollector","DQ","DQ$","another","prototype","flatmapFun","flatMap_","mapperFunction","noFallback","remap","opRes","isArray","newItem","items","reverse","start","splice","deleteCount","predicate","thisArg","globalThis","window","g","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","theArgs","nextSource","nextKey","hasOwnProperty","NoCrypto","noEncryption","targetOrigin","creationDate","getMilliseconds","identifier","Message","channel","detail","composed","messageListeners","subjects","processedMessages","cleanupCnt","TIMEOUT_IN_MS","MSG_EVENT","crypto","registerListener","reserveListenerNS","msg","asSubject","reserveSubjectNS","subject","oldNext","broadcast","asObservable","Subject","unregisterListener","answer","request","BaseBroker","isAnswer","getAnswerId","messageId","resolve","reject","message2","gcProcessedMessages","newProcessedMessages","messageStillActive","markMessageAsProcessed","EVENT_TYPE","broadCastChannelBrokerGenerator","BroadcastChannel","DEFAULT_CHANNEL_GROUP","brokerFactory","channelGroup","openChannels","msgListener","messageData","coreMessage","register","includeOrigin","msgString","messageWrapper","MessageWrapper","postMessage","unregister","close","BroadcastChannelBroker","broadCastChannelGenerator","listeners","withGeneratorFunc","generatorFunc","withListener","Stream","of","withChannelGroup","withCrypto","build","broker","listenerItem","BroadcastChannelBrokerBuilder","scopeElement","brokerGroup","msgHandler","event","details","evtHandler","rootElem","Broker","capture","dispatchUp","dispatchDown","ignoreListeners","callBrokerListeners","msgCallListeners","dispatchSameLevel","transformToEvent","contentWindow","createCustomEvent","wrapper","CustomEvent","createEvent","initEvent","customEvent","withScopeElement","BrokerBuilder","_value","fn","inVal","Monad","preprocessKeys","currentPos","currKey","keyVal","arrPos","arrayIndex","getIfPresent","match","parseInt","resolver","newVal","alternative","ConfigEntry","CONFIG_VALUE","CONFIG_ANY","configDef","shallowCopy$","deepCopy$","other","overwrite","withAppend","noKeys","accessPath","assertAccessPath","lastKey","pathExists","buildPath","finalKeyArrPos","apply","appendIf","assignIf","setVal","ERR_ACCESS_PATH","currAccessPos","find","parentVal","parentPos","alloc","arr","length1","length2","isArrayPos","tempVal","isNoArray","PromiseStatus","handler","CancellablePromise","executor","status","PENDING","allFuncs","all","myapply","promiseCnt","myPromise","promises","__last__","finally","race","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","cancellator","cancel","calculateSkips","next_strm","selectedPos","strms","activeStrm","findNextStrm","all_strms","MultiStreamDatasource","total","SequenceDataSource","dataPos","max","ArrayStreamDataSource","filterFunc","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","lookupVal","loop","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","ShimArrayCollector","unshift","InverseArrayCollector","finalValue","ArrayAssocArrayCollector","Run","ConfigCollector","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ArrayCollector","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","dsLoop","datasourceData","mappedData","currentDataSource","toDatasource","ds","FlatMapStreamDataSource","ofDataSource","dataSource","ofDomQuery","ofConfig","toConcat","toAppend","onElem","inval","strmR","startVal","val1","anyMatch","allMatch","noneMatch","comparator","newArr","collector","ofStreamDataSource","isOverLimits","nextFilter","t","stop","value1","value2","el1","el2","Reflect","customElements","polyfillWrapFlushCallback","a","HTMLElement","construct","constructor","setPrototypeOf","extendsType","observedAttrs","withTagName","TagBuilder","withObservedAttributes","oAttrs","withConnectedCallback","callback","connectedCallback","withDisconnectedCallback","disconnectedCallback","withAdoptedCallback","adoptedCallback","withAttributeChangedCallback","attributeChangedCallback","withExtendsType","withOptions","theOptions","withClass","withMarkup","applyCallback","outerCallback","protoCallback","finalCallback","defineProperty","define","scope","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","serialized","XMLSerializer","serializeToString","parserErrorText","joinstr","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ","module","exports","__WEBPACK_EXTERNAL_MODULE__792__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}