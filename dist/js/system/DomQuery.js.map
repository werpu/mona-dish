{"version":3,"file":"DomQuery.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/AssocArray.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Config.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * various helpers to deal with associative\n * arrays. If someone feels uncomfortable using\n * The config system, this is similar!\n */\nimport {IValueHolder} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * A nop as assign functionality (aka ignore assign)\n */\nclass IgnoreAssign implements IValueHolder<any>  {\n    constructor(private parent: any) {}\n\n    set value(value: any | Array<any>) {\n    }\n    get value(): any | Array<any> {\n        return this.parent;\n    }\n};\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assign<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return new IgnoreAssign(target);\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let assigner: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            lastPathItem.target[lastPathItem.key] = value;\n        }\n\n        get value(): T | Array<T> {\n            return lastPathItem.target[lastPathItem.key];\n        }\n    })();\n    return assigner;\n}\n\n\nexport function append<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return new IgnoreAssign(target);\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let appender: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            if(!Array.isArray(value)) {\n                value = [value];\n            }\n            if(!lastPathItem.target[lastPathItem.key]) {\n                lastPathItem.target[lastPathItem.key] = value\n            } else {\n                if(!Array.isArray(lastPathItem.target[lastPathItem.key])) {\n                    lastPathItem.target[lastPathItem.key] = [lastPathItem.target[lastPathItem.key]];\n                }\n                lastPathItem.target[lastPathItem.key].push(...value);\n            }\n        }\n    })();\n    return appender;\n}\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assignIf<T>(condition: boolean, target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if ((!condition) || accessPath.length < 1) {\n        return new IgnoreAssign(target);\n    }\n    return assign(target, ...accessPath);\n}\n\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function appendIf<T>(condition: boolean, target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if ((!condition) || accessPath.length < 1) {\n        return new IgnoreAssign(target);\n    }\n    return append(target, ...accessPath);\n}\n\nexport function resolve<T>(target, ...accessPath: string[]): T | null {\n    let ret = null;\n    accessPath = flattenAccessPath(accessPath);\n    let currPtr = target;\n    for(let cnt = 0; cnt < accessPath.length; cnt++) {\n        let accessKeyIndex: number | string = accessPath[cnt];\n        accessKeyIndex = arrayIndex(accessKeyIndex) != -1 ? arrayIndex(accessKeyIndex) : accessKeyIndex;\n        currPtr = currPtr?.[accessKeyIndex];\n        if('undefined' == typeof currPtr) {\n            return null;\n        }\n        ret = currPtr;\n    }\n    return currPtr;\n}\n\n\nfunction keyVal(key: string): string {\n    let start = key.indexOf(\"[\");\n\n    if (start >= 0) {\n        return key.substring(0, start);\n    } else {\n        return key;\n    }\n}\n\nfunction arrayIndex(key: string): number {\n    let start = key.indexOf(\"[\");\n    let end = key.indexOf(\"]\");\n    if (start >= 0 && end > 0 && start < end) {\n        return parseInt(key.substring(start + 1, end));\n    } else {\n        return -1;\n    }\n}\n\nfunction isArrayPos(currKey: string, arrPos: number): boolean {\n    return currKey === \"\" && arrPos >= 0;\n}\n\nfunction isNoArray(arrPos: number): boolean {\n    return arrPos == -1;\n}\n\nfunction alloc(arr: Array<any>, length: number, defaultVal = {}) {\n    let toAdd = [];\n    toAdd.length = length;\n    toAdd[length - 1] = defaultVal;\n    arr.push(...toAdd);\n}\n\n\nfunction flattenAccessPath(accessPath: string[]) {\n    return new Es2019Array(...accessPath).flatMap(path => path.split(\"[\"))\n        .map(path => path.indexOf(\"]\") != -1 ? \"[\" + path : path)\n        .filter(path => path != \"\");\n}\n\n/**\n * builds up a path, only done if no data is present!\n * @param target\n * @param accessPath\n * @returns the last assignable entry\n */\nexport function buildPath(target, ...accessPath: string[]) {\n    accessPath = flattenAccessPath(accessPath);\n    //we now have a pattern of having the array accessors always in separate items\n    let parentPtr = target;\n    let parKeyArrPos = null;\n    let currKey = null;\n    let arrPos = -1;\n\n    for (let cnt = 0; cnt < accessPath.length; cnt++) {\n        currKey = keyVal(accessPath[cnt]);\n        arrPos = arrayIndex(accessPath[cnt]);\n        //it now is either key or arrPos\n        if (arrPos != -1) {\n            //case root(array)[5] -> root must be array and allocate 5 elements\n            //case root.item[5] root.item must be array and of 5 elements\n            if(!Array.isArray(parentPtr)) {\n                throw Error(\"Associative array referenced as index array in path reference\");\n            }\n\n            //we need to look ahead for proper allocation\n            //not end reached\n            let nextArrPos = -1;\n            if(cnt < accessPath.length - 1) {\n                nextArrPos = arrayIndex(accessPath[cnt + 1])\n            }\n            let dataPresent = 'undefined' != typeof parentPtr?.[arrPos];\n            //no data present check here is needed, because alloc only reserves if not present\n            alloc(parentPtr, arrPos + 1, nextArrPos != -1 ?[]: {});\n            parKeyArrPos = arrPos;\n            //we now go to the reserved element\n            if(cnt == accessPath.length - 1) {\n                parentPtr[arrPos] = (dataPresent) ? parentPtr[arrPos] : null;\n            } else {\n                parentPtr = parentPtr[arrPos];\n            }\n        } else {\n            if(Array.isArray(parentPtr)) {\n                throw Error(\"Index array referenced as associative array in path reference\");\n            }\n            //again look ahead whether the next value is an array or assoc array\n            let nextArrPos = -1;\n            if(cnt < accessPath.length - 1) {\n                nextArrPos = arrayIndex(accessPath[cnt + 1])\n            }\n            parKeyArrPos = currKey;\n            let dataPresent = 'undefined' != typeof parentPtr?.[currKey];\n            if(cnt == accessPath.length - 1) {\n                if(!dataPresent) {\n                    parentPtr[currKey] = null;\n                }\n            } else {\n                if(!dataPresent) {\n                    parentPtr[currKey] = nextArrPos == -1 ? {} : [];\n                }\n                parentPtr = parentPtr[currKey];\n            }\n        }\n    }\n\n    return {target: parentPtr, key: parKeyArrPos};\n\n}\n\nexport function deepCopy(fromAssoc: {[key: string]: any}): {[key: string]: any} {\n    return JSON.parse(JSON.stringify(fromAssoc));\n}\n\n/**\n * simple left to right merge\n *\n * @param assocArrays\n */\nexport function simpleShallowMerge(...assocArrays) {\n   return shallowMerge(true, false, ...assocArrays);\n}\n\n/**\n * Shallow merge as in config, but on raw associative arrays\n *\n * @param overwrite\n * @param withAppend\n * @param assocArrays\n */\nexport function shallowMerge(overwrite = true, withAppend = false, ...assocArrays) {\n    let target: {[key: string]: any} = {};\n    new Es2019Array(...assocArrays).map(arr => {\n        return {arr, keys: Object.keys(arr)};\n    }).forEach(({arr, keys}) => {\n        keys.forEach(key => {\n            let toAssign = arr[key];\n            if(!Array.isArray(toAssign) && withAppend) {\n                toAssign = new Es2019Array(...[toAssign]);\n            }\n            if(overwrite || !target?.[key]) {\n                if(!withAppend) {\n                    target[key] = arr[key];\n                } else {\n                        if('undefined' == typeof target?.[key]) {\n                            target[key] = toAssign\n                        } else if(!Array.isArray(target[key])) {\n                            let oldVal = target[key];\n                            target[key] = new Es2019Array(...[]);\n                            target[key].push(oldVal);\n                            target[key].push(...toAssign);\n                        } else {\n                            target[key].push(...toAssign);\n                        }\n                }\n            }\n        })\n    });\n    return target;\n}\n\n","import {Es2019Array} from \"./Es2019Array\";\nimport {IValueHolder, Optional, ValueEmbedder} from \"./Monad\";\nimport {Lang} from \"./Lang\";\nimport objAssign = Lang.objAssign;\nimport {append, appendIf, assign, assignIf, resolve, shallowMerge} from \"./AssocArray\";\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\nexport type ConfigDef = { [key: string]: any };\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        //shallow merge must be mutable so we have to remap\n        let newThis = shallowMerge(overwrite, withAppend, this.value, other.value);\n        if (Array.isArray(this._value)) {\n            this._value.length = 0;\n            this._value.push(...(newThis as any));\n        } else {\n            Object.getOwnPropertyNames(this._value).forEach(key => delete this._value[key]);\n            Object.getOwnPropertyNames(newThis).forEach(key => this._value[key] = newThis[key]);\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        return append(this._value, ...accessPath);\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        return appendIf(condition, this._value, ...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        return assign(this.value, ...accessPath);\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return assignIf(condition, this._value, ...accessPath);\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(resolve(this.value, ...accessPath));\n    }\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n     * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if (!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if (this.isArray(arrPos)) {\n                if (currKey != \"\") {\n                    currAccessPos = Array.isArray(currAccessPos.value) ?\n                        Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !!(item?.[currKey] ?? false);\n                        })?.[currKey]) :\n                    Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if (!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if (currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n}","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\nclass Es2019Array_<T>  extends Array<T>{\n\n    _another: T[];\n\n    constructor(...another: T[]) {\n        super(...another);\n        if((another as any)._another)  {\n            this._another = (another as any)._another;\n        } else {\n            this._another = another;\n        }\n\n        //for testing it definitely runs into this branch because we are on es5 level\n        //if (!(<any>Array.prototype).flatMap) {\n            this.flatMap = (flatMapFun) => this._flatMap(flatMapFun) as any;\n        //}\n        //if (!(<any>Array.prototype).flat) {\n            this.flat = (flatLevel: number = 1) => this._flat(flatLevel);\n        //}\n    }\n\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] {\n        const ret = Array.prototype.map.call(this._another, callbackfn, thisArg);\n        return new (_Es2019Array as any) (... ret);\n    }\n\n    concat(...items): T[] {\n        const ret = Array.prototype.concat.call(this._another, ...items);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    reverse(): T[] {\n        const ret = Array.prototype.reverse.call(this._another);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    slice(start?: number, end?: number): T[] {\n        const ret = Array.prototype.slice.call(this._another, start, end);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        const ret = Array.prototype.splice.call(this._another, start, deleteCount);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        const ret = Array.prototype.filter.call(this._another, predicate, thisArg);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n        const ret = Array.prototype.reduce.call(this._another, callbackfn, initialValue);\n        return ret;\n    }\n\n    /*reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T {\n        const ret = Array.prototype.reduceRight.call(callbackfn, initialValue);\n        return ret;\n    }*/\n\n    private _flat(flatDepth = 1) {\n        return this._flatResolve(this._another, flatDepth);\n    }\n\n    private _flatResolve(arr, flatDepth = 1) {\n        //recursion break\n        if (flatDepth == 0) {\n            return arr;\n        }\n        let res = [];\n\n        let reFlat = item => {\n            item = Array.isArray(item) ? item : [item];\n            let mapped = this._flatResolve(item, flatDepth - 1);\n            res = res.concat(mapped);\n        };\n        arr.forEach(reFlat)\n\n        return new Es2019Array(...res);\n    }\n\n    private _flatMap(mapperFunction: Function): any {\n        let res = this.map(item => mapperFunction(item));\n        return this._flatResolve(res);\n    }\n}\n\n//let _Es2019Array = function<T>(...data: T[]) {};\n\n//let oldProto = Es2019Array.prototype;\n\nexport function _Es2019Array<T>(...data: T[]): Es2019Array_<T> {\n    let ret = new Es2019Array_<T>(...data);\n    let proxied = new Proxy<Es2019Array_<T>>(ret, {\n        get(target: Es2019Array_<unknown>, p: string | symbol, receiver: any): any {\n            if(\"symbol\" == typeof p) {\n\n                return target._another[p];\n            }\n            if(!isNaN(parseInt(p as string))) {\n                return target._another[p];\n            } else {\n                return target[p];\n            }\n        },\n\n        set(target, property, value): boolean {\n            target[property] = value;\n            target._another[property] = value;\n            return true;\n        }\n\n    });\n    return proxied;\n};\n\n/**\n * this is the switch between normal array and our shim\n * the shim is only provided in case the native browser\n * does not yet have flatMap support on arrays\n */\nexport var Es2019Array: any = (Array.prototype.flatMap) ? function<T>(...data: T[]): T[] {\n    // sometimes the typescript compiler produces\n    // an array without flatmap between boundaries (the result produces True for Array.isArray\n    // but has no flatMap function, could be a node issue also or Typescript!\n    // we remap that (could be related to: https://github.com/microsoft/TypeScript/issues/31033\n    // the check and remap fixes the issue which should not exist in the first place\n    return data?.flatMap ? data : _Es2019Array(...data);\n} : _Es2019Array;","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return new Es2019Array(...pack.concat(Array.prototype.slice.call(obj, offset)));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport {Config} from \"./Config\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IValueHolder, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\n\nimport {ICollector, IStreamDataSource, ITERATION_STATUS} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport {_global$} from \"./Global\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport objToArray = Lang.objToArray;\nimport {append, assign, simpleShallowMerge} from \"./AssocArray\";\nimport {IDomQuery} from \"./IDomQuery\";\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\nclass NonceValueEmbedder extends ValueEmbedder<string> {\n\n    constructor(private rootElems: HTMLElement[]) {\n        super(rootElems?.[0], \"nonce\");\n    }\n\n    isAbsent(): boolean {\n        const value = this.value;\n        return 'undefined' == typeof value || '' == value;\n    }\n\n    get value(): string {\n        return (this?.rootElems?.[0] as HTMLElement)?.nonce ?? (this?.rootElems?.[0] as HTMLElement)?.getAttribute(\"nonce\")\n    }\n\n\n    set value(newVal: string) {\n        if (!this?.rootElems?.length) {\n            return;\n        }\n\n        this.rootElems.forEach((rootElem: HTMLElement) => {\n            if(\"undefined\" != typeof rootElem?.nonce) {\n                rootElem.nonce = newVal\n            } else {\n                rootElem.setAttribute(\"nonce\", newVal);\n            }\n        });\n\n    }\n}\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\n\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    get stream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    get lazyStream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return new Es2019Array(...this.values).every(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n\n    get asArray(): DomQuery[] {\n        // filter not supported by IE11\n        let items = new Es2019Array(...this.rootNode).filter(item => {\n            return item != null\n        }).map(item => {\n            return DomQuery.byId(item)\n        });\n        return items as DomQuery[];\n    }\n\n    get offsetWidth(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetHeight(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetLeft(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetTop(): number {\n        return new Es2019Array(this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as any).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get asNodeArray(): Array<Element> {\n        return new Es2019Array(...this.rootNode.filter(item => item != null));\n    }\n\n    get nonce(): ValueEmbedder<string> {\n        return new NonceValueEmbedder(this.rootNode as HTMLElement[]);\n    }\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/<!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(...\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(((item) => id == item.id) as any)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = new Es2019Array(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce((reduction: any, item: Element) => reduction.concat([item]), res);\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        return this.asArray\n            .some(item => this._mozMatchesSelector(item.getAsElem(0).value, selector));\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        new Es2019Array(...this.rootNode)\n            .forEach((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    case \"nonce\":\n                        // nonce will be handled below!\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n\n        //special nonce handling\n        sourceItem.nonce.isPresent(() => {\n            this.nonce.value = sourceItem.nonce.value;\n        });\n\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                new Es2019Array(...scriptsToProcess).forEach(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.asArray\n                .flatMap(item => [...item.values])\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) // preceding 2, following == 4)\n                .forEach(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n            const _toReplace = DomQuery.byId(toReplace);\n            const tagName = _toReplace.tagName.orElse(\"\").value;\n            let newElement = DomQuery.fromMarkup(`<${tagName.toLowerCase()} />`);\n            newElement = newElement.copyAttrs(_toReplace);\n            newElement.innerHTML = toReplace.innerHTML;\n            // css suffices a simple replace to get it eval-ed, no need\n            // for a full head replace\n            _toReplace.replace(newElement);\n        };\n\n        const cssElems: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        cssElems.asArray\n            .flatMap(item => [...item.values])\n            // sort to make sure the execution order is correct\n            // this is needed because we mix 2 queries together\n            // -3 is needed due to the compareDocumentPosition return value\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .forEach(item => execCss(item as HTMLElement));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n\n        let finalOptions: any = {\n            bubbles: true, cancelable: true\n        }\n        finalOptions = simpleShallowMerge(finalOptions, options);\n\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Object.keys(finalOptions).forEach(key => event[key] = finalOptions[key]);\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\");\n    }\n\n    innerText(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => {\n                return [text1, text2].join(joinString)\n            }, \"\");\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = {}): {[key: string]: any} {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = simpleShallowMerge(toMerge);\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                append(target, name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        assign(target, name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        append(target, name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res = this.asArray\n            .flatMap( item => {\n                return item.childNodes.asArray;\n            })\n            .filter(item => {\n                return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n            })\n            .reduce((reduced: Array<any>, item: DomQuery) => {\n                reduced.push((<any>item?.value?.value)?.data ?? \"\");\n                return reduced;\n            }, []);\n        /*let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;*/\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): DomQuery {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): DomQuery {\n        let domQueries = this.asArray;\n        const ret = new DomQuery(...domQueries.concat(toAttach.asArray));\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return new DomQuery(...ret.asArray.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }));\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(...objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n"],"names":["IgnoreAssign","constructor","parent","value","this","assign","target","accessPath","length","lastPathItem","buildPath","key","append","Array","isArray","push","keyVal","start","indexOf","substring","arrayIndex","end","parseInt","alloc","arr","defaultVal","toAdd","flattenAccessPath","Es2019Array","flatMap","path","split","map","filter","parentPtr","parKeyArrPos","currKey","arrPos","cnt","Error","nextArrPos","dataPresent","simpleShallowMerge","assocArrays","overwrite","withAppend","keys","Object","forEach","toAssign","oldVal","shallowMerge","Lang","ConfigEntry","ValueEmbedder","rootElem","super","_value","val","absent","fromNullable","Es2019Array_","another","_another","flatMapFun","_flatMap","flat","flatLevel","_flat","callbackfn","thisArg","_Es2019Array","prototype","call","concat","items","reverse","slice","splice","deleteCount","predicate","reduce","initialValue","flatDepth","_flatResolve","res","item","mapped","mapperFunction","data","ret","Proxy","get","p","receiver","isNaN","set","property","_global$","globalThis","window","g","trim","str","ws","i","replace","test","charAt","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","e","saveResolveLazy","strToArray","splitter","element","objToArray","obj","offset","pack","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","theArgs","TypeError","to","nextSource","nextKey","hasOwnProperty","Monad","fn","inVal","static","isAbsent","isPresent","presentRunnable","ifPresentLazy","orElse","elseValue","orElseLazy","func","getIf","preprocessKeys","currentPos","getClass","getIfPresent","match","toJson","JSON","stringify","resolve","resolver","valueKey","newVal","alternative","ITERATION_STATUS","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","prop","r","Symbol","toStringTag","ALLOWED_SUBMITTABLE_ELEMENTS","eqi","NonceValueEmbedder","rootElems","nonce","getAttribute","setAttribute","ElementAttribute","name","values","Style","style","DEFAULT_WHITELIST","DomQuery","rootNode","pos","_limits","foundElement","querySelectorAll","getAsElem","allElems","global","stream","lazyStream","id","tagName","nodeName","isTag","type","inputValue","nodeId","checked","every","el","newChecked","eachElem","elements","deepElements","querySelectorAllDeep","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","disabled","attr","removeAttribute","childNodes","childNodeArr","asArray","byId","offsetWidth","elem","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","asNodeArray","selector","document","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","code","globalEval","globalEvalSticky","markup","doc","implementation","createHTMLDocument","lowerMarkup","search","documentElement","innerHTML","startsWithTag","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","delete","node","parentNode","removeChild","closest","_closestDeep","_closest","includeRoot","subItems","reduction","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","first","newInnerHTML","dispatchEvent","evt","retArr","innerHtml","newInnerHtml","filterSelector","matched","_mozMatchesSelector","some","nodeSelector","selectorStage","len","firstElem","lastElem","each","toReplace","asElem","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","insertBefore","insertAfter","last","lastNode","reArr","head","getElementsByTagName","script","newScriptElement","appendChild","applyNonce","appendTo","loadScriptEval","src","delay","_loadScriptEval","loadScriptEvalSticky","toInsertParams","existingItem","existingElement","nextSibling","insertElem","allParents","firstParent","parentsWhileMatch","host","copyAttrs","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","fromMarkup","firstInsert","replaced","replaceChild","insertAdditionalItems","runScripts","runCss","focusElement","setCaretPosition","sticky","whitelisted","evalCollectedScripts","scriptsToProcess","joinedScripts","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","sort","node1","node2","compareDocumentPosition","console","error","message","description","_toReplace","newElement","execCss","click","fireEvent","addEventListener","listener","options","removeEventListener","eventName","finalOptions","bubbles","cancelable","ownerDocument","nodeType","EventClass","Event","MouseEvent","KeyboardEvent","event","synthetic","createEventObject","textContent","joinString","text1","text2","encodeFormElement","toMerge","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","from","cDATAAsString","reduced","subNodes","Math","min","limits","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","current","reset","attachShadow","params","mode","shadowElement","async","condition","childList","subtree","timeout","interval","root","Promise","success","observer","MUT_ERROR","findElement","MutationObserver","mutTimeout","setTimeout","disconnect","callback","mutationList","mut","clearTimeout","observableOpts","observe","setInterval","clearInterval","waitUntilDom","shadowElements","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","iterator","done","toAttach","filterDoubles","domQueries","idx","notFound","prependTo","prepend","foundNodes","selectors","cnt2","levelSelector","toMatch","prototypeOwner","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","srcNode","createSourceNode","nonceCheck","marker","Date","now","random","attrName","DomQueryCollector","collect","finalValue","DQ","DQ$"],"sourceRoot":""}