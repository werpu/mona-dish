{"version":3,"file":"DomQuery.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts"],"sourcesContent":["/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\n\n\n\n\n\nclass Es2019Array_<T>  extends Array<T>{\n\n    _another: T[];\n\n    constructor(...another: T[]) {\n        super(...another);\n        if((another as any)._another)  {\n            this._another = (another as any)._another;\n        } else {\n            this._another = another;\n        }\n\n        //for testing it definitely runs into this branch because we are on es5 level\n        //if (!(<any>Array.prototype).flatMap) {\n            this.flatMap = (flatMapFun) => this._flatMap(flatMapFun) as any;\n        //}\n        //if (!(<any>Array.prototype).flat) {\n            this.flat = (flatLevel: number = 1) => this._flat(flatLevel);\n        //}\n    }\n\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] {\n        const ret = Array.prototype.map.call(this._another, callbackfn, thisArg);\n        return new Es2019Array(... ret);\n    }\n\n    concat(...items): T[] {\n        const ret = Array.prototype.concat.call(this._another, ...items);\n        return new Es2019Array(... ret);\n    }\n\n    reverse(): T[] {\n        const ret = Array.prototype.reverse.call(this._another);\n        return new Es2019Array(... ret);\n    }\n\n    slice(start?: number, end?: number): T[] {\n        const ret = Array.prototype.slice.call(this._another, start, end);\n        return new Es2019Array(...ret);\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        const ret = Array.prototype.splice.call(this._another, start, deleteCount);\n        return new Es2019Array(...ret);\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        const ret = Array.prototype.filter.call(this._another, predicate, thisArg);\n        return new Es2019Array(...ret);\n    }\n\n\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n        const ret = Array.prototype.reduce.call(this._another, callbackfn, initialValue);\n        return ret;\n    }\n\n    /*reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T {\n        const ret = Array.prototype.reduceRight.call(callbackfn, initialValue);\n        return ret;\n    }*/\n\n    private _flat(flatDepth = 1) {\n        return this._flatResolve(this._another, flatDepth);\n    }\n\n    private _flatResolve(arr, flatDepth = 1) {\n        //recursion break\n        if (flatDepth == 0) {\n            return arr;\n        }\n        let res = [];\n\n        let reFlat = item => {\n            item = Array.isArray(item) ? item : [item];\n            let mapped = this._flatResolve(item, flatDepth - 1);\n            res = res.concat(mapped);\n        };\n        arr.forEach(reFlat)\n\n        return new Es2019Array(...res);\n    }\n\n    private _flatMap(mapperFunction: Function, noFallback: boolean = false): any {\n        let res = this.map(item => mapperFunction(item));\n        return this._flatResolve(res);\n    }\n}\n\n//let _Es2019Array = function<T>(...data: T[]) {};\n\n//let oldProto = Es2019Array.prototype;\n\nfunction _Es2019Array<T>(...data: T[]): Es2019Array_<T> {\n    let ret = new Es2019Array_<T>(...data);\n    let proxied = new Proxy<Es2019Array_<T>>(ret, {\n        get(target: Es2019Array_<unknown>, p: string | symbol, receiver: any): any {\n            if(\"symbol\" == typeof p) {\n\n                return target._another[p];\n            }\n            if(!isNaN(parseInt(p as string))) {\n                return target._another[p];\n            } else {\n                return target[p];\n            }\n        },\n\n        set(target, property, value): boolean {\n            target[property] = value;\n            target._another[property] = value;\n            return true;\n        }\n\n    });\n    return proxied;\n};\n\nexport var Es2019Array: any = _Es2019Array;","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return new Es2019Array(...pack.concat(Array.prototype.slice.call(obj, offset)));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        new Es2019Array(...other.getIf(key).value).forEach(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos =  Array.isArray(currAccessPos.value) ?\n                         Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !! (item?.[currKey] ?? false);\n                        })?.[currKey])  :\n                Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if(currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Config} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\n\nimport {ICollector, IStreamDataSource, ITERATION_STATUS} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport {_global$} from \"./Global\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport objToArray = Lang.objToArray;\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\ninterface IDomQuery {\n    /**\n     * reference to the systems global object\n     * (globalThis, window, global, depending on the environment)\n     */\n    readonly global: any;\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n\n    /**\n     * accumulated top element offsetWidth\n     */\n    readonly offsetWidth: number;\n    /**\n     * accumulated top element offsetHeight\n     */\n    readonly offsetHeight: number;\n    /**\n     * accumulated top element offsetLeft\n     */\n    readonly offsetLeft: number;\n    /**\n     * accumulated top element offsetTop\n     */\n    readonly offsetTop: number;\n\n\n    /**\n     * abbreviation for inputValue\\.value to make\n     * the code terser\n     */\n    val: string | boolean;\n\n    /**\n     * the underlying form elements as DomQuery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: any;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: any;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * inner html property\n     * setter and getter which works directly on strings\n     */\n    innerHTML: string;\n\n    /**\n     * same as innerHTML\n     * will be removed once\n     * my code is transitioned\n     * @deprecated do not use anymore, user innerHTML instead\n     */\n    innerHtml: string;\n\n    /**\n     * convenience for dq.id.value to make the code a little bit tighter\n     */\n    nodeId: string;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded ( highest level )\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n\n    /**\n     * closest, walks up the dom tree to fid the closest element to match\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchEvent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    lastElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * Runs an eval and keeps the evaluated code in the head\n     * This is a corner condition, where we want to update the head with custom\n     * code and leave the code in (instead of deleting ig)\n     *\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {DomQuery} DomQuery of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    append(elem: DomQuery): DomQuery;\n\n    /**\n     * replace convenience function replaces the domquery elements with the\n     * elements passed as parameter\n     * @param toReplace the replacement elements\n     * @return a reference on the replacement elements\n     */\n    replace(toReplace: DomQuery): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    prepend(elem: DomQuery): DomQuery;\n\n    /**\n     * prepend equivalent to appendTo\n     *\n     * @param elem the element to prepend to\n     */\n    prependTo(elem: DomQuery): DomQuery;\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param charSet\n     */\n    loadScriptEval(src: string, delay: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the DomQuery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery;\n\n    /**\n     * first parents with a matching selector\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery;\n\n    /**\n     * all parents until the selector match stops\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery;\n\n\n    /**\n     * the parent of the elements\n     */\n    parent(): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another DomQuery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the element must be left in the head after eval default === false\n     * @param whiteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky?: boolean, whiteListed?: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinString?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinString?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the sub-nodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    // observable: Observable<DomQuery>;\n\n    // observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    get stream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    get lazyStream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return new Es2019Array(...this.values).every(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n\n    get asArray(): DomQuery[] {\n        // filter not supported by IE11\n        let items = new Es2019Array(...this.rootNode).filter(item => {\n            return item != null\n        }).map(item => {\n            return DomQuery.byId(item)\n        });\n        return items as DomQuery[];\n    }\n\n    get offsetWidth(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetHeight(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetLeft(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetTop(): number {\n        return new Es2019Array(this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as any).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get asNodeArray(): Array<Element> {\n        return new Es2019Array(...this.rootNode.filter(item => item != null));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/<!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(...\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(((item) => id == item.id) as any)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = new Es2019Array(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce((reduction: any, item: Element) => reduction.concat([item]), res);\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        return this.asArray\n            .some(item => this._mozMatchesSelector(item.getAsElem(0).value, selector));\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        new Es2019Array(...this.rootNode)\n            .forEach((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                new Es2019Array(...scriptsToProcess).forEach(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.asArray\n                .flatMap(item => [...item.values])\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) // preceding 2, following == 4)\n                .forEach(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n            const _toReplace = DomQuery.byId(toReplace);\n            const tagName = _toReplace.tagName.orElse(\"\").value;\n            const head = DomQuery.byTagName(\"head\");\n\n            if (tagName && eqi(tagName, \"link\") && eqi(toReplace.getAttribute(\"rel\"), \"stylesheet\")) {\n                const rel = toReplace.getAttribute(\"rel\");\n                //if possible we are now replacing the existing elements where we reference this stylesheet\n                const matches = head.querySelectorAll(`link[rel='stylesheet'][href='${rel}']`);\n\n                if(matches.length) {\n                    matches.replace(_toReplace);\n                } else {\n                    head.append(_toReplace);\n                }\n            } else if (tagName && eqi(tagName, \"style\")) {\n                let innerText = _toReplace.innerHTML.replace(/\\s+/gi, \"\");\n                let styles = head.querySelectorAll(\"style\");\n                let filteredStyles = styles.asArray.filter(style => {\n                    return style.innerHTML.replace(/\\s+/gi, \"\") == innerText;\n                });\n                styles = new DomQuery(...filteredStyles);\n                if(!styles.length) { //already present\n                    head.append(_toReplace);\n                }\n            }\n        };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.asArray\n            .flatMap(item => [...item.values])\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .forEach(item => execCss(item as HTMLElement));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n\n\n        let finalOptions: any = new Config({\n            bubbles: true, cancelable: true\n        });\n        finalOptions.shallowMerge(new Config(options));\n        finalOptions = JSON.parse(finalOptions.toJson());\n\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Object.keys(finalOptions).forEach(key => event[key] = finalOptions[key]);\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\");\n    }\n\n    innerText(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => {\n                return [text1, text2].join(joinString)\n            }, \"\");\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        target.assign(name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res = this.asArray\n            .flatMap( item => {\n                return item.childNodes.asArray;\n            })\n            .filter(item => {\n                return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n            })\n            .reduce((reduced: Array<any>, item: DomQuery) => {\n                reduced.push((<any>item?.value?.value)?.data ?? \"\");\n                return reduced;\n            }, []);\n        /*let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;*/\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): DomQuery {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): DomQuery {\n        let domQueries = this.asArray;\n        const ret = new DomQuery(...domQueries.concat(toAttach.asArray));\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return new DomQuery(...ret.asArray.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }));\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(...objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n"],"names":["Es2019Array_","Array","constructor","another","super","_another","this","flatMap","flatMapFun","_flatMap","flat","flatLevel","_flat","map","callbackfn","thisArg","ret","prototype","call","Es2019Array","concat","items","reverse","slice","start","end","splice","deleteCount","filter","predicate","reduce","initialValue","flatDepth","_flatResolve","arr","res","forEach","item","isArray","mapped","mapperFunction","noFallback","data","Proxy","get","target","p","receiver","isNaN","parseInt","set","property","value","_global$","globalThis","window","g","Lang","trim","str","ws","i","replace","length","test","charAt","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","e","saveResolveLazy","strToArray","splitter","split","element","push","objToArray","obj","offset","pack","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","theArgs","TypeError","to","Object","assign","nextSource","keys","nextKey","hasOwnProperty","Monad","_value","fn","inVal","static","isAbsent","isPresent","presentRunnable","absent","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","fromNullable","getIf","key","preprocessKeys","currentPos","cnt","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","defaultVal","toJson","JSON","stringify","indexOf","substring","resolve","resolver","ValueEmbedder","rootElem","valueKey","newVal","alternative","ConfigEntry","Config","root","configDef","shallowCopy","shallowCopy$","shallowMerge","deepCopy","deepCopy$","other","overwrite","withAppend","append","accessPath","assertAccessPath","lastKey","pathExists","buildPath","finalKeyArrPos","Error","apply","appendIf","condition","assignIf","delete","setVal","currAccessPos","find","parentVal","parentPos","alloc","length1","length2","isArrayPos","tempVal","isNoArray","ITERATION_STATUS","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","prop","r","Symbol","toStringTag","ALLOWED_SUBMITTABLE_ELEMENTS","eqi","ElementAttribute","name","values","getAttribute","setAttribute","Style","style","DEFAULT_WHITELIST","DomQuery","rootNode","pos","_limits","foundElement","querySelectorAll","getAsElem","allElems","global","stream","lazyStream","id","tagName","nodeName","isTag","type","inputValue","nodeId","checked","every","el","newChecked","eachElem","elements","deepElements","querySelectorAllDeep","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","disabled","attr","removeAttribute","childNodes","childNodeArr","asArray","byId","offsetWidth","elem","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","asNodeArray","selector","document","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","code","nonce","globalEval","globalEvalSticky","markup","doc","implementation","createHTMLDocument","lowerMarkup","search","documentElement","innerHTML","startsWithTag","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","node","parentNode","removeChild","closest","_closestDeep","_closest","includeRoot","subItems","reduction","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","first","newInnerHTML","dispatchEvent","evt","retArr","innerHtml","newInnerHtml","filterSelector","matched","_mozMatchesSelector","some","nodeSelector","selectorStage","len","firstElem","lastElem","each","toReplace","asElem","parent","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","insertBefore","insertAfter","last","lastNode","reArr","head","getElementsByTagName","script","newScriptElement","appendChild","applyNonce","appendTo","loadScriptEval","src","delay","_loadScriptEval","loadScriptEvalSticky","toInsertParams","existingItem","existingElement","nextSibling","insertElem","allParents","firstParent","parentsWhileMatch","host","copyAttrs","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","fromMarkup","firstInsert","replaced","replaceChild","insertAdditionalItems","runScripts","runCss","focusElement","setCaretPosition","sticky","whitelisted","evalCollectedScripts","scriptsToProcess","joinedScripts","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","sort","node1","node2","compareDocumentPosition","console","error","message","description","_toReplace","rel","matches","styles","filteredStyles","execCss","click","fireEvent","addEventListener","listener","options","removeEventListener","eventName","finalOptions","bubbles","cancelable","parse","ownerDocument","nodeType","EventClass","Event","MouseEvent","KeyboardEvent","event","synthetic","createEventObject","textContent","joinString","text1","text2","encodeFormElement","toMerge","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","from","cDATAAsString","reduced","subNodes","Math","min","limits","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","current","reset","attachShadow","params","mode","shadowElement","waitUntilDom","childList","subtree","timeout","interval","Promise","success","observer","MUT_ERROR","findElement","MutationObserver","mutTimeout","setTimeout","disconnect","callback","mutationList","mut","clearTimeout","observableOpts","observe","setInterval","clearInterval","shadowElements","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","iterator","done","toAttach","filterDoubles","domQueries","idx","notFound","prependTo","prepend","foundNodes","selectors","cnt2","levelSelector","toMatch","prototypeOwner","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","srcNode","createSourceNode","nonceCheck","marker","Date","now","random","attrName","DomQueryCollector","collect","finalValue","DQ","DQ$"],"sourceRoot":""}