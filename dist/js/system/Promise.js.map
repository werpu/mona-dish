{"version":3,"file":"Promise.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts"],"sourcesContent":["/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\n\n\n\n\n\nclass Es2019Array_<T>  extends Array<T>{\n\n    _another: T[];\n\n    constructor(...another: T[]) {\n        super(...another);\n        if((another as any)._another)  {\n            this._another = (another as any)._another;\n        } else {\n            this._another = another;\n        }\n\n        //for testing it definitely runs into this branch because we are on es5 level\n        //if (!(<any>Array.prototype).flatMap) {\n            this.flatMap = (flatMapFun) => this._flatMap(flatMapFun) as any;\n        //}\n        //if (!(<any>Array.prototype).flat) {\n            this.flat = (flatLevel: number = 1) => this._flat(flatLevel);\n        //}\n    }\n\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] {\n        const ret = Array.prototype.map.call(this._another, callbackfn, thisArg);\n        return new (_Es2019Array as any) (... ret);\n    }\n\n    concat(...items): T[] {\n        const ret = Array.prototype.concat.call(this._another, ...items);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    reverse(): T[] {\n        const ret = Array.prototype.reverse.call(this._another);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    slice(start?: number, end?: number): T[] {\n        const ret = Array.prototype.slice.call(this._another, start, end);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        const ret = Array.prototype.splice.call(this._another, start, deleteCount);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        const ret = Array.prototype.filter.call(this._another, predicate, thisArg);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n        const ret = Array.prototype.reduce.call(this._another, callbackfn, initialValue);\n        return ret;\n    }\n\n    /*reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T {\n        const ret = Array.prototype.reduceRight.call(callbackfn, initialValue);\n        return ret;\n    }*/\n\n    private _flat(flatDepth = 1) {\n        return this._flatResolve(this._another, flatDepth);\n    }\n\n    private _flatResolve(arr, flatDepth = 1) {\n        //recursion break\n        if (flatDepth == 0) {\n            return arr;\n        }\n        let res = [];\n\n        let reFlat = item => {\n            item = Array.isArray(item) ? item : [item];\n            let mapped = this._flatResolve(item, flatDepth - 1);\n            res = res.concat(mapped);\n        };\n        arr.forEach(reFlat)\n\n        return new Es2019Array(...res);\n    }\n\n    private _flatMap(mapperFunction: Function): any {\n        let res = this.map(item => mapperFunction(item));\n        return this._flatResolve(res);\n    }\n}\n\n//let _Es2019Array = function<T>(...data: T[]) {};\n\n//let oldProto = Es2019Array.prototype;\n\nexport function _Es2019Array<T>(...data: T[]): Es2019Array_<T> {\n    let ret = new Es2019Array_<T>(...data);\n    let proxied = new Proxy<Es2019Array_<T>>(ret, {\n        get(target: Es2019Array_<unknown>, p: string | symbol, receiver: any): any {\n            if(\"symbol\" == typeof p) {\n\n                return target._another[p];\n            }\n            if(!isNaN(parseInt(p as string))) {\n                return target._another[p];\n            } else {\n                return target[p];\n            }\n        },\n\n        set(target, property, value): boolean {\n            target[property] = value;\n            target._another[property] = value;\n            return true;\n        }\n\n    });\n    return proxied;\n};\n\n/**\n * this is the switch between normal array and our shim\n * the shim is only provided in case the native browser\n * does not yet have flatMap support on arrays\n */\nexport var Es2019Array: any = (Array.prototype.flatMap) ? function<T>(...data: T[]): T[] {\n    return data;\n} : _Es2019Array;","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return new Es2019Array(...pack.concat(Array.prototype.slice.call(obj, offset)));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        new Es2019Array(...other.getIf(key).value).forEach(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos =  Array.isArray(currAccessPos.value) ?\n                         Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !! (item?.[currKey] ?? false);\n                        })?.[currKey])  :\n                Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if(currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let toAdd = [];\n            toAdd.length = length;\n            toAdd[length - 1] = {};\n            arr.push(...toAdd);\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/*\n * Promise wrappers for timeout and interval\n */\nexport function timeout(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setTimeout(() => apply(), timeout);\n    }, () => {\n        if (handler) {\n            clearTimeout(handler);\n            handler = null;\n        }\n    });\n}\n\nexport function interval(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setInterval(() => {\n            apply();\n        }, timeout);\n    }, () => {\n        if (handler) {\n            clearInterval(handler);\n            handler = null;\n        }\n    });\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //let func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n            if (fn.catch) {\n                let funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            let fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n"],"names":["Es2019Array_","Array","constructor","another","super","_another","this","flatMap","flatMapFun","_flatMap","flat","flatLevel","_flat","map","callbackfn","thisArg","_Es2019Array","prototype","call","concat","items","reverse","slice","start","end","splice","deleteCount","filter","predicate","reduce","initialValue","flatDepth","_flatResolve","arr","res","forEach","item","isArray","mapped","Es2019Array","mapperFunction","data","ret","Proxy","get","target","p","receiver","isNaN","parseInt","set","property","value","Lang","trim","str","ws","i","replace","length","test","charAt","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","e","saveResolveLazy","strToArray","splitter","split","element","push","objToArray","obj","offset","pack","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","theArgs","TypeError","to","Object","assign","nextSource","keys","nextKey","hasOwnProperty","Monad","_value","fn","inVal","static","isAbsent","isPresent","presentRunnable","absent","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","fromNullable","getIf","key","preprocessKeys","currentPos","cnt","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","defaultVal","toJson","JSON","stringify","indexOf","substring","resolve","resolver","ValueEmbedder","rootElem","valueKey","newVal","alternative","ConfigEntry","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","prop","r","Symbol","toStringTag","PromiseStatus","timeout","handler","CancellablePromise","apply","reject","setTimeout","clearTimeout","interval","setInterval","clearInterval","Promise","executor","status","PENDING","allFuncs","promises","myapply","promiseCnt","myPromise","__last__","finally","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","cancellator","cancel"],"sourceRoot":""}