{"version":3,"file":"Promise.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\nexport class Es2019Array<T> extends Array<T> {\n    constructor(...another: T[]) {\n        super(...another);\n        //for testing it definitely runs into this branch because we are on es5 level\n        if(!(<any>Array.prototype).flatMap) {\n            let flatmapFun = (<any>Es2019Array).prototype.flatMap_;\n            //unfortunately in es5 the flatMap function is lost due to inheritance of a primitive\n            //es  class, we have to remap it back in\n            this.flatMap = flatmapFun;\n        }\n    }\n\n    flatMap_(mapperFunction: Function, noFallback: boolean = false): Es2019Array<T> {\n\n        let res = [];\n\n        let remap = item => {\n            let opRes = mapperFunction(item);\n            if(Array.isArray(opRes)) {\n                if(opRes.length == 1) {\n                    res.push(opRes[1])\n                    return;\n                }\n                if(opRes.length > 1) {\n                    opRes.forEach(newItem => remap(newItem))\n                }\n            } else {\n                res.push(item);\n            }\n        };\n        this.forEach( item => remap(item) )\n\n        return new Es2019Array(...res);\n    }\n\n\n    concat(...items): T[] {\n        return new Es2019Array(...super.concat(...items));\n    }\n\n    reverse(): T[] {\n        return new Es2019Array(...super.reverse());\n    }\n\n    slice(start?: number, end?: number): T[] {\n        return new Es2019Array(...super.slice(start, end));\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        return new Es2019Array(...super.splice(start, deleteCount));\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        return new Es2019Array(...super.filter(predicate, thisArg)  as any);\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        new Es2019Array(...other.getIf(key).value).forEach(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos =  Array.isArray(currAccessPos.value) ?\n                         Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !! (item?.[currKey] ?? false);\n                        })?.[currKey])  :\n                Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if(currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/*\n * Promise wrappers for timeout and interval\n */\nexport function timeout(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setTimeout(() => apply(), timeout);\n    }, () => {\n        if (handler) {\n            clearTimeout(handler);\n            handler = null;\n        }\n    });\n}\n\nexport function interval(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setInterval(() => {\n            apply();\n        }, timeout);\n    }, () => {\n        if (handler) {\n            clearInterval(handler);\n            handler = null;\n        }\n    });\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //let func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n            if (fn.catch) {\n                let funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            let fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(376);\n"],"names":["another","Array","prototype","flatMap","flatmapFun","Es2019Array","flatMap_","mapperFunction","noFallback","res","remap","item","opRes","isArray","length","push","forEach","newItem","this","concat","items","reverse","slice","start","end","splice","deleteCount","filter","predicate","thisArg","Lang","trim","str","ws","i","replace","test","charAt","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","fromNullable","e","absent","saveResolveLazy","strToArray","splitter","ret","split","element","objToArray","obj","offset","pack","call","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","target","TypeError","to","Object","assign","theArgs","nextSource","keys","nextKey","hasOwnProperty","value","_value","map","fn","inVal","Monad","mapped","isAbsent","isPresent","presentRunnable","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","key","preprocessKeys","currentPos","cnt","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","get","defaultVal","toJson","JSON","stringify","indexOf","parseInt","substring","resolve","resolver","rootElem","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","CONFIG_VALUE","CONFIG_ANY","root","configDef","shallowCopy$","Config","shallowMerge","deepCopy$","other","overwrite","withAppend","append","noKeys","accessPath","assertAccessPath","lastKey","pathExists","buildPath","finalKeyArrPos","Error","apply","appendIf","condition","assignIf","delete","setVal","ERR_ACCESS_PATH","currAccessPos","find","parentVal","parentPos","alloc","arr","length1","length2","isArrayPos","tempVal","isNoArray","PromiseStatus","timeout","handler","CancellablePromise","reject","setTimeout","clearTimeout","setInterval","clearInterval","executor","status","PENDING","allFuncs","data","all","myapply","promiseCnt","myPromise","Promise","promises","__last__","finally","race","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","cancellator","cancel","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}