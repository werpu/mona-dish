{"version":3,"file":"index_core.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/AssocArray.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Config.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * various helpers to deal with associative\n * arrays. If someone feels uncomfortable using\n * The config system, this is similar!\n */\nimport {IValueHolder, Optional} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * A nop as assign functionality (aka ignore assign)\n */\nconst IGNORE_ASSIGN: IValueHolder<any> = new (class {\n    set value(value: any | Array<any>) {\n    }\n})();\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assign<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let assigner: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            lastPathItem.target[lastPathItem.key] = value;\n        }\n    })();\n    return assigner;\n}\n\n\nexport function append<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let appender: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            if(!Array.isArray(value)) {\n                value = [value];\n            }\n            if(!lastPathItem.target[lastPathItem.key]) {\n                lastPathItem.target[lastPathItem.key] = value\n            } else {\n                if(!Array.isArray(lastPathItem.target[lastPathItem.key])) {\n                    lastPathItem.target[lastPathItem.key] = [lastPathItem.target[lastPathItem.key]];\n                }\n                lastPathItem.target[lastPathItem.key].push(...value);\n            }\n        }\n    })();\n    return appender;\n}\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assignIf<T>(condition: boolean, target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    return assign(target, ...accessPath);\n}\n\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function appendIf<T>(condition: boolean, target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    return append(target, ...accessPath);\n}\n\nexport function resolve<T>(target, ...accessPath: string[]): T | null {\n    let ret = null;\n    accessPath = flattenAccessPath(accessPath);\n    let currPtr = target;\n    for(let cnt = 0; cnt < accessPath.length; cnt++) {\n        let accessKeyIndex: number | string = accessPath[cnt];\n        accessKeyIndex = arrayIndex(accessKeyIndex) != -1 ? arrayIndex(accessKeyIndex) : accessKeyIndex;\n        currPtr = currPtr?.[accessKeyIndex];\n        if('undefined' == typeof currPtr) {\n            return null;\n        }\n        ret = currPtr;\n    }\n    return currPtr;\n}\n\n\nfunction keyVal(key: string): string {\n    let start = key.indexOf(\"[\");\n\n    if (start >= 0) {\n        return key.substring(0, start);\n    } else {\n        return key;\n    }\n}\n\nfunction arrayIndex(key: string): number {\n    let start = key.indexOf(\"[\");\n    let end = key.indexOf(\"]\");\n    if (start >= 0 && end > 0 && start < end) {\n        return parseInt(key.substring(start + 1, end));\n    } else {\n        return -1;\n    }\n}\n\nfunction isArrayPos(currKey: string, arrPos: number): boolean {\n    return currKey === \"\" && arrPos >= 0;\n}\n\nfunction isNoArray(arrPos: number): boolean {\n    return arrPos == -1;\n}\n\nfunction alloc(arr: Array<any>, length: number, defaultVal = {}) {\n    let toAdd = [];\n    toAdd.length = length;\n    toAdd[length - 1] = defaultVal;\n    arr.push(...toAdd);\n}\n\n\nfunction flattenAccessPath(accessPath: string[]) {\n    return accessPath.flatMap(path => path.split(\"[\"))\n        .map(path => path.indexOf(\"]\") != -1 ? \"[\" + path : path)\n        .filter(path => path != \"\");\n}\n\n/**\n * builds up a path, only done if no data is present!\n * @param target\n * @param accessPath\n * @returns the last assignable entry\n */\nexport function buildPath(target, ...accessPath: string[]) {\n    accessPath = flattenAccessPath(accessPath);\n    //we now have a pattern of having the array accessors always in separate items\n    let parentPtr = target;\n    let parKeyArrPos = null;\n    let currKey = null;\n    let arrPos = -1;\n\n    for (let cnt = 0; cnt < accessPath.length; cnt++) {\n        currKey = keyVal(accessPath[cnt]);\n        arrPos = arrayIndex(accessPath[cnt]);\n        //it now is either key or arrPos\n        if (arrPos != -1) {\n            //case root(array)[5] -> root must be array and allocate 5 elements\n            //case root.item[5] root.item must be array and of 5 elements\n            if(!Array.isArray(parentPtr)) {\n                throw Error(\"Associative array referenced as index array in path reference\");\n            }\n\n            //we need to look ahead for proper allocation\n            //not end reached\n            let nextArrPos = -1;\n            if(cnt < accessPath.length - 1) {\n                nextArrPos = arrayIndex(accessPath[cnt + 1])\n            }\n            let dataPresent = 'undefined' != typeof parentPtr?.[arrPos];\n            //no data present check here is needed, because alloc only reserves if not present\n            alloc(parentPtr, arrPos + 1, nextArrPos != -1 ?[]: {});\n            parKeyArrPos = arrPos;\n            //we now go to the reserved element\n            if(cnt == accessPath.length - 1) {\n                parentPtr[arrPos] = (dataPresent) ? parentPtr[arrPos] : null;\n            } else {\n                parentPtr = parentPtr[arrPos];\n            }\n        } else {\n            if(Array.isArray(parentPtr)) {\n                throw Error(\"Index array referenced as associative array in path reference\");\n            }\n            //again look ahead whether the next value is an array or assoc array\n            let nextArrPos = -1;\n            if(cnt < accessPath.length - 1) {\n                nextArrPos = arrayIndex(accessPath[cnt + 1])\n            }\n            parKeyArrPos = currKey;\n            let dataPresent = 'undefined' != typeof parentPtr?.[currKey];\n            if(cnt == accessPath.length - 1) {\n                if(!dataPresent) {\n                    parentPtr[currKey] = null;\n                }\n            } else {\n                if(!dataPresent) {\n                    parentPtr[currKey] = nextArrPos == -1 ? {} : [];\n                }\n                parentPtr = parentPtr[currKey];\n            }\n        }\n    }\n\n    return {target: parentPtr, key: parKeyArrPos};\n\n}\n\nexport function deepCopy(fromAssoc: {[key: string]: any}): {[key: string]: any} {\n    return JSON.parse(JSON.stringify(fromAssoc));\n}\n\n/**\n * simple left to right merge\n *\n * @param assocArrays\n */\nexport function simpleShallowMerge(...assocArrays) {\n   return shallowMerge(true, false, ...assocArrays);\n}\n\n/**\n * Shallow merge as in config\n *\n * @param overwrite\n * @param withAppend\n * @param assocArrays\n */\nexport function shallowMerge(overwrite = true, withAppend = false, ...assocArrays) {\n    let target: {[key: string]: any} = {};\n    assocArrays.map(arr => {\n        return {arr, keys: Object.keys(arr)};\n    }).forEach(({arr, keys}) => {\n        keys.forEach(key => {\n            if(overwrite || !target?.[key]) {\n                if(!withAppend) {\n                    target[key] = arr[key];\n                } else {\n                    if (Array.isArray(arr[key])) {\n                        if('undefined' == typeof target?.[key]) {\n                            target[key] = new Es2019Array(...arr[key])\n                        } else if(!Array.isArray(target[key])) {\n                            let oldVal = target[key];\n                            target[key] = new Es2019Array(...[]);\n                            target[key].push(oldVal);\n                            target[key].push(...arr[key]);\n                        } else {\n                            target[key].push(...arr[key]);\n                        }\n                        //new Es2019Array(...arr[key]).forEach(item => this.append(key).value = item);\n                    } else {\n                        if('undefined' == typeof target?.[key]) {\n                            target[key] = arr[key];\n                        } else if(!Array.isArray(target[key])) {\n                            let oldVal = target[key];\n                            target[key] = new Es2019Array(...[]);\n                            target[key].push(oldVal);\n                            target[key].push(arr[key]);\n                        } else {\n                            target[key].push(arr[key]);\n                        }\n                    }\n                }\n            }\n        })\n    });\n    return target;\n}\n\n","import {Es2019Array} from \"./Es2019Array\";\nimport {IValueHolder, Optional, ValueEmbedder} from \"./Monad\";\nimport {Lang} from \"./Lang\";\nimport objAssign = Lang.objAssign;\nimport {append, appendIf, assign, assignIf, resolve, shallowMerge} from \"./AssocArray\";\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\nexport type ConfigDef = { [key: string]: any };\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        this._value = shallowMerge(overwrite, withAppend, this.value, other.value)\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        return append(this._value, ...accessPath);\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        return appendIf(condition, this._value, ...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        return assign(this.value, ...accessPath);\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return assignIf(condition, this._value, ...accessPath);\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(resolve(this.value, ...accessPath));\n    }\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n     * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if (!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if (this.isArray(arrPos)) {\n                if (currKey != \"\") {\n                    currAccessPos = Array.isArray(currAccessPos.value) ?\n                        Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !!(item?.[currKey] ?? false);\n                        })?.[currKey]) :\n                    Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if (!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if (currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\n\nimport {ICollector, IStreamDataSource, ITERATION_STATUS} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport {_global$} from \"./Global\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport objToArray = Lang.objToArray;\nimport {append, assign, simpleShallowMerge} from \"./AssocArray\";\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\ninterface IDomQuery {\n    /**\n     * reference to the systems global object\n     * (globalThis, window, global, depending on the environment)\n     */\n    readonly global: any;\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n\n    /**\n     * accumulated top element offsetWidth\n     */\n    readonly offsetWidth: number;\n    /**\n     * accumulated top element offsetHeight\n     */\n    readonly offsetHeight: number;\n    /**\n     * accumulated top element offsetLeft\n     */\n    readonly offsetLeft: number;\n    /**\n     * accumulated top element offsetTop\n     */\n    readonly offsetTop: number;\n\n\n    /**\n     * abbreviation for inputValue\\.value to make\n     * the code terser\n     */\n    val: string | boolean;\n\n    /**\n     * the underlying form elements as DomQuery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: any;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: any;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * inner html property\n     * setter and getter which works directly on strings\n     */\n    innerHTML: string;\n\n    /**\n     * same as innerHTML\n     * will be removed once\n     * my code is transitioned\n     * @deprecated do not use anymore, user innerHTML instead\n     */\n    innerHtml: string;\n\n    /**\n     * convenience for dq.id.value to make the code a little tighter\n     */\n    nodeId: string;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded ( highest level )\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n\n    /**\n     * closest, walks up the dom tree to fid the closest element to match\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchEvent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    lastElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * Runs an eval and keeps the evaluated code in the head\n     * This is a corner condition, where we want to update the head with custom\n     * code and leave the code in (instead of deleting ig)\n     *\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {DomQuery} DomQuery of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    append(elem: DomQuery): DomQuery;\n\n    /**\n     * replace convenience function replaces the domquery elements with the\n     * elements passed as parameter\n     * @param toReplace the replacement elements\n     * @return a reference on the replacement elements\n     */\n    replace(toReplace: DomQuery): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    prepend(elem: DomQuery): DomQuery;\n\n    /**\n     * prepend equivalent to appendTo\n     *\n     * @param elem the element to prepend to\n     */\n    prependTo(elem: DomQuery): DomQuery;\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param charSet\n     */\n    loadScriptEval(src: string, delay: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the DomQuery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery;\n\n    /**\n     * first parents with a matching selector\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery;\n\n    /**\n     * all parents until the selector match stops\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery;\n\n\n    /**\n     * the parent of the elements\n     */\n    parent(): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another DomQuery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the element must be left in the head after eval default === false\n     * @param whiteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky?: boolean, whiteListed?: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinString?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinString?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): {[key: string]: any};\n\n    /**\n     * fetches the sub-nodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    // observable: Observable<DomQuery>;\n\n    // observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    get stream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    get lazyStream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return new Es2019Array(...this.values).every(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n\n    get asArray(): DomQuery[] {\n        // filter not supported by IE11\n        let items = new Es2019Array(...this.rootNode).filter(item => {\n            return item != null\n        }).map(item => {\n            return DomQuery.byId(item)\n        });\n        return items as DomQuery[];\n    }\n\n    get offsetWidth(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetHeight(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetLeft(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetTop(): number {\n        return new Es2019Array(this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as any).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get asNodeArray(): Array<Element> {\n        return new Es2019Array(...this.rootNode.filter(item => item != null));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/<!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(...\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(((item) => id == item.id) as any)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = new Es2019Array(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce((reduction: any, item: Element) => reduction.concat([item]), res);\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        return this.asArray\n            .some(item => this._mozMatchesSelector(item.getAsElem(0).value, selector));\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        new Es2019Array(...this.rootNode)\n            .forEach((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                new Es2019Array(...scriptsToProcess).forEach(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.asArray\n                .flatMap(item => [...item.values])\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) // preceding 2, following == 4)\n                .forEach(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n            const _toReplace = DomQuery.byId(toReplace);\n            const tagName = _toReplace.tagName.orElse(\"\").value;\n            const head = DomQuery.byTagName(\"head\");\n\n            if (tagName && eqi(tagName, \"link\") && eqi(toReplace.getAttribute(\"rel\"), \"stylesheet\")) {\n                const rel = toReplace.getAttribute(\"rel\");\n                //if possible we are now replacing the existing elements where we reference this stylesheet\n                const matches = head.querySelectorAll(`link[rel='stylesheet'][href='${rel}']`);\n\n                if(matches.length) {\n                    matches.replace(_toReplace);\n                } else {\n                    head.append(_toReplace);\n                }\n            } else if (tagName && eqi(tagName, \"style\")) {\n                let innerText = _toReplace.innerHTML.replace(/\\s+/gi, \"\");\n                let styles = head.querySelectorAll(\"style\");\n                let filteredStyles = styles.asArray.filter(style => {\n                    return style.innerHTML.replace(/\\s+/gi, \"\") == innerText;\n                });\n                styles = new DomQuery(...filteredStyles);\n                if(!styles.length) { //already present\n                    head.append(_toReplace);\n                }\n            }\n        };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.asArray\n            .flatMap(item => [...item.values])\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .forEach(item => execCss(item as HTMLElement));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n\n        let finalOptions: any = {\n            bubbles: true, cancelable: true\n        }\n        finalOptions = simpleShallowMerge(finalOptions, options);\n\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Object.keys(finalOptions).forEach(key => event[key] = finalOptions[key]);\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\");\n    }\n\n    innerText(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => {\n                return [text1, text2].join(joinString)\n            }, \"\");\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = {}): {[key: string]: any} {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = simpleShallowMerge(toMerge);\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                append(target, name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        assign(target, name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        append(target, name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res = this.asArray\n            .flatMap( item => {\n                return item.childNodes.asArray;\n            })\n            .filter(item => {\n                return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n            })\n            .reduce((reduced: Array<any>, item: DomQuery) => {\n                reduced.push((<any>item?.value?.value)?.data ?? \"\");\n                return reduced;\n            }, []);\n        /*let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;*/\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): DomQuery {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): DomQuery {\n        let domQueries = this.asArray;\n        const ret = new DomQuery(...domQueries.concat(toAttach.asArray));\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return new DomQuery(...ret.asArray.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }));\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(...objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\n\n\n\n\n\nclass Es2019Array_<T>  extends Array<T>{\n\n    _another: T[];\n\n    constructor(...another: T[]) {\n        super(...another);\n        if((another as any)._another)  {\n            this._another = (another as any)._another;\n        } else {\n            this._another = another;\n        }\n\n        //for testing it definitely runs into this branch because we are on es5 level\n        //if (!(<any>Array.prototype).flatMap) {\n            this.flatMap = (flatMapFun) => this._flatMap(flatMapFun) as any;\n        //}\n        //if (!(<any>Array.prototype).flat) {\n            this.flat = (flatLevel: number = 1) => this._flat(flatLevel);\n        //}\n    }\n\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] {\n        const ret = Array.prototype.map.call(this._another, callbackfn, thisArg);\n        return new (_Es2019Array as any) (... ret);\n    }\n\n    concat(...items): T[] {\n        const ret = Array.prototype.concat.call(this._another, ...items);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    reverse(): T[] {\n        const ret = Array.prototype.reverse.call(this._another);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    slice(start?: number, end?: number): T[] {\n        const ret = Array.prototype.slice.call(this._another, start, end);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        const ret = Array.prototype.splice.call(this._another, start, deleteCount);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        const ret = Array.prototype.filter.call(this._another, predicate, thisArg);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n        const ret = Array.prototype.reduce.call(this._another, callbackfn, initialValue);\n        return ret;\n    }\n\n    /*reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T {\n        const ret = Array.prototype.reduceRight.call(callbackfn, initialValue);\n        return ret;\n    }*/\n\n    private _flat(flatDepth = 1) {\n        return this._flatResolve(this._another, flatDepth);\n    }\n\n    private _flatResolve(arr, flatDepth = 1) {\n        //recursion break\n        if (flatDepth == 0) {\n            return arr;\n        }\n        let res = [];\n\n        let reFlat = item => {\n            item = Array.isArray(item) ? item : [item];\n            let mapped = this._flatResolve(item, flatDepth - 1);\n            res = res.concat(mapped);\n        };\n        arr.forEach(reFlat)\n\n        return new Es2019Array(...res);\n    }\n\n    private _flatMap(mapperFunction: Function): any {\n        let res = this.map(item => mapperFunction(item));\n        return this._flatResolve(res);\n    }\n}\n\n//let _Es2019Array = function<T>(...data: T[]) {};\n\n//let oldProto = Es2019Array.prototype;\n\nexport function _Es2019Array<T>(...data: T[]): Es2019Array_<T> {\n    let ret = new Es2019Array_<T>(...data);\n    let proxied = new Proxy<Es2019Array_<T>>(ret, {\n        get(target: Es2019Array_<unknown>, p: string | symbol, receiver: any): any {\n            if(\"symbol\" == typeof p) {\n\n                return target._another[p];\n            }\n            if(!isNaN(parseInt(p as string))) {\n                return target._another[p];\n            } else {\n                return target[p];\n            }\n        },\n\n        set(target, property, value): boolean {\n            target[property] = value;\n            target._another[property] = value;\n            return true;\n        }\n\n    });\n    return proxied;\n};\n\n/**\n * this is the switch between normal array and our shim\n * the shim is only provided in case the native browser\n * does not yet have flatMap support on arrays\n */\nexport var Es2019Array: any = (Array.prototype.flatMap) ? function<T>(...data: T[]): T[] {\n    return data;\n} : _Es2019Array;","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return new Es2019Array(...pack.concat(Array.prototype.slice.call(obj, offset)));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport {Config} from \"./Config\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\nimport {_global$} from \"./Global\";\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new (_global$()).DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (_global$())?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["IGNORE_ASSIGN","value","assign","target","accessPath","length","lastPathItem","buildPath","key","append","Array","isArray","push","assignIf","condition","appendIf","resolve","ret","flattenAccessPath","currPtr","cnt","accessKeyIndex","arrayIndex","keyVal","start","indexOf","substring","end","parseInt","alloc","arr","defaultVal","toAdd","flatMap","path","split","map","filter","parentPtr","parKeyArrPos","currKey","arrPos","Error","nextArrPos","dataPresent","deepCopy","fromAssoc","JSON","parse","stringify","simpleShallowMerge","assocArrays","shallowMerge","overwrite","withAppend","keys","Object","forEach","Es2019Array","oldVal","objAssign","Lang","ConfigEntry","ValueEmbedder","constructor","rootElem","super","this","_value","val","absent","fromNullable","CONFIG_VALUE","CONFIG_ANY","Config","Optional","root","configDef","shallowCopy","shallowCopy$","deepCopy$","static","other","getIf","assertAccessPath","getClass","get","delete","toJson","setVal","preprocessKeys","currAccessPos","find","item","isPresent","isNoArray","ALLOWED_SUBMITTABLE_ELEMENTS","trim","isString","eqi","objToArray","ElementAttribute","element","name","orElse","values","getAttribute","setAttribute","valueKey","Style","style","DEFAULT_WHITELIST","DomQuery","rootNode","pos","_limits","isAbsent","foundElement","querySelectorAll","getAsElem","allElems","global","stream","lazyStream","id","tagName","nodeName","isTag","toLowerCase","type","inputValue","nodeId","checked","every","el","newChecked","eachElem","elements","deepElements","querySelectorAllDeep","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","disabled","attr","removeAttribute","childNodes","childNodeArr","concat","asArray","byId","offsetWidth","elem","reduce","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","asNodeArray","selector","document","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","code","nonce","globalEval","globalEvalSticky","markup","doc","implementation","createHTMLDocument","lowerMarkup","search","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","node","parentNode","removeChild","closest","_closestDeep","_closest","includeRoot","res","subItems","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","first","newInnerHTML","dispatchEvent","evt","retArr","innerHtml","newInnerHtml","filterSelector","matched","_mozMatchesSelector","some","nodeSelector","selectorStage","func","len","firstElem","lastElem","each","replace","toReplace","asElem","parent","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","insertBefore","insertAfter","last","lastNode","reArr","head","getElementsByTagName","script","newScriptElement","appendChild","applyNonce","appendTo","orElseLazy","loadScriptEval","src","delay","_loadScriptEval","loadScriptEvalSticky","toInsertParams","existingItem","existingElement","nextSibling","insertElem","elseValue","allParents","firstParent","parentsWhileMatch","host","copyAttrs","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","fromMarkup","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","sticky","whitelisted","evalCollectedScripts","scriptsToProcess","joinedScripts","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","sort","node1","node2","compareDocumentPosition","e","console","error","message","description","_toReplace","rel","matches","styles","filteredStyles","execCss","click","fireEvent","addEventListener","listener","options","removeEventListener","eventName","finalOptions","bubbles","cancelable","ownerDocument","nodeType","EventClass","Event","MouseEvent","KeyboardEvent","event","synthetic","createEventObject","textContent","joinString","text1","text2","encodeFormElement","toMerge","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","from","cDATAAsString","reduced","data","subNodes","to","Math","min","limits","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","current","reset","attachShadow","params","mode","shadowElement","waitUntilDom","childList","subtree","timeout","interval","Promise","success","observer","MUT_ERROR","findElement","MutationObserver","mutTimeout","setTimeout","disconnect","callback","mutationList","mut","clearTimeout","observableOpts","observe","setInterval","clearInterval","shadowElements","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","domQueries","idx","notFound","prependTo","prepend","foundNodes","selectors","cnt2","levelSelector","toMatch","prototypeOwner","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","i","srcNode","createSourceNode","nonceCheck","marker","Date","now","random","attrName","DomQueryCollector","collect","finalValue","DQ","DQ$","Es2019Array_","another","_another","flatMapFun","_flatMap","flat","flatLevel","_flat","callbackfn","thisArg","_Es2019Array","prototype","items","reverse","splice","deleteCount","predicate","initialValue","flatDepth","_flatResolve","mapperFunction","Proxy","p","receiver","isNaN","set","property","_global$","globalThis","window","g","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","equalsIgnoreCase","source","destination","finalDest","assertType","probe","theType","isFunc","Function","theArgs","TypeError","nextSource","nextKey","hasOwnProperty","Monad","fn","inVal","currentPos","getIfPresent","match","resolver","newVal","alternative","ITERATION_STATUS","XMLQuery","docType","parseXML","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","createIe11DomQueryShim","isXMLParserError","toString","serialized","XMLSerializer","serializeToString","parserErrorText","joinstr","txt","parseType","XQ","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","prop","r","toStringTag"],"sourceRoot":""}