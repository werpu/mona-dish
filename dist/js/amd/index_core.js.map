{"version":3,"file":"index_core.js","mappings":"iaA4BA,MAAMA,EACFC,YAAoBC,GAAA,KAAAA,OAAAA,CAAc,CAE9BC,UAAMA,GACV,CACIA,YACA,OAAOC,KAAKF,MAChB,EASG,SAASG,EAAUC,KAAiCC,GACvD,GAAIA,EAAWC,OAAS,EACpB,OAAO,IAAIR,EAAaM,GAE5B,MAAMG,EAAeC,EAAUJ,KAAWC,GAU1C,OATgC,IAAI,MAC5BJ,UAAMA,GACNM,EAAaH,OAAOG,EAAaE,KAAOR,CAC5C,CAEIA,YACA,OAAOM,EAAaH,OAAOG,EAAaE,IAC5C,EAGR,CAGO,SAASC,EAAUN,KAAiCC,GACvD,GAAIA,EAAWC,OAAS,EACpB,OAAO,IAAIR,EAAaM,GAE5B,MAAMG,EAAeC,EAAUJ,KAAWC,GAgB1C,OAfgC,IAAI,MAC5BJ,UAAMA,GACFU,MAAMC,QAAQX,KACdA,EAAQ,CAACA,IAETM,EAAaH,OAAOG,EAAaE,MAG7BE,MAAMC,QAAQL,EAAaH,OAAOG,EAAaE,QAC/CF,EAAaH,OAAOG,EAAaE,KAAO,CAACF,EAAaH,OAAOG,EAAaE,OAE9EF,EAAaH,OAAOG,EAAaE,KAAKI,QAAQZ,IAL9CM,EAAaH,OAAOG,EAAaE,KAAOR,CAOhD,EAGR,CAQO,SAASa,EAAYC,EAAoBX,KAAiCC,GAC7E,OAAMU,GAAcV,EAAWC,OAAS,EAC7B,IAAIR,EAAaM,GAErBD,EAAOC,KAAWC,EAC7B,CASO,SAASW,EAAYD,EAAoBX,KAAiCC,GAC7E,OAAMU,GAAcV,EAAWC,OAAS,EAC7B,IAAIR,EAAaM,GAErBM,EAAON,KAAWC,EAC7B,CAEO,SAASY,EAAWb,KAAWC,GAClC,IAAIa,EAAM,KACVb,EAAac,EAAkBd,GAC/B,IAAIe,EAAUhB,EACd,IAAI,IAAIiB,EAAM,EAAGA,EAAMhB,EAAWC,OAAQe,IAAO,CAC7C,IAAIC,EAAkCjB,EAAWgB,GAGjD,GAFAC,GAAgD,GAA/BC,EAAWD,GAAwBC,EAAWD,GAAkBA,EACjFF,EAAUA,aAAO,EAAPA,EAAUE,QACjB,IAAsBF,EACrB,OAAO,KAEXF,EAAME,C,CAEV,OAAOA,CACX,CAGA,SAASI,EAAOf,GACZ,IAAIgB,EAAQhB,EAAIiB,QAAQ,KAExB,OAAID,GAAS,EACFhB,EAAIkB,UAAU,EAAGF,GAEjBhB,CAEf,CAEA,SAASc,EAAWd,GAChB,IAAIgB,EAAQhB,EAAIiB,QAAQ,KACpBE,EAAMnB,EAAIiB,QAAQ,KACtB,OAAID,GAAS,GAAKG,EAAM,GAAKH,EAAQG,EAC1BC,SAASpB,EAAIkB,UAAUF,EAAQ,EAAGG,KAEjC,CAEhB,CAUA,SAASE,EAAMC,EAAiBzB,EAAgB0B,EAAa,CAAC,GAC1D,IAAIC,EAAQ,GACZA,EAAM3B,OAASA,EACf2B,EAAM3B,EAAS,GAAK0B,EACpBD,EAAIlB,QAAQoB,EAChB,CAGA,SAASd,EAAkBd,GACvB,OAAO,IAAI,EAAA6B,eAAe7B,GAAY8B,SAAQC,GAAQA,EAAKC,MAAM,OAC5DC,KAAIF,IAA8B,GAAtBA,EAAKV,QAAQ,KAAa,IAAMU,EAAOA,IACnDG,QAAOH,GAAgB,IAARA,GACxB,CAQO,SAAS5B,EAAUJ,KAAWC,GACjCA,EAAac,EAAkBd,GAE/B,IAAImC,EAAYpC,EACZqC,EAAe,KACfC,EAAU,KACVC,GAAU,EAEd,IAAK,IAAItB,EAAM,EAAGA,EAAMhB,EAAWC,OAAQe,IAIvC,GAHAqB,EAAUlB,EAAOnB,EAAWgB,IAC5BsB,EAASpB,EAAWlB,EAAWgB,KAEhB,GAAXsB,EAAc,CAGd,IAAIhC,MAAMC,QAAQ4B,GACd,MAAMI,MAAM,iEAKhB,IAAIC,GAAc,EACfxB,EAAMhB,EAAWC,OAAS,IACzBuC,EAAatB,EAAWlB,EAAWgB,EAAM,KAE7C,IAAIyB,OAAc,KAAsBN,aAAS,EAATA,EAAYG,IAEpDb,EAAMU,EAAWG,EAAS,GAAkB,GAAfE,EAAkB,GAAI,CAAC,GACpDJ,EAAeE,EAEZtB,GAAOhB,EAAWC,OAAS,EAC1BkC,EAAUG,GAAU,EAAgBH,EAAUG,GAAU,KAExDH,EAAYA,EAAUG,E,KAEvB,CACH,GAAGhC,MAAMC,QAAQ4B,GACb,MAAMI,MAAM,iEAGhB,IAAIC,GAAc,EACfxB,EAAMhB,EAAWC,OAAS,IACzBuC,EAAatB,EAAWlB,EAAWgB,EAAM,KAE7CoB,EAAeC,EACf,IAAII,OAAc,KAAsBN,aAAS,EAATA,EAAYE,IACjDrB,GAAOhB,EAAWC,OAAS,EACtBwC,IACAN,EAAUE,GAAW,OAGrBI,IACAN,EAAUE,IAA0B,GAAfG,EAAmB,CAAC,EAAI,IAEjDL,EAAYA,EAAUE,G,CAKlC,MAAO,CAACtC,OAAQoC,EAAW/B,IAAKgC,EAEpC,CAEO,SAASM,EAASC,GACrB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,GACrC,CAOO,SAASI,KAAsBC,GACnC,OAAOC,GAAa,GAAM,KAAUD,EACvC,CAkEO,SAASC,EAAaC,GAAY,EAAMC,GAAa,KAAUH,GAClE,IAAIjD,EAA+B,CAAC,EAmBpC,OAlBA,IAAI,EAAA8B,eAAemB,GAAaf,KAAIP,IACzB,CAACA,MAAK0B,KAAMC,OAAOD,KAAK1B,OAChC4B,SAAQ,EAAE5B,MAAK0B,WACdA,EAAKE,SAAQlD,IACT,IAAImD,EAAW7B,EAAItB,IACfE,MAAMC,QAAQgD,IAAaJ,IAC3BI,EAAW,IAAI,EAAA1B,eAAe,CAAC0B,KAEhCL,KAAcnD,aAAM,EAANA,EAASK,IA1EtC,SAA8B+C,EAAqBpD,EAA8BK,EAAKsB,EAAK6B,GACvF,GAAKJ,EAKD,QAAI,KAAsBpD,aAAM,EAANA,EAASK,IAC/BL,EAAOK,GAAOmD,OACX,GAAKjD,MAAMC,QAAQR,EAAOK,IAc1B,CACH,IAAIoD,EAASzD,EAAOK,GAChBqD,EAAU,GAEdF,EAASD,SAAQI,KACgB,GAAzBF,EAAOnC,QAAQqC,IACfD,EAAQjD,KAAKkD,E,IAIrB3D,EAAOK,GAAKI,QAAQiD,E,KAxBgB,CAEpC,IAAID,EAASzD,EAAOK,GAChBqD,EAAU,GAGdF,EAASD,SAAQI,IACTF,GAAUE,GACVD,EAAQjD,KAAKkD,E,IAGrB3D,EAAOK,GAAO,IAAI,EAAAyB,eAAe,IACjC9B,EAAOK,GAAKI,KAAKgD,GACjBzD,EAAOK,GAAKI,QAAQiD,E,MAnBxB1D,EAAOK,GAAOsB,EAAItB,EAiC1B,CAwCgBuD,CAAqBR,EAAYpD,EAAQK,EAAKsB,EAAK6B,IAC5CL,IAAanD,aAAM,EAANA,EAASK,KAvC7C,SAAiC+C,EAAqBpD,EAA8BK,EAAKsB,EAAK6B,GAC1F,GAAKJ,EAKD,QAAI,KAAsBpD,aAAM,EAANA,EAASK,IAC/BL,EAAOK,GAAOmD,OACX,GAAKjD,MAAMC,QAAQR,EAAOK,IAM7BL,EAAOK,GAAKI,QAAQ+C,OANgB,CACpC,IAAIC,EAASzD,EAAOK,GACpBL,EAAOK,GAAO,IAAI,EAAAyB,eAAe,IACjC9B,EAAOK,GAAKI,KAAKgD,GACjBzD,EAAOK,GAAKI,QAAQ+C,E,CAKhC,CAuBgBK,CAAwBT,EAAYpD,EAAQK,EAAKsB,EAAK6B,E,GAK5D,IAECxD,CACX,CAIO,SAAS8D,EAAUC,EAAMC,GAC5B,GAAGD,GAAQC,EACP,OAAO,EAEX,UAAUD,UAAeC,EACrB,OAAO,EAEX,GAAGzD,MAAMC,QAAQuD,IAASxD,MAAMC,QAAQwD,GAAO,CAC3C,GAAGD,EAAK7D,QAAU8D,EAAK9D,OACnB,OAIJ,OAAO6D,EAAKE,OAAM,CAACN,EAAM1C,IAAQ6C,EAAUH,EAAMK,EAAK/C,K,CAG1D,GAAG,iBAAmB8C,GAAQ,iBAAmBC,EAAM,CACnD,IAAIE,EAAQZ,OAAOD,KAAKU,GACpBI,EAAQb,OAAOD,KAAKW,GACxB,OAAGE,EAAMhE,QAAUiE,EAAMjE,SAGlBgE,EAAMD,OAAM5D,IAA8B,GAAvB8D,EAAM7C,QAAQjB,MACxC6D,EAAMD,OAAM5D,GAAOyD,EAAUC,EAAK1D,GAAM2D,EAAK3D,M,CAEjD,OAAO,CAEX,C,+IC9WO+D,EAAY,EAAAC,KAAA,UAOnB,MAAMC,UAAuB,EAAAC,cAUzB5E,YAAY6E,EAAenE,EAAUkC,GACjCkC,MAAMD,EAAUnE,GAEhBP,KAAKyC,OAASA,QAAAA,GAAW,CAC7B,CAEI1C,YACA,MAAgB,IAAZC,KAAKO,KAAaP,KAAKyC,QAAU,EAC1BzC,KAAK4E,OAAO5E,KAAKyC,QACjBzC,KAAKO,KAAOP,KAAKyC,QAAU,EAC3BzC,KAAK4E,OAAO5E,KAAKO,KAAKP,KAAKyC,QAE/BzC,KAAK4E,OAAO5E,KAAKO,IAC5B,CAEIR,UAAM8E,GACU,IAAZ7E,KAAKO,KAAaP,KAAKyC,QAAU,EACjCzC,KAAK4E,OAAO5E,KAAKyC,QAAUoC,EAEpB7E,KAAKO,KAAOP,KAAKyC,QAAU,EAClCzC,KAAK4E,OAAO5E,KAAKO,KAAKP,KAAKyC,QAAUoC,EAGzC7E,KAAK4E,OAAO5E,KAAKO,KAAOsE,CAC5B,EA/BO,EAAAC,OAASN,EAAYO,aAAa,MAkCtC,MAAMC,EAAe,gBACfC,EAAa,gBASnB,MAAMC,UAAe,EAAAC,SACxBtF,YAAYuF,EAAmBC,GAC3BV,MAAMS,GADqB,KAAAC,UAAAA,CAE/B,CAMIC,kBACA,OAAOtF,KAAKuF,cAChB,CAEUA,eACN,IAAIvE,EAAM,IAAIkE,EAAO,CAAC,GAEtB,OADAlE,EAAIoC,aAAapD,KAAKD,OACfiB,CACX,CAKI6B,eACA,OAAO7C,KAAKwF,WAChB,CAEUA,YACN,OAAO,IAAIN,EAAOZ,EAAU,CAAC,EAAGtE,KAAKD,OACzC,CAMA0F,oBAAuB1F,GACnB,OAAO,IAAImF,EAAOnF,EACtB,CAKAqD,aAAasC,EAAerC,GAAY,EAAMC,GAAa,GAEvD,IAAIqC,GAAU,IAAAvC,cAAaC,EAAWC,EAAYtD,KAAKD,MAAO2F,EAAM3F,OAChEU,MAAMC,QAAQV,KAAK4E,SACnB5E,KAAK4E,OAAOxE,OAAS,EACrBJ,KAAK4E,OAAOjE,QAASgF,KAErBnC,OAAOoC,oBAAoB5F,KAAK4E,QAAQnB,SAAQlD,UAAcP,KAAK4E,OAAOrE,KAC1EiD,OAAOoC,oBAAoBD,GAASlC,SAAQlD,GAAOP,KAAK4E,OAAOrE,GAAOoF,EAAQpF,KAEtF,CAcAC,UAAUL,GACN,OAAO,IAAAK,QAAOR,KAAK4E,UAAWzE,EAClC,CAQAW,SAASD,KAAuBV,GAC5B,OAAO,IAAAW,UAASD,EAAWb,KAAK4E,UAAWzE,EAC/C,CAMAF,UAAUE,GACN,OAAO,IAAAF,QAAOD,KAAKD,SAAUI,EACjC,CASAS,SAASC,KAAuBV,GAC5B,OAAO,IAAAS,UAASC,EAAWb,KAAK4E,UAAWzE,EAC/C,CAOA0F,SAAS1F,GAEL,OADAH,KAAK8F,oBAAoB3F,GAClBH,KAAK+F,WAAWhB,cAAa,IAAAhE,SAAQf,KAAKD,SAAUI,GAC/D,CAOA6F,IAAIlE,GACA,OAAO9B,KAAK+F,WAAWhB,aAAaJ,MAAMqB,IAAIlE,GAAY/B,MAC9D,CAGAkG,OAAO1F,GAIH,OAHIA,KAAOP,KAAKD,cACLC,KAAKD,MAAMQ,GAEfP,IACX,CAKAkG,SACI,OAAOnD,KAAKE,UAAUjD,KAAKD,MAC/B,CAGUgG,WACN,OAAOb,CACX,CAEQiB,OAAOtB,GACX7E,KAAK4E,OAASC,CAClB,CAQQiB,oBAAoB3F,G,sBAExB,GADAA,EAAaH,KAAKoG,kBAAkBjG,IAC/BH,KAAKqF,UAEN,OAIJ,IAAIgB,EAAqB,EAAAlB,SAAA,aAAsB3B,OAAOD,KAAKvD,KAAKqF,WAAWjD,KAAI7B,IAC3E,IAAIS,EAAM,CAAC,EAEX,OADAA,EAAIT,GAAOP,KAAKqF,UAAU9E,GACnBS,CAAG,KAGd,IAAK,IAAIG,EAAM,EAAGA,EAAMhB,EAAWC,OAAQe,IAAO,CAC9C,IAAIqB,EAAUxC,KAAKsB,OAAOnB,EAAWgB,IACjCsB,EAAczC,KAAKqB,WAAWlB,EAAWgB,IAyB7C,GApBQkF,EAFJrG,KAAKU,QAAQ+B,GACE,IAAXD,EACgB/B,MAAMC,QAAQ2F,EAActG,OACxC,EAAAoF,SAAA,aAGiB,QAHK,EAGhB,QAHgB,MAAI,EAAAnD,eAAeqE,EAActG,OAClDuG,MAAKzC,I,MACF,QAAyB,QAAf,EAAAA,aAAI,EAAJA,EAAOrB,UAAQ,UAAU,WACrC,eAAGA,UAAQ,eAAGC,IACpB,EAAA0C,SAAA,aAA8D,QAAxC,EAA8B,QAA9B,EAAmB,QAAnB,EAAAkB,EAActG,aAAK,eAAGyC,UAAQ,eAAGC,UAAO,QAAI,MAGrDhC,MAAMC,QAAQ2F,EAActG,OACzC,EAAAoF,SAAA,aAAyC,QAAnB,EAAAkB,EAActG,aAAK,eAAG0C,IAAW,EAAA0C,SAAA,OAK9C1E,MAAMC,QAAQ2F,EAActG,OAAU,EAAAoF,SAAA,aAG7C,QAHmE,MAAI,EAAAnD,eAAeqE,EAActG,OACrGuG,MAAKzC,I,MACF,QAAyB,QAAf,EAAAA,aAAI,EAAJA,EAAOrB,UAAQ,UAAU,WACrC,eAAGA,IACT,EAAA2C,SAAA,aAAoD,QAA9B,EAAmB,QAAnB,EAAAkB,EAActG,aAAK,eAAGyC,UAAQ,QAAI,OAE3D6D,EAAcE,YACf,MAAM7D,MAnCU,iCAqCpB,GAAI2D,EAActG,OAASkF,EACvB,M,CAGZ,CAEQuB,UAAU/D,GACd,OAAkB,GAAXA,CACX,CAEQ/B,QAAQ+B,GACZ,OAAQzC,KAAKwG,UAAU/D,EAC3B,E,+LC9KCgE,E,sDA9DEC,EAAO,EAAAnC,KAAA,KAEPoC,EAAW,EAAApC,KAAA,SACXqC,EAAM,EAAArC,KAAA,iBACNsC,EAAa,EAAAtC,KAAA,WAkBpB,MAAMuC,UAA2B,EAAArC,cAE7B5E,YAAoBkH,GAChBpC,MAAMoC,aAAS,EAATA,EAAY,GAAI,SADN,KAAAA,UAAAA,CAEpB,CAEAC,WACI,MAAMjH,EAAQC,KAAKD,MACnB,YAAO,IAAsBA,GAAS,IAAMA,CAChD,CAEIA,Y,cACA,OAAmD,QAA3C,EAAoC,QAArC,EAAgB,QAAf,EAAAC,gBAAI,EAAJA,KAAM+G,iBAAS,eAAG,UAAkB,eAAEE,aAAK,QAAyC,QAApC,EAAe,QAAf,EAAAjH,gBAAI,EAAJA,KAAM+G,iBAAS,eAAG,UAAkB,eAAEG,aAAa,QAC/G,CAGInH,UAAMoH,G,OACc,QAAf,EAAAnH,gBAAI,EAAJA,KAAM+G,iBAAS,eAAE3G,SAItBJ,KAAK+G,UAAUtD,SAASiB,SACjB,KAAsBA,aAAQ,EAARA,EAAUuC,OAC/BvC,EAASuC,MAAQE,EAEjBzC,EAAS0C,aAAa,QAASD,E,GAI3C,GAWJ,SAAKV,GACD,kBACA,kBACA,kBACA,gBACA,gBACA,gBACA,qBAEH,CATD,CAAKA,IAAAA,EAA4B,KAmG1B,MAAMY,UAAyB,EAAA5C,cAElC5E,YAAoByH,EAA2BC,EAAsBzF,EAAqB,MACtF6C,MAAM2C,EAASC,GADC,KAAAD,QAAAA,EAA2B,KAAAC,KAAAA,EAAsB,KAAAzF,WAAAA,CAErE,CAEI/B,YACA,IAAI8E,EAAiB7E,KAAKsH,QAAQtB,IAAI,GAAGwB,SAAcC,OACvD,OAAK5C,EAAIzE,OAGFyE,EAAI,GAAGqC,aAAalH,KAAKuH,MAFrBvH,KAAK8B,UAGpB,CAEI/B,UAAMA,GACN,IAAI8E,EAAiB7E,KAAKsH,QAAQtB,IAAI,GAAGwB,SAAcC,OACvD,IAAK,IAAItG,EAAM,EAAGA,EAAM0D,EAAIzE,OAAQe,IAChC0D,EAAI1D,GAAKiG,aAAapH,KAAKuH,KAAMxH,GAErC8E,EAAI,GAAGuC,aAAapH,KAAKuH,KAAMxH,EACnC,CAEUgG,WACN,OAAOsB,CACX,CAEA5B,oBAAyC1F,EAAa2H,EAAmB,SACrE,OAAY,IAAIL,EAAiBtH,EAAO2H,EAC5C,EAIG,MAAMC,UAAc,EAAAlD,cAEvB5E,YAAoByH,EAA2BC,EAAsBzF,EAAqB,MACtF6C,MAAM2C,EAASC,GADC,KAAAD,QAAAA,EAA2B,KAAAC,KAAAA,EAAsB,KAAAzF,WAAAA,CAErE,CAEI/B,YACA,IAAI8E,EAAiB7E,KAAKsH,QAAQG,OAClC,OAAK5C,EAAIzE,OAGDyE,EAAI,GAAmB+C,MAAM5H,KAAKuH,MAF/BvH,KAAK8B,UAGpB,CAEI/B,UAAMA,GACN,IAAI8E,EAAqB7E,KAAKsH,QAAQG,OACtC,IAAK,IAAItG,EAAM,EAAGA,EAAM0D,EAAIzE,OAAQe,IAChC0D,EAAI1D,GAAKyG,MAAM5H,KAAKuH,MAAQxH,CAEpC,CAEUgG,WACN,OAAOsB,CACX,CAEA5B,oBAAyC1F,EAAa2H,EAAmB,SACrE,OAAY,IAAIL,EAAiBtH,EAAO2H,EAC5C,EAQJ,MAAMG,EAAoB,KACf,EAwBX,MAAaC,EAaTjI,eAAekI,GAEX,GANI,KAAAA,SAA2B,GAEnC,KAAAC,KAAO,EAq9CP,KAAAC,SAAW,GAj9CH,EAAA9C,SAAA,aAAsB4C,GAAUf,YAAee,EAAS3H,OAKxD,IAAK,IAAIe,EAAM,EAAGA,EAAM4G,EAAS3H,OAAQe,IACrC,GAAK4G,EAAS5G,GAGP,GAAIwF,EAASoB,EAAS5G,IAAO,CAChC,IAAI+G,EAAeJ,EAASK,iBAAyBJ,EAAS5G,IACzD+G,EAAalB,YACde,EAASpH,QAAQuH,EAAaT,O,MAE3BM,EAAS5G,aAAgB2G,EAChC9H,KAAK+H,SAASpH,QAAcoH,EAAS5G,GAAMsG,QAE3CzH,KAAK+H,SAASpH,KAAUoH,EAAS5G,SAIjD,CAMIpB,YACA,OAAOC,KAAKoI,UAAU,EAC1B,CAEIX,aACA,OAAOzH,KAAKqI,UAChB,CAEIC,aACA,OAAO,GACX,CAEIC,aACA,MAAM7F,MAAM,sDAChB,CAEI8F,iBACA,MAAM9F,MAAM,sDAChB,CAKI+F,SACA,OAAO,IAAIpB,EAAiBrH,KAAKgG,IAAI,GAAI,KAC7C,CAKI5F,aACA,OAAOJ,KAAK+H,SAAS3H,MACzB,CAKIsI,cACA,OAAyB1I,KAAKoI,UAAU,GAAGvC,MAAM,UACrD,CAKI8C,eACA,OAAyB3I,KAAKoI,UAAU,GAAGvC,MAAM,WACrD,CAEA+C,MAAMF,GACF,OAAQ1I,KAAKgH,aACLhH,KAAK2I,SAASnB,OAAO,aAChBzH,MAAM8I,eAAiBH,EAAQG,eACjC7I,KAAK0I,QAAQlB,OAAO,aAClBzH,MAAM8I,eAAiBH,EAAQG,cAEhD,CAQIC,WACA,OAAO9I,KAAKoI,UAAU,GAAGvC,MAAM,OACnC,CAQI0B,WACA,OAAO,IAAI,EAAA9C,cAAczE,KAAKoI,UAAU,GAAGrI,MAAO,OACtD,CAQIgJ,iBACA,OAAI/I,KAAKoI,UAAU,GAAGvC,MAAM,SAASU,YAC1B,IAAI,EAAA9B,cAAsBzE,KAAKoI,UAAU,GAAGrI,OAEvC,EAAA0E,cAAA,MAEpB,CAEII,UACA,OAAO7E,KAAK+I,WAAWhJ,KAC3B,CAEI8E,QAAI9E,GACJC,KAAK+I,WAAWhJ,MAAQA,CAC5B,CAEIiJ,aACA,OAAOhJ,KAAKyI,GAAG1I,KACnB,CAEIiJ,WAAOjJ,GACPC,KAAKyI,GAAG1I,MAAQA,CACpB,CAEIkJ,cACA,OAAO,IAAI,EAAAjH,eAAehC,KAAKyH,QAAQtD,OAAM+E,KAAcA,EAAID,SACnE,CAEIA,YAAQE,GACRnJ,KAAKoJ,UAASF,GAAYA,EAAID,QAAUE,GAC5C,CAEIE,eAEA,OAAOrJ,KAAKmI,iBAAiB,8CACjC,CAEImB,mBAEA,OAAOtJ,KAAKuJ,qBADE,8CAElB,CAOAA,qBAAqBC,GACjB,IAAIC,EAAyB,GACzBC,EAAW1J,KAAKmI,iBAAiBqB,GACjCE,EAAStJ,QACTqJ,EAAM9I,KAAK+I,GAEf,IAAIC,EAAc3J,KAAKmI,iBAAiB,KAAKyB,WAC7C,GAAID,EAAYvJ,OAAQ,CACpB,IAAIyJ,EAAYF,EAAYJ,qBAAqBC,GAC7CK,EAAUzJ,QACVqJ,EAAM9I,KAAKkJ,E,CAGnB,OAAO,IAAI/B,KAAY2B,EAC3B,CAMIK,eACA,OAAO9J,KAAK+J,KAAK,YAAYxD,WACjC,CAEIuD,aAASA,GAEJA,EAGD9J,KAAK+J,KAAK,YAAYhK,MAAQ,WAF9BC,KAAKgK,gBAAgB,WAK7B,CAEAA,gBAAgBzC,GACZvH,KAAKoJ,UAASvF,GAAQA,EAAKmG,gBAAgBzC,IAC/C,CAEI0C,iBACA,IAAIC,EAA+B,GAInC,OAHAlK,KAAKoJ,UAAUvF,IACXqG,EAAeA,EAAaC,OAAOtD,EAAWhD,EAAKoG,YAAY,IAE5D,IAAInC,KAAYoC,EAC3B,CAGIE,cAOA,OALY,IAAI,EAAApI,eAAehC,KAAK+H,UAAU1F,QAAOwB,GAClC,MAARA,IACRzB,KAAIyB,GACIiE,EAASuC,KAAKxG,IAG7B,CAEIyG,kBACA,OAAO,IAAI,EAAAtI,eAAehC,KAAK+H,UAC1B1F,QAAOwB,GAAgB,MAARA,IACfzB,KAAImI,GAASA,EAAqBD,cAClCE,QAAO,CAACC,EAAYC,IAAaD,EAAaC,GAAU,EACjE,CAEIC,mBACA,OAAO,IAAI,EAAA3I,eAAehC,KAAK+H,UAC1B1F,QAAOwB,GAAgB,MAARA,IACfzB,KAAImI,GAASA,EAAqBI,eAClCH,QAAO,CAACC,EAAYC,IAAaD,EAAaC,GAAU,EACjE,CAEIE,iBACA,OAAO,IAAI,EAAA5I,eAAehC,KAAK+H,UAC1B1F,QAAOwB,GAAgB,MAARA,IACfzB,KAAImI,GAASA,EAAqBK,aAClCJ,QAAO,CAACC,EAAYC,IAAaD,EAAaC,GAAU,EACjE,CAEIG,gBACA,OAAO,IAAI,EAAA7I,YAAYhC,KAAK+H,UACvB1F,QAAOwB,GAAgB,MAARA,IACfzB,KAAImI,GAASA,EAAaM,YAC1BL,QAAO,CAACC,EAAYC,IAAaD,EAAaC,GAAU,EACjE,CAEII,kBACA,OAAO,IAAI,EAAA9I,eAAehC,KAAK+H,SAAS1F,QAAOwB,GAAgB,MAARA,IAC3D,CAEIoD,YACA,OAAO,IAAIH,EAAmB9G,KAAK+H,SACvC,CAEAtC,4BAA4BsF,GACxB,OAAO,IAAIjD,EAASkD,UAAUzB,qBAAqBwB,EACvD,CAQAtF,wBAAwBsF,GACpB,OAAqC,GAAjCA,EAASvJ,QAAQ,YACV,IAAIsG,EAASkD,UAAUC,sBAAsBF,GAE7C,IAAIjD,EAASkD,UAAUE,kBAAkBH,EAExD,CASAtF,YAAYsF,EAAuCI,GAAO,GACtD,OAAIxE,EAASoE,GACAI,EAAwD,IAAIrD,EAASkD,UAAUI,SAAiBL,GAAxF,IAAIjD,EAASkD,UAAUX,KAAaU,GAE9C,IAAIjD,EAAciD,EAEjC,CAQAtF,iBAAiBsF,GACb,OAAIpE,EAASoE,GACF,IAAIjD,EAASkD,UAAUK,UAAkBN,GAEzC,IAAIjD,EAAciD,EAEjC,CAEAtF,kBAAkB6F,EAAcrE,GAC5B,OAAO,IAAIa,EAASkD,UAAUO,WAAWD,EAAMrE,EACnD,CAEAxB,wBAAwB6F,EAAcrE,GAClC,OAAO,IAAIa,EAASkD,UAAUQ,iBAAiBF,EAAMrE,EACzD,CAOAxB,kBAAkBgG,GAGd,MAAMC,EAAMV,SAASW,eAAeC,mBAAmB,IAEvD,IAAIC,GADJJ,EAAS/E,EAAK+E,IACW5C,cACzB,IAAkD,GAA9CgD,EAAYC,OAAO,yBACuB,GAA1CD,EAAYC,OAAO,qBACuB,GAA1CD,EAAYC,OAAO,qBACuB,GAA1CD,EAAYC,OAAO,mBAEnB,OADAJ,EAAIK,gBAAgBC,UAAYP,EACzB,IAAI3D,EAAS4D,EAAIK,iBACrB,CACH,IAAIE,EAAgB,SAAUC,EAAaxD,GACvC,IAAIyD,EAAO,CAAC,IAAKzD,EAAS,KAAK0D,KAAK,IAChCC,EAAO,CAAC,IAAK3D,EAAS,KAAK0D,KAAK,IACpC,OAA6B,GAArBF,EAAI1K,QAAQ2K,IAAqC,GAArBD,EAAI1K,QAAQ6K,EACpD,EAEIC,EAAmB,IAAIxE,EAASkD,SAASuB,cAAc,QAG3D,OAAIN,EAAcJ,EAAa,UAAYI,EAAcJ,EAAa,UAClES,EAAiBE,KAAK,UAAUf,aACzBa,EAAiBnE,iBAAiB,SAASnC,IAAI,GAAGiE,WAAWwC,UAC7DR,EAAcJ,EAAa,UAClCS,EAAiBE,KAAK,sCAAsCf,aACrDa,EAAiBnE,iBAAiB,SAASnC,IAAI,GAAGiE,WAAWwC,UAC7DR,EAAcJ,EAAa,OAClCS,EAAiBE,KAAK,iBAAiBf,qBAChCa,EAAiBnE,iBAAiB,SAASnC,IAAI,GAAGiE,WAAWwC,UAC7DR,EAAcJ,EAAa,OAClCS,EAAiBE,KAAK,qBAAqBf,0BACpCa,EAAiBnE,iBAAiB,MAAMnC,IAAI,GAAGiE,WAAWwC,WAGrEH,EAAiBE,KAAKf,GACfa,EAAiBrC,WAAWwC,S,CAG3C,CAUAzG,IAAI0G,GACA,OAAQA,EAAQ1M,KAAK+H,SAAS3H,OAAU,IAAI0H,EAAS9H,KAAK+H,SAAS2E,IAAU5E,EAAShD,MAC1F,CAQAsD,UAAUsE,EAAeC,EAA0B,EAAAxH,SAAA,QAC/C,OAAQuH,EAAQ1M,KAAK+H,SAAS3H,OAAU,EAAA+E,SAAA,aAAsBnF,KAAK+H,SAAS2E,IAAUC,CAC1F,CAMAC,cAAcF,G,MACV,OAAQA,EAAQ1M,KAAK+H,SAAS3H,SAAqC,QAA3B,EAAMJ,KAAK+H,SAAS2E,UAAO,eAAEG,OAAc7M,KAAK+H,SAAS2E,GAAQG,MAAa,EAC1H,CAKAxE,WACI,OAAOrI,KAAK+H,QAChB,CAKAf,WACI,OAAsB,GAAfhH,KAAKI,MAChB,CAOAmG,UAAUuG,GACN,IAAIhI,EAAS9E,KAAKgH,WAIlB,OAHKlC,GAAUgI,GACXA,EAAgBC,KAAK/M,KAAMA,OAEvB8E,CACZ,CAUAkI,cAAcF,EAA8C,WAC5D,GAEI,OADA9M,KAAKuG,UAAUwG,KAAK/M,KAAM8M,GACnB9M,IACX,CAKAiG,SACIjG,KAAKoJ,UAAU6D,IACPA,EAAKC,YACLD,EAAKC,WAAWC,YAAYF,E,GAGxC,CAEA9E,iBAAiB4C,GAEb,OAAqC,GAAjCA,EAASvJ,QAAQ,YACVxB,KAAKiL,sBAAsBF,GAE3B/K,KAAKkL,kBAAkBH,EAEtC,CAEAqC,QAAQrC,GAEJ,OAAqC,GAAjCA,EAASvJ,QAAQ,YACVxB,KAAKqN,aAAatC,GAElB/K,KAAKsN,SAASvC,EAE7B,CAQAV,KAAK5B,EAAY8E,GACb,IAAIC,EAAuB,GAa3B,OAZID,IACAC,EAAMA,EAAIrD,UACN,IAAI,EAAAnI,gBAAgBhC,gBAAI,EAAJA,KAAM+H,WAAY,IACjC1F,QAASwB,GAAS4E,GAAM5E,EAAK4E,KAC7BrG,KAAIyB,GAAQ,IAAIiE,EAASjE,OAOtC2J,EAAMA,EAAIrD,OAAOnK,KAAKmI,iBAAiB,QAAQM,QACxC,IAAIX,KAAY0F,EAC3B,CAGApC,SAAS3C,EAAY8E,GACjB,IAAIC,EAAuB,GACvBD,IACAC,EAAMA,EAAIrD,OACN,IAAI,EAAAnI,gBAAgBhC,gBAAI,EAAJA,KAAM+H,WAAY,IACjC1F,QAAOwB,GAAQ4E,GAAM5E,EAAK4E,KAC1BrG,KAAIyB,GAAQ,IAAIiE,EAASjE,OAItC,IAAI4J,EAAWzN,KAAKuJ,qBAAqB,QAAQd,OAKjD,OAJIgF,EAASrN,QACToN,EAAI7M,KAAK8M,GAGN,IAAI3F,KAAY0F,EAC3B,CAQAnC,UAAU3C,EAAiB6E,EAAwBpC,G,MAC/C,IAAIqC,EAAiC,GAQrC,OAPID,IACAC,EAAM,IAAI,EAAAxL,eAA8B,QAAd,EAAAhC,gBAAI,EAAJA,KAAM+H,gBAAQ,QAAI,IACvC1F,QAAOiF,IAAWA,aAAO,EAAPA,EAASoB,UAAWA,IACtC8B,QAAO,CAACkD,EAAgB7J,IAAkB6J,EAAUvD,OAAO,CAACtG,KAAQ2J,IAG7E,EAASA,EAAI7M,KAAKX,KAAKuJ,qBAAqBb,IAAY8E,EAAI7M,KAAKX,KAAKmI,iBAAiBO,IAChF,IAAIZ,KAAY0F,EAC3B,CAQAzD,KAAKA,EAAc4D,EAAuB,MACtC,OAAO,IAAItG,EAAiBrH,KAAM+J,EAAM4D,EAC5C,CAEA/F,MAAMgG,EAAqBD,EAAuB,MAC9C,OAAO,IAAIhG,EAAM3H,KAAM4N,EAAaD,EACxC,CAQAE,SAASC,GACL,IAAIC,GAAQ,EAOZ,OANA/N,KAAKoJ,UAAS6D,IAEV,GADAc,EAAQd,EAAKe,UAAUC,SAASH,GAC5BC,EACA,OAAO,C,IAGRA,CACX,CAOAG,SAASJ,GAEL,OADA9N,KAAKoJ,UAASvF,GAAQA,EAAKmK,UAAUG,IAAIL,KAClC9N,IACX,CAOAoO,YAAYN,GAER,OADA9N,KAAKoJ,UAASvF,GAAQA,EAAKmK,UAAUK,OAAOP,KACrC9N,IACX,CAMAsO,qBAAqBnD,GAAO,GACxB,MAAMoD,EAAa,qBACnB,OAAOvO,KAAKwO,gBAAgBD,KACrBpD,EACCnL,KAAKuJ,qBAAqBgF,GADnBvO,KAAKmI,iBAAiBoG,IACUE,QAAQlI,WAC3D,CAWAiG,KAAKkC,GACD,OAAI,EAAAvJ,SAAA,aAAsBuJ,GAAc1H,WAC7BhH,KAAKuG,YAAc,EAAApB,SAAA,aAAsBnF,KAAKgM,WAAa,EAAA7G,SAAA,QAEtEnF,KAAKgM,UAAY0C,EAEV1O,KACX,CAKA2O,cAAcC,GAEV,OADA5O,KAAKoJ,UAASmB,GAAQA,EAAKoE,cAAcC,KAClC5O,IACX,CAMIgM,cAAU0C,GACV1O,KAAKoJ,UAASmB,GAAQA,EAAKyB,UAAY0C,GAC3C,CAKI1C,gBACA,IAAI6C,EAAS,GAEb,OADA7O,KAAKoJ,UAASmB,GAAQsE,EAAOlO,KAAK4J,EAAKyB,aAChC6C,EAAOzC,KAAK,GACvB,CAMI0C,cAAUC,GACV/O,KAAKgM,UAAY+C,CACrB,CAKID,gBACA,OAAO9O,KAAKgM,SAChB,CAQAgD,eAAejE,GACX,IAAIkE,EAAU,GAOd,OALAjP,KAAKoJ,UAASvF,IACN7D,KAAKkP,oBAAoBrL,EAAMkH,IAC/BkE,EAAQtO,KAAKkD,E,IAGd,IAAIiE,KAAYmH,EAC3B,CAQAT,gBAAgBzD,GACZ,OAAO/K,KAAKoK,QACP+E,MAAKtL,GAAQ7D,KAAKkP,oBAAoBrL,EAAKuE,UAAU,GAAGrI,MAAOgL,IACxE,CAUAlF,SAASuJ,GAEL,IAAIC,EAA0BrP,KAAKiK,WACnC,IAAK,IAAI9I,EAAM,EAAGA,EAAMiO,EAAahP,OAAQe,IAEzC,GADAkO,EAAgBA,EAAcL,eAAeI,EAAajO,IACtDkO,EAAcrI,WACd,OAAOqI,EAGf,OAAOA,CACX,CAEAjG,SAASkG,GAEL,IAAK,IAAInO,EAAM,EAAGoO,EAAMvP,KAAK+H,SAAS3H,OAAQe,EAAMoO,IACV,IAAlCD,EAAKtP,KAAK+H,SAAS5G,GAAMA,GADwBA,KAKzD,OAAOnB,IACX,CAEAwP,UAAUF,EAA6CzL,IAAQA,IAI3D,OAHI7D,KAAK+H,SAAS3H,OAAS,GACvBkP,EAAKtP,KAAK+H,SAAS,GAAI,GAEpB/H,IACX,CAEAyP,SAASH,EAA6CzL,IAAQA,IAI1D,OAHI7D,KAAK+H,SAAS3H,OAAS,GACvBkP,EAAKtP,KAAK+H,SAAS/H,KAAK+H,SAAS3H,OAAS,GAAI,GAE3CJ,IACX,CAEA0P,KAAKJ,GAUD,OATA,IAAI,EAAAtN,eAAehC,KAAK+H,UACnBtE,SAAQ,CAACI,EAAM1C,KAEZ,GAAY,MAAR0C,EAGJ,OAAOyL,EAAKxH,EAASuC,KAAKxG,GAAO1C,EAAI,IAGtCnB,IACX,CAOA2P,QAAQC,GAeJ,OAdA5P,KAAK0P,MAAK7L,IACN,IAAIgM,EAAShM,EAAKuE,UAAU,GAAGrI,MAC3BD,EAAS+P,EAAOC,cAChBC,EAAcF,EAAOG,mBACrBC,EAAkBJ,EAAOK,uBACX,MAAfH,EACC,IAAIjI,EAASiI,GAAaI,aAAaP,GACjCK,EACN,IAAInI,EAASmI,GAAiBG,YAAYR,GAE1C,IAAI9H,EAAShI,GAAQU,OAAOoP,GAEhC/L,EAAKoC,QAAQ,IAEV2J,CACX,CAOAnB,MAAMa,EAA8C,CAACzL,GAASA,IAC1D,OAAI7D,KAAK+H,SAAS3H,QAAU,GACxBkP,EAAKtP,KAAKgG,IAAI,GAAI,GACXhG,KAAKgG,IAAI,IAEbhG,IACX,CAOAqQ,KAAKf,EAA8C,CAACzL,GAASA,IACzD,GAAI7D,KAAK+H,SAAS3H,QAAU,EAAG,CAC3B,IAAIkQ,EAAWtQ,KAAKgG,IAAIhG,KAAK+H,SAAS3H,OAAS,GAE/C,OADAkP,EAAKgB,EAAU,GACRA,C,CAEX,OAAOtQ,IACX,CAOAqC,OAAOiN,GACH,IAAIiB,EAAyB,GAI7B,OAHAvQ,KAAK0P,MAAM7L,IACPyL,EAAKzL,IAAQ0M,EAAM5P,KAAKkD,EAAY,IAEjC,IAAIiE,KAAiByI,EAChC,CAQAhF,WAAWD,EAAcrE,G,UACrB,MAAMuJ,EAAiD,QAA1C,EAAqC,QAArC,EAAAxF,SAASyF,qBAAqB,eAAO,eAAG,UAAE,QACK,QAArD,EAAAzF,SAASe,gBAAgB0E,qBAAqB,eAAO,eAAG,GACzDC,EAAS1F,SAASuB,cAAc,UAClCtF,SACI,KAAsByJ,aAAM,EAANA,EAAQzJ,OAC9ByJ,EAAOzJ,MAAQA,EAEfyJ,EAAOtJ,aAAa,QAASH,IAGrCyJ,EAAO5H,KAAO,kBACd4H,EAAO1E,UAAYV,EACnB,IAAIqF,EAAmBH,EAAKI,YAAYF,GAExC,OADAF,EAAKrD,YAAYwD,GACV3Q,IACX,CAQAwL,iBAAiBF,EAAcrE,GAC3B,IAAIuJ,EAAOxF,SAASyF,qBAAqB,QAAQ,IAAMzF,SAASe,gBAC5D2E,EAAS1F,SAASuB,cAAc,UAKpC,OAJAvM,KAAK6Q,WAAW5J,EAAOyJ,GACvBA,EAAO5H,KAAO,kBACd4H,EAAO1E,UAAYV,EACnBkF,EAAKI,YAAYF,GACV1Q,IACX,CAOAyM,SAII,OAHAzM,KAAKoJ,UAAUvF,IACXA,EAAKqJ,WAAWC,YAAYtJ,EAAK,IAE9B7D,IACX,CAOA8Q,SAASvG,GACL,OAAI,EAAAhG,KAAA,SAAcgG,IACdvK,KAAK8Q,SAAShJ,EAASK,iBAAiBoC,IACjCvK,OAEXA,KAAKoJ,UAAUvF,IACqB0G,EAAkBnC,UAAU,GAAG2I,YAAW,KAC/D,CACHH,YAAa,WAGlB7Q,MACI6Q,YAAY/M,EAAK,IAErB7D,KACX,CASAgR,eAAeC,EAAaC,EAAgB,EAAIjK,GAG5C,OAFAjH,KAAKmR,iBAAgB,EAAOF,EAAKC,EAAOjK,GAEjCjH,IACX,CAUAoR,qBAAqBH,EAAaC,EAAgB,EAAIjK,GAGlD,OAFAjH,KAAKmR,iBAAgB,EAAMF,EAAKC,EAAOjK,GAEhCjH,IACX,CAEAoQ,eAAeiB,GAEXrR,KAAK0P,MAAK4B,IACN,IAAIC,EAAkBD,EAAalJ,UAAU,GAAGrI,MAC5CgI,EAAWwJ,EAAgBrE,WAC/B,IAAK,IAAI/L,EAAM,EAAGA,EAAMkQ,EAAejR,OAAQe,IAAO,CAClD,IAAIqQ,EAA4BD,EAAgBC,YAChDH,EAAelQ,GAAKiI,UAASqI,IACrBD,GACAzJ,EAASoI,aAAasB,EAAYD,GAClCD,EAAkBC,GAElBzJ,EAAS6I,YAAYa,E,QAOrC,IAAIjE,EAAM,GAGV,OAFAA,EAAI7M,KAAKX,MACTwN,EAAMA,EAAIrD,OAAOkH,GACV,IAAIvJ,KAAY0F,EAC3B,CAEA2C,gBAAgBkB,GACZrR,KAAK0P,MAAK4B,IACN,IAAIC,EAAkBD,EAAalJ,UAAU,GAAGrI,MAC5CgI,EAAWwJ,EAAgBrE,WAC/B,IAAK,IAAI/L,EAAM,EAAGA,EAAMkQ,EAAejR,OAAQe,IAC3CkQ,EAAelQ,GAAKiI,UAASqI,IACzB1J,EAASoI,aAAasB,EAAYF,EAAgB,G,IAI9D,IAAI/D,EAAM,GAGV,OAFAA,EAAI7M,KAAKX,MACTwN,EAAMA,EAAIrD,OAAOkH,GACV,IAAIvJ,KAAY0F,EAC3B,CAEAhG,UAAUkK,GACN,OAAI1R,KAAKuG,YACEvG,KAEA,IAAI8H,KAAY4J,EAE/B,CAEAX,WAAWzB,GACP,OAAItP,KAAKuG,YACEvG,KAEA,IAAI8H,EAASwH,IAE5B,CAMAqC,WAAW5G,GACP,IAAIjL,EAASE,KAAKF,SACdkB,EAAM,GACV,KAAMlB,EAAOyG,aACNzG,EAAO0O,gBAAgBzD,IACtB/J,EAAIL,KAAKb,GAEbA,EAASA,EAAOA,SAEpB,OAAO,IAAIgI,KAAY9G,EAC3B,CAMA4Q,YAAY7G,GACR,IAAIjL,EAASE,KAAKF,SAClB,KAAMA,EAAOyG,aAAa,CACtB,GAAGzG,EAAO0O,gBAAgBzD,GACtB,OAAOjL,EAEXA,EAASA,EAAOA,Q,CAEpB,OAAOgI,EAAShD,MACpB,CAMA+M,kBAAkB9G,GACd,MAAM8D,EAA0B,GAChC,IAAI/O,EAASE,KAAKF,SAASuC,QAAOwB,GAAQA,EAAK2K,gBAAgBzD,KAC/D,KAAMjL,EAAOyG,aACTsI,EAAOlO,KAAKb,GACZA,EAASA,EAAOA,SAASuC,QAAOwB,GAAQA,EAAK2K,gBAAgBzD,KAGjE,OAAO,IAAIjD,KAAY+G,EAC3B,CAEA/O,SACI,IAAIkB,EAAM,GAQV,OAPAhB,KAAKoJ,UAAUvF,IACX,IAAI/D,EAAS+D,EAAKqJ,YAAoBrJ,EAAMiO,MAAQjO,EAAK+F,WACrD9J,IAAkC,GAAxBkB,EAAIQ,QAAQ1B,IACtBkB,EAAIL,KAAKb,E,IAIV,IAAIgI,KAAY9G,EAC3B,CAEA+Q,UAAUC,GA+BN,OA9BAA,EAAW5I,UAAU6I,IACjB,IAAIC,EAAqBrL,EAAWoL,EAAWE,YAC/C,IAAK,IAAItO,KAAQqO,EAAO,CACpB,IAAInS,EAAgB8D,EAAK9D,MACrBwH,EAAe1D,EAAK0D,KAExB,OAAQA,GACJ,IAAK,KACDvH,KAAKyI,GAAG1I,MAAQA,EAChB,MACJ,IAAK,WACDC,KAAKoS,uBAAuB,YAAYtI,SAAW/J,EACnD,MACJ,IAAK,UACDC,KAAKoS,uBAAuB,WAAWnJ,QAAUlJ,EACjD,MACJ,IAAK,QAED,MACJ,QACIC,KAAK+J,KAAKxC,GAAMxH,MAAQA,E,KAMxCiS,EAAW/K,MAAMV,WAAU,KACvBvG,KAAKiH,MAAMlH,MAAQiS,EAAW/K,MAAMlH,KAAK,IAGtCC,IACX,CAaAqS,UAAU5G,EAAgB6G,EAA+BC,EAA2BpH,GAAO,G,MACvF,GAAInL,KAAKgH,WACL,OAGJ,IAAIwL,EAAwC,QAAvB,EAAQ,OAARxH,eAAQ,IAARA,cAAQ,EAARA,SAAUyH,qBAAa,eAAEhK,GAC1CiK,EAAgB,EAAmB5K,EAAS6K,iBAAiB3H,SAASyH,eAAiB,KACvFG,EAAQ9K,EAAS+K,WAAWpH,GAC5B+B,EAAM,GACNoC,EAAY5P,KAAKoI,UAAU,GAAGrI,MAC9B+S,EAAcF,EAAM5M,IAAI,GACxBkH,EAAa0C,EAAU1C,WACvB6F,EAAWD,EAAY1K,UAAU,GAAGrI,MAIxC,GAHAmN,EAAW8F,aAAaD,EAAUnD,GAClCpC,EAAI7M,KAAK,IAAImH,EAASiL,IAElB/S,KAAKgH,WACL,OAAOhH,KAGX,IAAIiT,EAAwB,GAExBL,EAAMxS,OAAS,IACf6S,EAAwBA,EAAsB9I,UAAUyI,EAAMnL,OAAOyL,MAAM,IAC3E1F,EAAI7M,KAAKmH,EAASuC,KAAK0I,GAAU3C,YAAY,IAAItI,KAAYmL,MAG7DX,GACAtS,KAAKmT,aAELZ,GACAvS,KAAKoT,SAGT,IAAIC,EAAevL,EAASuC,KAAKmI,GAMjC,OALIA,GAAkBa,EAAa9M,aACd,MAAjBmM,QAAyB,IAAsBA,GAC/CW,EAAajK,UAASvF,GAAQiE,EAASwL,iBAAiBzP,EAAM6O,KAG3DE,CACX,CAQAO,WAAWI,GAAS,EAAOC,EAAwC3L,GAC/D,MAAM4L,EAAwBC,IAC1B,GAAIA,EAAiBtT,OAAQ,CAIzB,IAAIuT,EAAgB,GACpB,IAAI,EAAA3R,eAAe0R,GAAkBjQ,SAAQI,IACpCA,EAAKoD,OAGF0M,EAAcvT,SACdJ,KAAKuL,WAAWoI,EAAcvH,KAAK,OACnCuH,EAAcvT,OAAS,GAGzBmT,EAEEvT,KAAKwL,iBAAiB3H,EAAK+P,SAAU/P,EAAKoD,OAD1CjH,KAAKuL,WAAW1H,EAAK+P,SAAU/P,EAAKoD,QARxC0M,EAAchT,KAAKkD,EAAK+P,S,IAY5BD,EAAcvT,SACZmT,EACEvT,KAAKwL,iBAAiBmI,EAAcvH,KAAK,OADjCpM,KAAKuL,WAAWoI,EAAcvH,KAAK,OAE/CuH,EAAcvT,OAAS,GAG3BsT,EAAmB,E,CAEvB,OAAOA,CAAgB,EAG3B,IAAIG,EAAe,GACfC,EAAmB,CAAC,GAAI,SAAU,kBAAmB,kBAAmB,cACxEC,EAAclQ,I,YACV,IAAI6E,EAAU7E,EAAK6E,QACfsL,GAAsB,QAAV,EAAAnQ,aAAI,EAAJA,EAAMiF,YAAI,QAAI,IAAID,cAClC,GAAIH,GACA9B,EAAI8B,EAAS,YAC0B,GAAvCoL,EAAiBtS,QAAQwS,GAAiB,CAC1C,IAAI/C,EAAMpN,EAAKqD,aAAa,OAC5B,QAAI,IAAsB+J,GACnB,MAAQA,GACRA,EAAI7Q,OAAS,EAClB,CACE,IAAI6G,EAAmB,QAAX,EAAApD,aAAI,EAAJA,EAAMoD,aAAK,QAAIpD,EAAKqD,aAAa,SAASnH,MAIlDyT,EAAYvC,KAEZ4C,EAAeJ,EAAqBI,GAC/BN,EAKEtM,EAASjH,KAAKoR,qBAAqBH,EAAK,EAAIhK,GAE3CjH,KAAKoR,qBAAqBH,EAAK,GANhChK,EAASjH,KAAKgR,eAAeC,EAAK,EAAIhK,GAErCjH,KAAKgR,eAAeC,EAAK,G,KAQlC,CAGH,IAAI2C,EAAWlN,EAAK7C,EAAKoQ,MAAQpQ,EAAKqQ,WAAarQ,EAAKmI,WACpDmI,GAAK,EAET,KAAOA,GACHA,GAAK,EAC2B,WAA5BP,EAASnS,UAAU,EAAG,KACtBmS,EAAWA,EAASnS,UAAU,GAC9B0S,GAAK,GAEuB,aAA5BP,EAASnS,UAAU,EAAG,KACtBmS,EAAWA,EAASnS,UAAU,GAC9B0S,GAAK,GAEwB,eAA7BP,EAASnS,UAAU,EAAG,MACtBmS,EAAWA,EAASnS,UAAU,IAC9B0S,GAAK,GAGb,IAAIlN,EAAuD,QAA/C,EAAW,QAAX,EAAApD,aAAI,EAAJA,EAAMoD,aAAK,QAAIpD,EAAKqD,aAAa,SAASnH,aAAK,QAAI,GAG/D8T,EAAalT,KAAK,CACdsG,QACA2M,Y,IAKpB,IACyB,IAAI9L,EAAS9H,KAAKgP,eAAe,UAAWhP,KAAKmI,iBAAiB,WAExEiC,QACVnI,SAAQ4B,GAAQ,IAAIA,EAAK4D,UACzB2M,MAAK,CAACC,EAAOC,IAAUA,EAAMC,wBAAwBF,GAAS,IAC9D5Q,SAAQI,GAAQkQ,EAAWlQ,KAEhC4P,EAAqBI,E,CACvB,MAAOW,GACDC,SAAWA,QAAQC,OAOnBD,QAAQC,MAAMF,EAAEG,SAAWH,EAAEI,Y,SAQjCb,EAAa,I,CAEjB,OAAO/T,IACX,CAEAoT,SAuBI,OAV2B,IAAItL,EAAS9H,KAAKgP,eAAe,eAAgBhP,KAAKmI,iBAAiB,gBAEzFiC,QACJnI,SAAQ4B,GAAQ,IAAIA,EAAK4D,UAIzB2M,MAAK,CAACC,EAAOC,IAAUD,EAAME,wBAAwBD,GAAS,IAC9D7Q,SAAQI,GAnBG,CAAC+L,IACb,MAAMiF,EAAa/M,EAASuC,KAAKuF,GAC3BlH,EAAUmM,EAAWnM,QAAQlB,OAAO,IAAIzH,MAC9C,IAAI+U,EAAahN,EAAS+K,WAAW,IAAInK,EAAQG,oBACjDiM,EAAaA,EAAW/C,UAAU8C,GAClCC,EAAW9I,UAAY4D,EAAU5D,UAGjC6I,EAAWlF,QAAQmF,EAAW,EAWbC,CAAQlR,KAEtB7D,IACX,CAKAgV,QAEI,OADAhV,KAAKiV,UAAU,SACRjV,IACX,CAEAkV,iBAAiBpM,EAAcqM,EAAgCC,GAE3D,OADApV,KAAKoJ,UAAU6D,GAAkBA,EAAKiI,iBAAiBpM,EAAMqM,EAAUC,KAChEpV,IACX,CAEAqV,oBAAoBvM,EAAcqM,EAAgCC,GAE9D,OADApV,KAAKoJ,UAAU6D,GAAkBA,EAAKoI,oBAAoBvM,EAAMqM,EAAUC,KACnEpV,IACX,CAKAiV,UAAUK,EAAmBF,EAAgC,CAAC,GAG1D,IAAIG,EAAoB,CACpBC,SAAS,EAAMC,YAAY,GAE/BF,GAAe,IAAArS,oBAAmBqS,EAAcH,GAEhDpV,KAAKoJ,UAAU6D,IACX,IAAIvB,EACJ,GAAIuB,EAAKyI,cACLhK,EAAMuB,EAAKyI,kBACR,IAAqB,GAAjBzI,EAAK0I,SAIZ,MAAM,IAAIjT,MAAM,qCAAuCuK,EAAKxE,IAF5DiD,EAAMuB,C,CAKV,GAAIA,EAAK0B,cAAe,CAEpB,IAAIiH,EAAaC,MAMjB,OAAQP,GACJ,IAAK,QACL,IAAK,YACL,IAAK,UACL,IAAK,YACDM,EAAa5V,KAAKsI,SAASwN,WAC3B,MACJ,IAAK,QACL,IAAK,UACL,IAAK,WACDF,EAAa5V,KAAKsI,SAASyN,cAC3B,MACJ,IAAK,QACL,IAAK,SACL,IAAK,OACL,IAAK,SACD,MACJ,QACI,KAAM,sDAAwDT,EAAY,KAGlF,IAAIU,EAAQ,IAAIJ,EAAWN,EAAWC,GAGrCS,EAAcC,WAAY,EAE3BhJ,EAAK0B,cAAcqH,E,MAChB,GAAU/I,EAAMgI,UAAW,CAE9B,IAAIe,EAAQtK,EAAIwK,oBAChBF,EAAMC,WAAY,EAClBzS,OAAOD,KAAKgS,GAAc9R,SAAQlD,GAAOyV,EAAMzV,GAAOgV,EAAahV,KAC7D0M,EAAMgI,UAAU,KAAOK,EAAWU,E,IAGpD,CAEAG,YAAYC,EAAqB,IAC7B,OAAOpW,KAAKoK,QACPhI,KAAKrC,GACSA,EAAMqI,UAAU,GAAG2I,YAAW,KACzB,CACRoF,YAAa,OAElBpW,MACgBoW,aAAe,KAErC3L,QAAO,CAAC6L,EAAOC,IAAU,CAACD,EAAMD,EAAWE,GAAOlK,KAAK,KAAK,GACrE,CAEA8H,UAAUkC,EAAqB,IAC3B,OAAOpW,KAAKoK,QACPhI,KAAKrC,GACSA,EAAMqI,UAAU,GAAG2I,YAAW,KACzB,CACRmD,UAAW,OAEhBnU,MACgBmU,WAAa,KAEnC1J,QAAO,CAAC6L,EAAOC,IACL,CAACD,EAAOC,GAAOlK,KAAKgK,IAC5B,GACX,CAWAG,kBAAkBC,EAAU,CAAC,GAIzB,GAAIxW,KAAKuH,KAAKP,WACV,OAIJ,IAAI9G,GAAS,IAAAgD,oBAAmBsT,GA+EhC,OA7EAxW,KAAK0P,MAAMpI,I,QACP,GAAIA,EAAQC,KAAKP,WACb,OAEJ,IAAIO,EAAOD,EAAQC,KAAKxH,MACpB2I,EAAUpB,EAAQoB,QAAQlB,OAAO,YAAYzH,MAAM8I,cACnD4N,EAAWnP,EAAQwB,KAAKtB,OAAO,YAAYzH,MAAM8I,cASrD,GAPA4N,EAAWA,EAAS5N,eAOH,SAAXH,GAAiC,YAAXA,GAAoC,UAAXA,IACxC,MAARnB,GAAwB,IAARA,IAAiBD,EAAQwC,SAAU,CAUpD,GAAe,UAAXpB,EAAqB,CAErB,IAAIgO,EAAmDpP,EAAQc,UAAU,GAAGrI,MAC5E,GAAI2W,EAAWC,eAAiB,EAAG,CAC/B,IAAIC,EAAOF,EAAWtB,QAAQhV,OAC9B,IAAK,IAAIyW,EAAI,EAAGA,EAAID,EAAMC,IAGtB,GAAIH,EAAWtB,QAAQyB,GAAGC,SAAU,CAChC,IAAIC,EAAgBL,EAAWtB,QAAQyB,IACvC,IAAArW,QAAON,EAAQqH,GAAMxH,MAAgD,MAAvCgX,EAAc7P,aAAa,SACrD6P,EAAchX,MAAQgX,EAAc9C,I,GAUxD,GAEQvL,GAAWjC,EAA6BuQ,QACxCP,GAAYhQ,EAA6BwQ,QACzCR,GAAYhQ,EAA6ByQ,OACzCT,GAAYhQ,EAA6B0Q,QACzCV,GAAYhQ,EAA6B2Q,QAGrCX,GAAYhQ,EAA6B4Q,UAAYZ,GAAYhQ,EAA6B6Q,OAClGhQ,EAAQ2B,SAEd,CACE,IAAIsO,EAA2C,QAA1B,EAAmB,QAApB,EAAMjQ,EAAQvH,aAAM,eAAEA,aAAK,eAAE8M,MAC7C2K,EAAgBD,QAAAA,EAAiB,GACrC,GAAIC,aAAQ,EAARA,EAAUpX,QAEV,IAAAH,QAAOC,EAAQqH,GAAMxH,MAAQU,MAAMgX,KAAKD,OACrC,CACH,GAAKD,EACD,QAGJ,IAAA/W,QAAON,EAAQqH,GAAMxH,MAAQuH,EAAQyB,WAAWhJ,K,OAOzDG,CACX,CAEIwX,oBAwBA,OArBU1X,KAAKoK,QACVnI,SAAS4B,GACCA,EAAKoG,WAAWG,UAE1B/H,QAAOwB,I,QACJ,OAPe,IAOU,QAAlB,EAAW,QAAX,EAAAA,aAAI,EAAJA,EAAM9D,aAAK,eAAEA,aAAK,eAAE4V,SAA4B,IAE1DnL,QAAO,CAACmN,EAAqB9T,K,UAE1B,OADA8T,EAAQhX,KAAoC,QAA9B,EAAwB,QAAzB,EAAiB,QAAX,EAAAkD,aAAI,EAAJA,EAAM9D,aAAK,eAAEA,aAAM,eAAE6X,YAAI,QAAI,IACzCD,CAAO,GACf,IAWIvL,KAAK,GACpB,CAEAyL,SAASJ,EAAcK,GAInB,OAHI,EAAA3S,SAAA,aAAsB2S,GAAI9Q,aAC1B8Q,EAAK9X,KAAKI,QAEP,IAAI0H,KAAY9H,KAAK+H,SAASmL,MAAMuE,EAAMM,KAAKC,IAAIF,EAAI9X,KAAKI,SACvE,CAMA6X,OAAOvW,GAEH,OADA1B,KAAKiI,QAAUvG,EACH1B,IAChB,CAGAkY,UACI,IAAIC,GAAmC,GAAjBnY,KAAKiI,SAAiBjI,KAAKgI,KAAOhI,KAAKiI,QAAU,EACnEmQ,EAAepY,KAAKgI,KAAOhI,KAAKyH,OAAOrH,OAAS,EACpD,QAAS+X,GACLC,EACR,CAEAC,OACI,OAAKrY,KAAKkY,WAGVlY,KAAKgI,MACE,IAAIF,EAAS9H,KAAKyH,OAAOzH,KAAKgI,OAH1B,IAIf,CAGAsQ,UAAUnX,EAAM,GACZ,OAAKnB,KAAKyH,OAAOrH,OAAS,EAAMJ,KAAKgI,IAAM7G,EAChC,aAEJ,IAAI2G,EAAS9H,KAAKyH,OAAOzH,KAAKgI,IAAM7G,GAC/C,CAGAoX,UACI,OAAiB,GAAbvY,KAAKgI,IACE,cAEJ,IAAIF,EAAS9H,KAAKyH,OAAOzH,KAAKgI,KACzC,CAGAwQ,QACIxY,KAAKgI,KAAO,CAChB,CAEAyQ,aAAaC,EAAoC,CAACC,KAAM,SACpD,IAAIhP,EAA0B,GAU9B,OATA3J,KAAKoJ,UAAUvF,IACX,IAAI+U,EACJ,KAAU/U,aAAI,EAAJA,EAAO4U,cAIb,MAAM,IAAI/V,MAAM,mGAHhBkW,EAAgB9Q,EAASuC,KAAWxG,EAAM4U,aAAaC,IACvD/O,EAAYhJ,KAAKiY,E,IAKlB,IAAI9Q,KAAY6B,EAC3B,CAQAkP,mBAAmBhY,EAA2CuU,EAAqB,CAC/EjD,YAAY,EACZ2G,WAAW,EACXC,SAAS,EACTC,QAAS,IACTC,SAAU,MAEV,OAptDR,SAAsB7T,EAAgBvE,EAA2CuU,EAAqB,CAClGjD,YAAY,EACZ2G,WAAW,EACXC,SAAS,EACTC,QAAS,IACTC,SAAU,MAEV,OAAO,IAAIC,SAAkB,CAACC,EAASzE,KACnC,IAAI0E,EAA6B,KACjC,MAAMC,EAAY,IAAI3W,MAAM,6BAI5B,SAAS4W,EAAYlU,EAAgBvE,GACjC,IAAI4I,EAAQ,KACZ,OAAM5I,EAAUuE,GACLA,GAGPqE,EADA2L,EAAQ0D,UACCjY,EAAUuE,GAASA,EAAOA,EAAK6E,WAAW5H,QAAOwB,GAAQhD,EAAUgD,KAAO4K,QAAQ1O,MAAMA,MAC1FqV,EAAQ2D,QACNlY,EAAUuE,GAASA,EAAOA,EAAK+C,iBAAiB,OAAO9F,QAAOwB,GAAQhD,EAAUgD,KAAO4K,QAAQ1O,MAAMA,MAErGc,EAAUuE,GAASA,EAAO,KAEhCqE,EACX,CAEA,IAAIvB,EAAe9C,EACnB,GAAO8C,EAAeoR,EAAYpR,EAAcrH,GAC5CsY,EAAQ,IAAIrR,EAASI,SAIzB,GAAI,oBAAsBqR,iBAAkB,CACxC,MAAMC,EAAaC,YAAW,KAC1BL,EAASM,aACFhF,EAAM2E,KACdjE,EAAQ4D,SAELW,EAA8BC,IAChC,MAAMnQ,EAAQ,IAAI3B,EAAS8R,EAAaxX,KAAKyX,GAAQA,EAAI3Z,UAASmC,QAAOwB,GAAQhD,EAAUgD,KAAO4K,QAC9FhF,EAAMlD,cACNuT,aAAaN,GACbJ,EAASM,aACTP,EAAQ,IAAIrR,EAAS2B,GAASrE,I,EAGtCgU,EAAW,IAAIG,iBAAiBI,GAIhC,IAAII,EAAiB,IAAI3E,UAClB2E,EAAef,QACtB5T,EAAKgE,UAASvF,IACVuV,EAASY,QAAQnW,EAAMkW,EAAe,G,KAEvC,CAEH,IAAId,EAAWgB,aAAY,KACvB,IAAIxQ,EAAQ6P,EAAYlU,EAAMvE,GACxB4I,IACEuP,IACAc,aAAad,GACbkB,cAAcjB,GACdA,EAAW,MAEfE,EAAQ,IAAIrR,EAAS2B,GAASrE,I,GAEnCgQ,EAAQ6D,UACPD,EAAUS,YAAW,KACjBR,IACAiB,cAAcjB,GACdvE,EAAM2E,G,GAEXjE,EAAQ4D,Q,IAIvB,CAqoDemB,CAAana,KAAMa,EAAWuU,EACzC,CAKIgF,qBACA,IAIIC,GAJiBra,KAAKmI,iBAAiB,KACtC9F,QAAOwB,GAAQA,EAAKyW,YAGuBjS,YAAc,IAAIjG,KAAIkF,GAAWA,EAAQsC,aACzF,OAAO,IAAI9B,KAAYuS,EAC3B,CAEIzQ,iBACA,IAAID,EAAc,GAClB,IAAK,IAAIxI,EAAM,EAAGA,EAAMnB,KAAK+H,SAAS3H,OAAQe,IACtCnB,KAAK+H,SAAS5G,GAAKyI,YACnBD,EAAYhJ,KAAKX,KAAK+H,SAAS5G,GAAKyI,YAG5C,OAAO,IAAI9B,KAAY6B,EAC3B,CAEI2Q,gBACA,IAAK,IAAInZ,EAAM,EAAGA,EAAMnB,KAAK+H,SAAS3H,OAAQe,IAC1C,GAAInB,KAAK+H,SAAS5G,GAAKyI,WACnB,OAAO,EAGf,OAAO,CACX,CAIAnE,wBAAwB8U,GACpB,IAAIC,EAAW,EAEf,IACI,GAAmB,OAATxP,eAAQ,IAARA,cAAQ,EAARA,SAAWyP,UAAW,CAC5BF,EAAKG,QACL,IAAID,EAAkBzP,SAAUyP,UAAUE,cAE1CF,EAAUG,UAAU,aAAcL,EAAKxa,MAAMK,QAE7Coa,EAAWC,EAAUxG,KAAK7T,M,EAEhC,MAAOoU,G,CAIT,OAAOgG,CACX,CAYA/U,wBAAwB8U,EAAWvS,IAC/BuS,aAAI,EAAJA,EAAMG,SAAQH,SAAAA,EAAMG,UAGpBH,aAAI,EAAJA,EAAMM,sBAAqBN,SAAAA,EAAMM,mBAAmB7S,EAAKA,GAC7D,CAMA,CAAC8S,OAAOC,YACJ,MAAO,CACH1C,KAAM,KAGK,CACH2C,MAHQhb,KAAKkY,UAIbnY,MAHMC,KAAKqY,SAO3B,CAOAlO,OAAO8Q,EAAoBC,GAAgB,GACvC,IAAIC,EAAanb,KAAKoK,QACtB,MAAMpJ,EAAM,IAAI8G,KAAYqT,EAAWhR,OAAO8Q,EAAS7Q,UAEvD,IAAK8Q,EACD,OAAOla,EAEX,IAAIoa,EAAM,CAAC,EACX,OAAO,IAAItT,KAAY9G,EAAIoJ,QAAQ/H,QAAO4K,IACtC,MAAMoO,IAAaD,aAAG,EAAHA,EAAMnO,EAAKlN,MAAMA,MAAMsS,YAE1C,OADA+I,EAAInO,EAAKlN,MAAMA,MAAMsS,YAAoB,EAClCgJ,CAAQ,IAEvB,CAEA7a,OAAO+J,GAEH,OADAvK,KAAK0P,MAAK7L,GAAQ0G,EAAKuG,SAASjN,KACzB7D,IACX,CAEAsb,UAAU/Q,GAIN,OAHAA,EAAKnB,UAASvF,IACVA,EAAK0X,WAAWvb,KAAKqI,WAAW,IAE7BrI,IACX,CAEAub,QAAQhR,GAIJ,OAHAvK,KAAKoJ,UAASvF,IACVA,EAAK0X,WAAWhR,EAAKlC,WAAW,IAE7BrI,IACX,CAQQkL,kBAAkBH,G,QACtB,KAAmB,QAAd,EAAA/K,gBAAI,EAAJA,KAAM+H,gBAAQ,eAAE3H,QACjB,OAAOJ,KAEX,IAAI4S,EAAQ,GACZ,IAAK,IAAIzR,EAAM,EAAGA,EAAMnB,KAAK+H,SAAS3H,OAAQe,IAAO,CACjD,KAAuB,QAAlB,EAAAnB,KAAK+H,SAAS5G,UAAI,eAAEgH,kBACrB,SAEJ,IAAIqF,EAAMxN,KAAK+H,SAAS5G,GAAKgH,iBAAiB4C,GAC9C6H,EAAQA,EAAMzI,UAAUtD,EAAW2G,G,CAGvC,OAAO,IAAI1F,KAAY8K,EAC3B,CAGQ3H,sBAAsBF,G,MAC1B,KAAmB,QAAd,EAAA/K,gBAAI,EAAJA,KAAM+H,gBAAQ,eAAE3H,QACjB,OAAOJ,KAGX,IAAIwb,EAAuB,IAAI1T,KAAY9H,KAAK+H,UAC5C0T,EAAY1Q,EAAS5I,MAAM,cAE/B,IAAK,IAAIuZ,EAAO,EAAGA,EAAOD,EAAUrb,OAAQsb,IAAQ,CAChD,GAAuB,IAAnBD,EAAUC,GACV,SAEJ,IAAIC,EAAgBF,EAAUC,GAC9BF,EAAaA,EAAWrT,iBAAiBwT,GACrCD,EAAOD,EAAUrb,OAAS,IAC1Bob,EAAaA,EAAW5R,W,CAIhC,OAAO4R,CACX,CASQlO,SAASvC,G,QACb,KAAmB,QAAd,EAAA/K,gBAAI,EAAJA,KAAM+H,gBAAQ,eAAE3H,QACjB,OAAOJ,KAEX,IAAI4S,EAAQ,GACZ,IAAK,IAAIzR,EAAM,EAAGA,EAAMnB,KAAK+H,SAAS3H,OAAQe,IAAO,CACjD,KAAuB,QAAlB,EAAAnB,KAAK+H,SAAS5G,UAAI,eAAEiM,SACrB,SAEJ,IAAII,EAAM,CAACxN,KAAK+H,SAAS5G,GAAKiM,QAAQrC,IACtC6H,EAAQA,EAAMzI,UAAUqD,E,CAG5B,OAAO,IAAI1F,KAAY8K,EAC3B,CAGQvF,aAAatC,G,MACjB,KAAmB,QAAd,EAAA/K,gBAAI,EAAJA,KAAM+H,gBAAQ,eAAE3H,QACjB,OAAOJ,KAGX,IAAIwb,EAAuB,IAAI1T,KAAY9H,KAAK+H,UAC5C0T,EAAY1Q,EAAS5I,MAAM,cAE/B,IAAK,IAAIuZ,EAAO,EAAGA,EAAOD,EAAUrb,OAAQsb,IAAQ,CAChD,GAAuB,IAAnBD,EAAUC,GACV,SAEJ,IAAIC,EAAgBF,EAAUC,GAC9BF,EAAaA,EAAWpO,QAAQuO,GAC5BD,EAAOD,EAAUrb,OAAS,IAC1Bob,EAAaA,EAAW5R,W,CAIhC,OAAO4R,CACX,CAWQtM,oBAAoB0M,EAAkB7Q,GAC1C,IAAI8Q,EAAoDD,EAcxD,OAbgCC,EAAeC,SAC3CD,EAAerN,iBACfqN,EAAeE,oBACfF,EAAeG,mBACfH,EAAeI,kBACfJ,EAAeK,uBACf,SAAUC,GACN,IAAIL,GAAoC9Q,UAAY0K,eAAevN,iBAAiBgU,GAChFC,EAAIN,EAAQ1b,OAChB,OAASgc,GAAK,GAAKN,EAAQjY,KAAKuY,KAAOR,IAEvC,OAAOQ,GAAK,CAChB,GACmBrP,KAAK6O,EAAS7Q,EACzC,CAaQoG,gBAAgBoC,EAAiBtC,EAAaC,EAAgB,EAAGjK,GACrE,IAAIoV,EAAUrc,KAAKsc,iBAAiBrL,EAAKhK,GACrCsV,EAAavc,KAAKsc,iBAAiB,KAAMrV,GACzCuV,EAAS,SAASC,KAAKC,SAAS3E,KAAK4E,WACzCJ,EAAWvQ,UAAY,kBAAkBwQ,aAEzC,IAAIhM,EAAOxF,SAASwF,KAUpB,GAFAA,EAAKI,YAAY2L,GACjB/L,EAAKrD,YAAYoP,GACb/L,EAAKgM,GAAT,CAGA,IACStL,EAMDuI,YAAW,KACPjJ,EAAKI,YAAYyL,GACb9I,GACA/C,EAAKrD,YAAYkP,E,GAEtBnL,IAVHV,EAAKI,YAAYyL,GACb9I,GACA/C,EAAKrD,YAAYkP,G,gBAWlB7L,EAAKgM,E,CAGhB,OAAOxc,I,CACX,CAMQoS,uBAAuBwK,EAAmB,SAC9C,IAAI5b,EAAM,GAEV,OADAA,EAAI4b,GAAY,KACRA,KAAY5c,KAAKoI,UAAU,GAAGrI,MAClCC,KAAKoI,UAAU,GAAGrI,MAClBiB,CACR,CAEQsb,iBAAiBrL,EAAoBhK,GACzC,IAAIoV,EAA6BrR,SAASuB,cAAc,UAaxD,OAZA8P,EAAQvT,KAAO,kBACT7B,SACE,KAAsBoV,aAAO,EAAPA,EAASpV,OAC/BoV,EAAQpV,MAAQA,EAEhBoV,EAAQjV,aAAa,QAASH,IAGjCgK,IACDoL,EAAQpL,IAAMA,GAGXoL,CACX,CAEQxL,WAAW5J,EAAeyJ,GAC1BzJ,SACI,KAAsByJ,aAAM,EAANA,EAAQzJ,OAC9ByJ,EAAOzJ,MAAQA,EAEfyJ,EAAOtJ,aAAa,QAASH,GAGzC,EAn3DO,EAAAnC,OAAS,IAAIgD,EAKb,EAAAQ,OAAS,IA63Db,MAAMuU,EAAb,cAEI,KAAAjF,KAAmB,EASvB,CAPIkF,QAAQxV,GACJtH,KAAK4X,KAAKjX,KAAK2G,EACnB,CAEIyV,iBACA,OAAO,IAAIjV,KAAY9H,KAAK4X,KAChC,EAMG,MAAMoF,EAAKlV,EAMLmV,EAAMnV,EAASK,gB,kGCtqE5B,MAAM+U,UAAyBzc,MAI3BZ,eAAesd,GACXxY,SAASwY,GACLA,EAAgBC,SAChBpd,KAAKod,SAAYD,EAAgBC,SAEjCpd,KAAKod,SAAWD,EAKhBnd,KAAKiC,QAAWob,GAAerd,KAAKsd,SAASD,GAG7Crd,KAAKud,KAAO,CAACC,EAAoB,IAAMxd,KAAKyd,MAAMD,EAE1D,CAEApb,IAAOsb,EAAwDC,GAE3D,OAAO,IAAKC,KADAnd,MAAMod,UAAUzb,IAAI2K,KAAK/M,KAAKod,SAAUM,EAAYC,GAEpE,CAEAxT,UAAU2T,GAEN,OAAO,IAAKF,KADAnd,MAAMod,UAAU1T,OAAO4C,KAAK/M,KAAKod,YAAaU,GAE9D,CAEAC,UAEI,OAAO,IAAKH,KADAnd,MAAMod,UAAUE,QAAQhR,KAAK/M,KAAKod,UAElD,CAEAlK,MAAM3R,EAAgBG,GAElB,OAAO,IAAKkc,KADAnd,MAAMod,UAAU3K,MAAMnG,KAAK/M,KAAKod,SAAU7b,EAAOG,GAEjE,CAEAsc,OAAOzc,EAAe0c,GAElB,OAAO,IAAKL,KADAnd,MAAMod,UAAUG,OAAOjR,KAAK/M,KAAKod,SAAU7b,EAAO0c,GAElE,CAEA5b,OAAoB6b,EAAyDP,GAEzE,OAAO,IAAKC,KADAnd,MAAMod,UAAUxb,OAAO0K,KAAK/M,KAAKod,SAAUc,EAAWP,GAEtE,CAGAnT,OAAOkT,EAAwFS,GAE3F,OADY1d,MAAMod,UAAUrT,OAAOuC,KAAK/M,KAAKod,SAAUM,EAAYS,EAEvE,CAOQV,MAAMW,EAAY,GACtB,OAAOpe,KAAKqe,aAAare,KAAKod,SAAUgB,EAC5C,CAEQC,aAAaxc,EAAKuc,EAAY,GAElC,GAAiB,GAAbA,EACA,OAAOvc,EAEX,IAAI2L,EAAM,GASV,OAFA3L,EAAI4B,SALSI,IACTA,EAAOpD,MAAMC,QAAQmD,GAAQA,EAAO,CAACA,GACrC,IAAIwW,EAASra,KAAKqe,aAAaxa,EAAMua,EAAY,GACjD5Q,EAAMA,EAAIrD,OAAOkQ,EAAO,IAIrB,IAAIrY,KAAewL,EAC9B,CAEQ8P,SAASgB,GACb,IAAI9Q,EAAMxN,KAAKoC,KAAIyB,GAAQya,EAAeza,KAC1C,OAAO7D,KAAKqe,aAAa7Q,EAC7B,EAOG,SAASoQ,KAAmBhG,GAC/B,IAAI5W,EAAM,IAAIkc,KAAmBtF,GAqBjC,OApBc,IAAI2G,MAAuBvd,EAAK,CAC1CgF,IAAI9F,EAA+Bse,EAAoBC,GACnD,MAAG,iBAAmBD,EAEXte,EAAOkd,SAASoB,GAEvBE,MAAM/c,SAAS6c,IAGRte,EAAOse,GAFPte,EAAOkd,SAASoB,EAI/B,EAEAG,IAAIze,EAAQ0e,EAAU7e,GAGlB,OAFAG,EAAO0e,GAAY7e,EACnBG,EAAOkd,SAASwB,GAAY7e,GACrB,CACX,GAIR,CAOO,IAAIiC,EAAoBvB,MAAMod,UAAiB,QAAI,YAAejG,GAMrE,OAAOA,aAAI,EAAJA,EAAM3V,SAAU2V,EAAOgG,KAAgBhG,EAClD,EAAIgG,C,sBCrHG,SAASiB,I,MACZ,IAAIA,EAAkB,oBAAsBC,YAAcA,WAAWC,OAAUD,WAAWC,OACrF,oBAAsBA,OAAUA,OAC5B,oBAAsBD,WAAcA,gBAChC,IAAsB,EAAAE,IAAgB,OAAN,EAAAA,QAAM,IAAN,EAAAA,OAAM,EAAN,EAAAA,EAAQD,QAAU,EAAAC,EAAOD,YACrD,IAAsB,EAAAC,EAAU,EAAAA,EAAS,KAG1D,OAAuB,QAAhB,EAAAH,aAAQ,EAARA,EAAUE,cAAM,QAAIF,CAC/B,C,4FCRcta,E,mBAAd,SAAcA,GAiEV,SAAgBmC,EAAKwF,GAEjB,IAAI+S,EAAK,KAAM7C,GADflQ,EAAMA,EAAIyD,QAAQ,SAAU,KACLvP,OAEvB,KAAO6e,EAAGC,KAAKhT,EAAIiT,SAAS/C,MAG5B,OAAOlQ,EAAIgH,MAAM,EAAGkJ,EAAI,EAC5B,CAqDA,SAAgBzV,EAASyY,GAGrB,QAASC,UAAUjf,QAAgB,MAANgf,IAA4B,iBAANA,GAAkBA,aAAcE,OACvF,CA7GgB,EAAAC,YAAhB,SAA+BC,EAA2B7R,EAAkB,MACxE,IACI,IAAI8R,EAASD,IACb,OAAO,EAAAra,SAAA,aAAsBsa,QAAAA,EAAU9R,E,CACzC,MAAO6G,GACL,OAAO,EAAArP,SAAA,M,CAEf,EAQgB,EAAAua,gBAAhB,SAAmCF,EAA2B7R,EAAwB,MAClF,IACI,IAAI8R,EAASD,IACb,OAAO,EAAAra,SAAA,aAAsBsa,QAAAA,EAAU9R,I,CACzC,MAAO6G,GACL,OAAO,EAAArP,SAAA,M,CAEf,EAQgB,EAAAwa,WAAhB,SAA2BP,EAAYQ,EAA4B,QAE/D,IAAI5e,EAAM,GAIV,OAHAoe,EAAGjd,MAAMyd,GAAUnc,SAAS6D,IACxBtG,EAAIL,KAAK+F,EAAKY,GACjB,IACMtG,CACX,EAOgB,EAAA0F,KAAI,EAkBJ,EAAAG,WAAhB,SAA8BgZ,EAAUC,EAAiB,EAAGC,EAAiB,IACzE,MAAgC,kBAA3BF,QAAAA,EAAO,iBACDE,QAAAA,EAAQ,KAITF,aAAgBpf,QAAUqf,IAAWC,EAAaF,EAErD,IAAI,EAAA7d,eAAe+d,EAAK5V,OAAO1J,MAAMod,UAAU3K,MAAMnG,KAAK8S,EAAKC,IAC1E,EAQgB,EAAAE,iBAAhB,SAAiCC,EAAiBC,GAC9C,IACIC,EAAYD,QAAAA,EAAe,gBAG/B,OAJkBD,QAAAA,EAAU,iBAITpX,gBAAkBsX,EAAUtX,aACnD,EASgB,EAAAuX,WAAhB,SAA2BC,EAAYC,GACnC,OAAO3Z,EAAS2Z,UAAkBD,GAASC,EAAUD,aAAiBC,CAC1E,EASgB,EAAA3Z,SAAQ,EAUR,EAAA4Z,OAAhB,SAAuBnB,GACnB,OAAOA,aAAcoB,UAA0B,mBAAPpB,CAC5C,EAIgB,EAAA9a,UAAhB,SAA0BpE,KAAgBugB,GACtC,GAAc,MAAVvgB,EACA,MAAM,IAAIwgB,UAAU,8CAGxB,IAAI5I,EAAKtU,OAAOtD,GAChB,OAASsD,OAAQvD,QACbwgB,EAAQhd,SAAQI,GAAcL,OAAQvD,OAAO6X,EAAIjU,KAC1CiU,IAGX2I,EAAQpe,QAAOwB,GAAgB,MAARA,IAAcJ,SAAQI,IACzC,IAAI8c,EAAa9c,EACjBL,OAAOD,KAAKod,GACPte,QAAOue,GAAWpd,OAAOqa,UAAUgD,eAAe9T,KAAK4T,EAAYC,KACnEnd,SAAQmd,GAAW9I,EAAG8I,GAAWD,EAAWC,IAAS,IAEvD9I,EACX,CAGH,CAnKD,CAAcvT,IAAAA,EAAI,I,wICiDX,MAAMuc,EACTjhB,YAAYE,GACRC,KAAK4E,OAAS7E,CAClB,CAIIA,YACA,OAAOC,KAAK4E,MAChB,CAEAxC,IAAO2e,GACEA,IACDA,EAAMC,GAAkBA,GAE5B,IAAIvB,EAAYsB,EAAG/gB,KAAKD,OACxB,OAAO,IAAI+gB,EAAMrB,EACrB,CAEAxd,QAAW8e,GACP,IAAI1G,EAAqBra,KAAKoC,IAAI2e,GAClC,MAAO1G,aAAM,EAANA,EAAQta,iBAAiB+gB,GAC5BzG,EAASA,EAAOta,MAEpB,OAAOsa,CACX,EASJ,MAAalV,UAAoB2b,EAK7BjhB,YAAYE,GACR4E,MAAM5E,EACV,CAEIA,YACA,OAAIC,KAAK4E,kBAAkBkc,EAChB9gB,KAAK4E,OAAO3C,UAAUlC,MAE1BC,KAAK4E,MAChB,CAEAa,oBAA8C1F,GAC1C,OAAW,IAAIoF,EAASpF,EAC5B,CAGAiH,WACI,YAAO,IAAsBhH,KAAKD,OAAS,MAAQC,KAAKD,KAC5D,CAKAwG,UAAUuG,GACN,IAAIhI,EAAS9E,KAAKgH,WAIlB,OAHKlC,GAAUgI,GACXA,EAAgBC,KAAK/M,KAAMA,OAEvB8E,CACZ,CAEAkI,cAAcF,EAA6C,UAGvD,OADA9M,KAAKuG,UAAUwG,KAAK/M,KAAM8M,GACnB9M,IACX,CAEAwH,OAAOkK,GACH,OAAI1R,KAAKuG,YACEvG,KAGU,MAAb0R,EACOvM,EAASL,OAEb9E,KAAKiC,SAAQ,IAAMyP,GAElC,CAOAX,WAAWzB,GACP,OAAItP,KAAKuG,YACEvG,KAEAA,KAAKiC,QAAQqN,EAE5B,CAMArN,QAAW8e,GACP,IAAIlc,EAAMF,MAAM1C,QAAQ8e,GACxB,OAAMlc,aAAeM,EAICN,EAAI5C,UAHfkD,EAASJ,aAAaF,EAAI9E,MAIzC,CAMA8F,SAAYtF,GAERA,EAAMP,KAAKoG,kBAAkB7F,GAE7B,IAAI0gB,EAA4BjhB,KAChC,IAAK,IAAImB,EAAM,EAAGA,EAAMZ,EAAIH,OAAQe,IAAO,CACvC,IAAIqB,EAAUxC,KAAKsB,OAAOf,EAAIY,IAC1BsB,EAASzC,KAAKqB,WAAWd,EAAIY,IAEjC,GAAgB,KAAZqB,GAAkBC,GAAU,GAE5B,GADAwe,EAAajhB,KAAK+F,WAAWhB,aAAekc,EAAWlhB,iBAAiBU,MAAiBwgB,EAAWlhB,MAAMK,OAASqC,EAAS,KAAOwe,EAAWlhB,MAAM0C,GAAnE,MAC7Ewe,EAAWja,WACX,OAAOia,OAGR,GAAIze,GAAWC,GAAU,EAAzB,CACH,GAAIwe,EAAWC,aAAa1e,GAASwE,WACjC,OAAOia,EAGX,GADAA,EAAcA,EAAWC,aAAa1e,GAASzC,iBAAiBU,MAAST,KAAK+F,WAAWhB,aAAakc,EAAWC,aAAa1e,GAASzC,MAAM0C,IAAWzC,KAAK+F,WAAWjB,OACpKmc,EAAWja,WACX,OAAOia,C,KANR,CAaP,GAFIA,EAAaA,EAAWC,aAAa1e,GAErCye,EAAWja,WACX,OAAOia,EACAxe,GAAU,IACjBwe,EAAajhB,KAAK+F,WAAWhB,aAAakc,EAAWlhB,MAAM0C,I,EAGnE,OAAOwe,CACX,CASAE,MAAMJ,GACF,OAAI/gB,KAAKgH,YAGF+Z,EAAG/gB,KAAKD,MACnB,CASAiG,IAAOlE,EAAkBqD,EAASL,QAC9B,OAAI9E,KAAKgH,WACEhH,KAAK+F,WAAWhB,aAAajD,GAAYG,UAG7CjC,KAAK+F,WAAWhB,aAAa/E,KAAKD,OAAOkC,SACpD,CAEAiE,SACI,OAAOnD,KAAKE,UAAUjD,KAAKD,MAC/B,CASUgG,WACN,OAAOZ,CACX,CAGU9D,WAAWd,GACjB,IAAIgB,EAAQhB,EAAIiB,QAAQ,KACpBE,EAAMnB,EAAIiB,QAAQ,KACtB,OAAID,GAAS,GAAKG,EAAM,GAAKH,EAAQG,EAC1BC,SAASpB,EAAIkB,UAAUF,EAAQ,EAAGG,KAEjC,CAEhB,CAGUJ,OAAOf,GACb,IAAIgB,EAAQhB,EAAIiB,QAAQ,KAExB,OAAID,GAAS,EACFhB,EAAIkB,UAAU,EAAGF,GAEjBhB,CAEf,CAOA2gB,aAAgB3gB,GACZ,OAAIP,KAAKgH,WACEhH,KAAK+F,WAAWjB,OAEpB9E,KAAK+F,WAAWhB,aAAa/E,KAAKD,MAAMQ,IAAM0B,SACzD,CAcAlB,QAAWqgB,GACP,GAAIphB,KAAKgH,WACL,OAAO7B,EAASL,OAEpB,IACI,OAAOK,EAASJ,aAAaqc,EAASphB,KAAKD,O,CAC7C,MAAOyU,GACL,OAAOrP,EAASL,M,CAExB,CAGUsB,kBAAkB7C,GACxB,OAAO,IAAI,EAAAvB,eAAeuB,GACrBtB,SAAQ4B,GACE,IAAI,EAAA7B,eAAe6B,EAAK1B,MAAM,aAChCC,KAAIyB,KAEwB,IADzBA,EAAOA,EAAK8L,QAAQ,aAAc,KAC1BnO,QAAQ,OAAoC,GAAtBqC,EAAKrC,QAAQ,OACvCqC,EAAO,IAAMA,IAEQ,GAAtBA,EAAKrC,QAAQ,OAAoC,GAAtBqC,EAAKrC,QAAQ,OACvCqC,GAAc,KAEXA,MAG3B,EA3OO,EAAAiB,OAASK,EAASJ,aAAa,MAyP1C,MAAaN,UAAyBU,EAOlCtF,YAAY6E,EAAegD,EAAmB,SAC1C/C,MAAMD,GAEN1E,KAAKO,IAAMmH,CACf,CAEI3H,YACA,OAAOC,KAAK4E,OAAY5E,KAAK4E,OAAO5E,KAAKO,KAAO,IACpD,CAEIR,UAAMoH,GACDnH,KAAK4E,SAGV5E,KAAK4E,OAAO5E,KAAKO,KAAO4G,EAC5B,CAEAK,OAAOkK,GACH,IAAI2P,EAAc,CAAC,EAEnB,OADAA,EAAYrhB,KAAKO,KAAOmR,EACjB1R,KAAKuG,YAAcvG,KAAO,IAAIyE,EAAc4c,EAAarhB,KAAKO,IACzE,CAEAwQ,WAAWzB,GACP,GAAItP,KAAKuG,YACL,OAAOvG,KACJ,CACH,IAAIqhB,EAAc,CAAC,EAEnB,OADAA,EAAYrhB,KAAKO,KAAO+O,IACjB,IAAI7K,EAAc4c,EAAarhB,KAAKO,I,CAEnD,CASUwF,WACN,OAAOtB,CACX,CAEAgB,oBAA6C1F,EAAa2H,EAAmB,SACzE,OAAa,IAAIjD,EAAiB1E,EAAO2H,EAC7C,EAlDO,EAAA5C,OAASL,EAAcM,aAAa,K,2DCzUnCuc,E,eAAZ,SAAYA,GACR,wBACA,0BACH,CAHD,CAAYA,IAAAA,EAAgB,I,oHCbrB3a,EAAW,EAAApC,KAAA,SAQX,MAAMgd,UAAiB,EAAAzZ,SAE1BjI,YAAYkI,EAAwCyZ,EAAkB,YAElE,IAaIC,EAAYC,IACZ,GAAW,MAAPA,EACA,OAAO,KAMX,OAJ2B,EAAAnd,KAAA,iBACvB,IAAM,KAAK,SAAYod,aACvB,IAnBqB,MAGzB,IAAIC,EAAS,IAAIC,cAAc,oBAG/B,OAFAD,EAAO/I,OAAQ,EAEH,CACRiJ,gBAAiB,CAAC7N,EAAc8N,IACrBH,EAAOI,QAAQ/N,GAE7B,EASoBgO,KACnBliB,MACe+hB,gBAAgBJ,EAAWF,EAAQ,EAGpD7a,EAASoB,GACTpD,MAAM8c,EAAiB1Z,IAEvBpD,MAAMoD,EAEd,CAEAma,mBACI,OAAOliB,KAAKmI,iBAAiB,eAAe5B,WAChD,CAEA4b,WACI,IAAInhB,EAAM,GAOV,OANAhB,KAAKoJ,UAAU6D,I,YACX,IAAImV,EAAgF,QAAlE,EAAyC,QAA1C,EAA2B,QAA3B,EAAY,QAAZ,GAAC,gBAAW,eAAEC,qBAAa,eAAExiB,qBAAa,eAAEyiB,kBAAkBrV,UAAK,QAAIA,aAAI,EAAJA,EAAMyU,IACxFU,GACFphB,EAAIL,KAAKyhB,E,IAGVphB,EAAIoL,KAAK,GACpB,CAEAmW,gBAAgBC,GACZ,OAAOxiB,KAAKmI,iBAAiB,eAAegO,YAAYqM,EAC5D,CAEA/c,gBAAgBgd,GACZ,OAAO,IAAIlB,EAASkB,EACxB,CAEAhd,iBAAiBgd,GACb,OAAO,IAAIlB,EAASkB,EAAK,YAC7B,CAEAhd,kBAAkBgd,EAAaC,EAAoB,YAC/C,OAAO,IAAInB,EAASkB,EAAKC,EAC7B,EAGG,MAAMC,EAAKpB,C,GC7FdqB,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CCrBAJ,EAAoBO,EAAI,SAASH,EAASI,GACzC,IAAI,IAAI9iB,KAAO8iB,EACXR,EAAoBS,EAAED,EAAY9iB,KAASsiB,EAAoBS,EAAEL,EAAS1iB,IAC5EiD,OAAO+f,eAAeN,EAAS1iB,EAAK,CAAEijB,YAAY,EAAMxd,IAAKqd,EAAW9iB,IAG3E,ECPAsiB,EAAoB7D,EAAI,WACvB,GAA0B,iBAAfF,WAAyB,OAAOA,WAC3C,IACC,OAAO9e,MAAQ,IAAIwgB,SAAS,cAAb,EAChB,CAAE,MAAOhM,GACR,GAAsB,iBAAXuK,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxB8D,EAAoBS,EAAI,SAASzD,EAAK4D,GAAQ,OAAOjgB,OAAOqa,UAAUgD,eAAe9T,KAAK8S,EAAK4D,EAAO,ECCtGZ,EAAoBa,EAAI,SAAST,GACX,oBAAXnI,QAA0BA,OAAO6I,aAC1CngB,OAAO+f,eAAeN,EAASnI,OAAO6I,YAAa,CAAE5jB,MAAO,WAE7DyD,OAAO+f,eAAeN,EAAS,aAAc,CAAEljB,OAAO,GACvD,E","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/AssocArray.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Config.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * various helpers to deal with associative\n * arrays. If someone feels uncomfortable using\n * The config system, this is similar!\n */\nimport {IValueHolder} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * A nop as assign functionality (aka ignore assign)\n */\nclass IgnoreAssign implements IValueHolder<any>  {\n    constructor(private parent: any) {}\n\n    set value(value: any | Array<any>) {\n    }\n    get value(): any | Array<any> {\n        return this.parent;\n    }\n};\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assign<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return new IgnoreAssign(target);\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let assigner: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            lastPathItem.target[lastPathItem.key] = value;\n        }\n\n        get value(): T | Array<T> {\n            return lastPathItem.target[lastPathItem.key];\n        }\n    })();\n    return assigner;\n}\n\n\nexport function append<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return new IgnoreAssign(target);\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let appender: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            if(!Array.isArray(value)) {\n                value = [value];\n            }\n            if(!lastPathItem.target[lastPathItem.key]) {\n                lastPathItem.target[lastPathItem.key] = value\n            } else {\n                if(!Array.isArray(lastPathItem.target[lastPathItem.key])) {\n                    lastPathItem.target[lastPathItem.key] = [lastPathItem.target[lastPathItem.key]];\n                }\n                lastPathItem.target[lastPathItem.key].push(...value);\n            }\n        }\n    })();\n    return appender;\n}\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assignIf<T>(condition: boolean, target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if ((!condition) || accessPath.length < 1) {\n        return new IgnoreAssign(target);\n    }\n    return assign(target, ...accessPath);\n}\n\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function appendIf<T>(condition: boolean, target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if ((!condition) || accessPath.length < 1) {\n        return new IgnoreAssign(target);\n    }\n    return append(target, ...accessPath);\n}\n\nexport function resolve<T>(target, ...accessPath: string[]): T | null {\n    let ret = null;\n    accessPath = flattenAccessPath(accessPath);\n    let currPtr = target;\n    for(let cnt = 0; cnt < accessPath.length; cnt++) {\n        let accessKeyIndex: number | string = accessPath[cnt];\n        accessKeyIndex = arrayIndex(accessKeyIndex) != -1 ? arrayIndex(accessKeyIndex) : accessKeyIndex;\n        currPtr = currPtr?.[accessKeyIndex];\n        if('undefined' == typeof currPtr) {\n            return null;\n        }\n        ret = currPtr;\n    }\n    return currPtr;\n}\n\n\nfunction keyVal(key: string): string {\n    let start = key.indexOf(\"[\");\n\n    if (start >= 0) {\n        return key.substring(0, start);\n    } else {\n        return key;\n    }\n}\n\nfunction arrayIndex(key: string): number {\n    let start = key.indexOf(\"[\");\n    let end = key.indexOf(\"]\");\n    if (start >= 0 && end > 0 && start < end) {\n        return parseInt(key.substring(start + 1, end));\n    } else {\n        return -1;\n    }\n}\n\nfunction isArrayPos(currKey: string, arrPos: number): boolean {\n    return currKey === \"\" && arrPos >= 0;\n}\n\nfunction isNoArray(arrPos: number): boolean {\n    return arrPos == -1;\n}\n\nfunction alloc(arr: Array<any>, length: number, defaultVal = {}) {\n    let toAdd = [];\n    toAdd.length = length;\n    toAdd[length - 1] = defaultVal;\n    arr.push(...toAdd);\n}\n\n\nfunction flattenAccessPath(accessPath: string[]) {\n    return new Es2019Array(...accessPath).flatMap(path => path.split(\"[\"))\n        .map(path => path.indexOf(\"]\") != -1 ? \"[\" + path : path)\n        .filter(path => path != \"\");\n}\n\n/**\n * builds up a path, only done if no data is present!\n * @param target\n * @param accessPath\n * @returns the last assignable entry\n */\nexport function buildPath(target, ...accessPath: string[]) {\n    accessPath = flattenAccessPath(accessPath);\n    //we now have a pattern of having the array accessors always in separate items\n    let parentPtr = target;\n    let parKeyArrPos = null;\n    let currKey = null;\n    let arrPos = -1;\n\n    for (let cnt = 0; cnt < accessPath.length; cnt++) {\n        currKey = keyVal(accessPath[cnt]);\n        arrPos = arrayIndex(accessPath[cnt]);\n        //it now is either key or arrPos\n        if (arrPos != -1) {\n            //case root(array)[5] -> root must be array and allocate 5 elements\n            //case root.item[5] root.item must be array and of 5 elements\n            if(!Array.isArray(parentPtr)) {\n                throw Error(\"Associative array referenced as index array in path reference\");\n            }\n\n            //we need to look ahead for proper allocation\n            //not end reached\n            let nextArrPos = -1;\n            if(cnt < accessPath.length - 1) {\n                nextArrPos = arrayIndex(accessPath[cnt + 1])\n            }\n            let dataPresent = 'undefined' != typeof parentPtr?.[arrPos];\n            //no data present check here is needed, because alloc only reserves if not present\n            alloc(parentPtr, arrPos + 1, nextArrPos != -1 ?[]: {});\n            parKeyArrPos = arrPos;\n            //we now go to the reserved element\n            if(cnt == accessPath.length - 1) {\n                parentPtr[arrPos] = (dataPresent) ? parentPtr[arrPos] : null;\n            } else {\n                parentPtr = parentPtr[arrPos];\n            }\n        } else {\n            if(Array.isArray(parentPtr)) {\n                throw Error(\"Index array referenced as associative array in path reference\");\n            }\n            //again look ahead whether the next value is an array or assoc array\n            let nextArrPos = -1;\n            if(cnt < accessPath.length - 1) {\n                nextArrPos = arrayIndex(accessPath[cnt + 1])\n            }\n            parKeyArrPos = currKey;\n            let dataPresent = 'undefined' != typeof parentPtr?.[currKey];\n            if(cnt == accessPath.length - 1) {\n                if(!dataPresent) {\n                    parentPtr[currKey] = null;\n                }\n            } else {\n                if(!dataPresent) {\n                    parentPtr[currKey] = nextArrPos == -1 ? {} : [];\n                }\n                parentPtr = parentPtr[currKey];\n            }\n        }\n    }\n\n    return {target: parentPtr, key: parKeyArrPos};\n\n}\n\nexport function deepCopy(fromAssoc: {[key: string]: any}): {[key: string]: any} {\n    return JSON.parse(JSON.stringify(fromAssoc));\n}\n\n/**\n * simple left to right merge\n *\n * @param assocArrays\n */\nexport function simpleShallowMerge(...assocArrays) {\n   return shallowMerge(true, false, ...assocArrays);\n}\n\nfunction _appendWithOverwrite(withAppend: boolean, target: { [p: string]: any }, key, arr, toAssign) {\n    if (!withAppend) {\n        target[key] = arr[key];\n    } else {\n        //overwrite means in this case, no double entries!\n        //we do not a deep compare for now a single value compare suffices\n        if ('undefined' == typeof target?.[key]) {\n            target[key] = toAssign\n        } else if (!Array.isArray(target[key])) {\n\n            let oldVal = target[key];\n            let newVals = [];\n            //TODO maybe deep deep compare here, but on the other hand it is\n            //shallow\n            toAssign.forEach(item => {\n                if (oldVal != item) {\n                    newVals.push(item);\n                }\n            });\n            target[key] = new Es2019Array(...[]);\n            target[key].push(oldVal);\n            target[key].push(...newVals);\n        } else {\n            let oldVal = target[key];\n            let newVals = [];\n            //TODO deep compare here\n            toAssign.forEach(item => {\n                if (oldVal.indexOf(item) == -1) {\n                    newVals.push(item);\n                }\n            });\n\n            target[key].push(...newVals);\n        }\n    }\n}\n\nfunction _appendWithoutOverwrite(withAppend: boolean, target: { [p: string]: any }, key, arr, toAssign) {\n    if (!withAppend) {\n        return;\n    } else {\n        //overwrite means in this case, no double entries!\n        //we do not a deep compare for now a single value compare suffices\n        if ('undefined' == typeof target?.[key]) {\n            target[key] = toAssign\n        } else if (!Array.isArray(target[key])) {\n            let oldVal = target[key];\n            target[key] = new Es2019Array(...[]);\n            target[key].push(oldVal);\n            target[key].push(...toAssign);\n        } else {\n            target[key].push(...toAssign);\n        }\n    }\n}\n\n/**\n * Shallow merge as in config, but on raw associative arrays\n *\n * @param overwrite overwrite existing keys, if they exist with their subtrees\n * @param withAppend if a key exist append the values or drop them\n * Combination overwrite withappend filters doubles out of merged arrays\n * @param assocArrays array of assoc arres reduced right to left\n */\nexport function shallowMerge(overwrite = true, withAppend = false, ...assocArrays) {\n    let target: {[key: string]: any} = {};\n    new Es2019Array(...assocArrays).map(arr => {\n        return {arr, keys: Object.keys(arr)};\n    }).forEach(({arr, keys}) => {\n        keys.forEach(key => {\n            let toAssign = arr[key];\n            if(!Array.isArray(toAssign) && withAppend) {\n                toAssign = new Es2019Array(...[toAssign]);\n            }\n            if(overwrite || !target?.[key]) {\n                _appendWithOverwrite(withAppend, target, key, arr, toAssign);\n            } else if(!overwrite && target?.[key]) {\n                _appendWithoutOverwrite(withAppend, target, key, arr, toAssign);\n            }\n\n\n\n        })\n    });\n    return target;\n}\n\n//TODO test this, slightly altered from https://medium.com/@pancemarko/deep-equality-in-javascript-determining-if-two-objects-are-equal-bf98cf47e934\n//he overlooked some optimizations and a shortcut at typeof!\nexport function deepEqual(obj1, obj2) {\n    if(obj1 == obj2) {\n        return false;\n    }\n    if(typeof obj1 != typeof obj2) {\n        return false;\n    }\n    if(Array.isArray(obj1) && Array.isArray(obj2)) {\n        if(obj1.length != obj2.length) {\n            return;\n        }\n        //arrays must be equal, order as well, there is no way around it\n        //this is the major limitation we have\n        return obj1.every((item, cnt) => deepEqual(item, obj2[cnt]));\n    }\n    //string number and other primitives are filtered out here\n    if(\"object\" == typeof obj1 && \"object\" == typeof obj2) {\n        let keys1 = Object.keys(obj1);\n        let keys2 = Object.keys(obj2);\n        if(keys1.length != keys2.length) {\n            return false;\n        }\n        return keys1.every(key => keys2.indexOf(key) != -1) &&\n        keys1.every(key => deepEqual(obj1[key], obj2[key]));\n    }\n    return false;\n    //done here no match found\n}\n\n","import {Es2019Array} from \"./Es2019Array\";\nimport {IValueHolder, Optional, ValueEmbedder} from \"./Monad\";\nimport {Lang} from \"./Lang\";\nimport objAssign = Lang.objAssign;\nimport {append, appendIf, assign, assignIf, resolve, shallowMerge} from \"./AssocArray\";\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\nexport type ConfigDef = { [key: string]: any };\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        //shallow merge must be mutable so we have to remap\n        let newThis = shallowMerge(overwrite, withAppend, this.value, other.value);\n        if (Array.isArray(this._value)) {\n            this._value.length = 0;\n            this._value.push(...(newThis as any));\n        } else {\n            Object.getOwnPropertyNames(this._value).forEach(key => delete this._value[key]);\n            Object.getOwnPropertyNames(newThis).forEach(key => this._value[key] = newThis[key]);\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        return append(this._value, ...accessPath);\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        return appendIf(condition, this._value, ...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        return assign(this.value, ...accessPath);\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return assignIf(condition, this._value, ...accessPath);\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(resolve(this.value, ...accessPath));\n    }\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n     * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if (!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if (this.isArray(arrPos)) {\n                if (currKey != \"\") {\n                    currAccessPos = Array.isArray(currAccessPos.value) ?\n                        Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !!(item?.[currKey] ?? false);\n                        })?.[currKey]) :\n                    Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if (!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if (currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IValueHolder, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\n\nimport {ICollector, IStreamDataSource, ITERATION_STATUS} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport {_global$} from \"./Global\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport objToArray = Lang.objToArray;\nimport {append, assign, simpleShallowMerge} from \"./AssocArray\";\nimport {IDomQuery} from \"./IDomQuery\";\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\nclass NonceValueEmbedder extends ValueEmbedder<string> {\n\n    constructor(private rootElems: HTMLElement[]) {\n        super(rootElems?.[0], \"nonce\");\n    }\n\n    isAbsent(): boolean {\n        const value = this.value;\n        return 'undefined' == typeof value || '' == value;\n    }\n\n    get value(): string {\n        return (this?.rootElems?.[0] as HTMLElement)?.nonce ?? (this?.rootElems?.[0] as HTMLElement)?.getAttribute(\"nonce\")\n    }\n\n\n    set value(newVal: string) {\n        if (!this?.rootElems?.length) {\n            return;\n        }\n\n        this.rootElems.forEach((rootElem: HTMLElement) => {\n            if(\"undefined\" != typeof rootElem?.nonce) {\n                rootElem.nonce = newVal\n            } else {\n                rootElem.setAttribute(\"nonce\", newVal);\n            }\n        });\n\n    }\n}\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\n\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    get stream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    get lazyStream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return new Es2019Array(...this.values).every(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n\n    get asArray(): DomQuery[] {\n        // filter not supported by IE11\n        let items = new Es2019Array(...this.rootNode).filter(item => {\n            return item != null\n        }).map(item => {\n            return DomQuery.byId(item)\n        });\n        return items as DomQuery[];\n    }\n\n    get offsetWidth(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetHeight(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetLeft(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetTop(): number {\n        return new Es2019Array(this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as any).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get asNodeArray(): Array<Element> {\n        return new Es2019Array(...this.rootNode.filter(item => item != null));\n    }\n\n    get nonce(): ValueEmbedder<string> {\n        return new NonceValueEmbedder(this.rootNode as HTMLElement[]);\n    }\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/<!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(...\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(((item) => id == item.id) as any)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = new Es2019Array(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce((reduction: any, item: Element) => reduction.concat([item]), res);\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        return this.asArray\n            .some(item => this._mozMatchesSelector(item.getAsElem(0).value, selector));\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        new Es2019Array(...this.rootNode)\n            .forEach((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    case \"nonce\":\n                        // nonce will be handled below!\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n\n        //special nonce handling\n        sourceItem.nonce.isPresent(() => {\n            this.nonce.value = sourceItem.nonce.value;\n        });\n\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                new Es2019Array(...scriptsToProcess).forEach(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.asArray\n                .flatMap(item => [...item.values])\n                .sort((node1, node2) => node2.compareDocumentPosition(node1) - 3) // preceding 2, following == 4)\n                .forEach(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n            const _toReplace = DomQuery.byId(toReplace);\n            const tagName = _toReplace.tagName.orElse(\"\").value;\n            let newElement = DomQuery.fromMarkup(`<${tagName.toLowerCase()} />`);\n            newElement = newElement.copyAttrs(_toReplace);\n            newElement.innerHTML = toReplace.innerHTML;\n            // css suffices a simple replace to get it eval-ed, no need\n            // for a full head replace\n            _toReplace.replace(newElement);\n        };\n\n        const cssElems: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        cssElems.asArray\n            .flatMap(item => [...item.values])\n            // sort to make sure the execution order is correct\n            // this is needed because we mix 2 queries together\n            // -3 is needed due to the compareDocumentPosition return value\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .forEach(item => execCss(item as HTMLElement));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n\n        let finalOptions: any = {\n            bubbles: true, cancelable: true\n        }\n        finalOptions = simpleShallowMerge(finalOptions, options);\n\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Object.keys(finalOptions).forEach(key => event[key] = finalOptions[key]);\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\");\n    }\n\n    innerText(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => {\n                return [text1, text2].join(joinString)\n            }, \"\");\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = {}): {[key: string]: any} {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = simpleShallowMerge(toMerge);\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                append(target, name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        assign(target, name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        append(target, name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res = this.asArray\n            .flatMap( item => {\n                return item.childNodes.asArray;\n            })\n            .filter(item => {\n                return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n            })\n            .reduce((reduced: Array<any>, item: DomQuery) => {\n                reduced.push((<any>item?.value?.value)?.data ?? \"\");\n                return reduced;\n            }, []);\n        /*let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;*/\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): DomQuery {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): DomQuery {\n        let domQueries = this.asArray;\n        const ret = new DomQuery(...domQueries.concat(toAttach.asArray));\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return new DomQuery(...ret.asArray.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }));\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(...objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\nclass Es2019Array_<T>  extends Array<T>{\n\n    _another: T[];\n\n    constructor(...another: T[]) {\n        super(...another);\n        if((another as any)._another)  {\n            this._another = (another as any)._another;\n        } else {\n            this._another = another;\n        }\n\n        //for testing it definitely runs into this branch because we are on es5 level\n        //if (!(<any>Array.prototype).flatMap) {\n            this.flatMap = (flatMapFun) => this._flatMap(flatMapFun) as any;\n        //}\n        //if (!(<any>Array.prototype).flat) {\n            this.flat = (flatLevel: number = 1) => this._flat(flatLevel);\n        //}\n    }\n\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] {\n        const ret = Array.prototype.map.call(this._another, callbackfn, thisArg);\n        return new (_Es2019Array as any) (... ret);\n    }\n\n    concat(...items): T[] {\n        const ret = Array.prototype.concat.call(this._another, ...items);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    reverse(): T[] {\n        const ret = Array.prototype.reverse.call(this._another);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    slice(start?: number, end?: number): T[] {\n        const ret = Array.prototype.slice.call(this._another, start, end);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        const ret = Array.prototype.splice.call(this._another, start, deleteCount);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        const ret = Array.prototype.filter.call(this._another, predicate, thisArg);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n        const ret = Array.prototype.reduce.call(this._another, callbackfn, initialValue);\n        return ret;\n    }\n\n    /*reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T {\n        const ret = Array.prototype.reduceRight.call(callbackfn, initialValue);\n        return ret;\n    }*/\n\n    private _flat(flatDepth = 1) {\n        return this._flatResolve(this._another, flatDepth);\n    }\n\n    private _flatResolve(arr, flatDepth = 1) {\n        //recursion break\n        if (flatDepth == 0) {\n            return arr;\n        }\n        let res = [];\n\n        let reFlat = item => {\n            item = Array.isArray(item) ? item : [item];\n            let mapped = this._flatResolve(item, flatDepth - 1);\n            res = res.concat(mapped);\n        };\n        arr.forEach(reFlat)\n\n        return new Es2019Array(...res);\n    }\n\n    private _flatMap(mapperFunction: Function): any {\n        let res = this.map(item => mapperFunction(item));\n        return this._flatResolve(res);\n    }\n}\n\n//let _Es2019Array = function<T>(...data: T[]) {};\n\n//let oldProto = Es2019Array.prototype;\n\nexport function _Es2019Array<T>(...data: T[]): Es2019Array_<T> {\n    let ret = new Es2019Array_<T>(...data);\n    let proxied = new Proxy<Es2019Array_<T>>(ret, {\n        get(target: Es2019Array_<unknown>, p: string | symbol, receiver: any): any {\n            if(\"symbol\" == typeof p) {\n\n                return target._another[p];\n            }\n            if(!isNaN(parseInt(p as string))) {\n                return target._another[p];\n            } else {\n                return target[p];\n            }\n        },\n\n        set(target, property, value): boolean {\n            target[property] = value;\n            target._another[property] = value;\n            return true;\n        }\n\n    });\n    return proxied;\n};\n\n/**\n * this is the switch between normal array and our shim\n * the shim is only provided in case the native browser\n * does not yet have flatMap support on arrays\n */\nexport var Es2019Array: any = (Array.prototype.flatMap) ? function<T>(...data: T[]): T[] {\n    // sometimes the typescript compiler produces\n    // an array without flatmap between boundaries (the result produces True for Array.isArray\n    // but has no flatMap function, could be a node issue also or Typescript!\n    // we remap that (could be related to: https://github.com/microsoft/TypeScript/issues/31033\n    // the check and remap fixes the issue which should not exist in the first place\n    return data?.flatMap ? data : _Es2019Array(...data);\n} : _Es2019Array;","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return new Es2019Array(...pack.concat(Array.prototype.slice.call(obj, offset)));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport {Config} from \"./Config\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\nimport {_global$} from \"./Global\";\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new (_global$()).DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (_global$())?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["IgnoreAssign","constructor","parent","value","this","assign","target","accessPath","length","lastPathItem","buildPath","key","append","Array","isArray","push","assignIf","condition","appendIf","resolve","ret","flattenAccessPath","currPtr","cnt","accessKeyIndex","arrayIndex","keyVal","start","indexOf","substring","end","parseInt","alloc","arr","defaultVal","toAdd","Es2019Array","flatMap","path","split","map","filter","parentPtr","parKeyArrPos","currKey","arrPos","Error","nextArrPos","dataPresent","deepCopy","fromAssoc","JSON","parse","stringify","simpleShallowMerge","assocArrays","shallowMerge","overwrite","withAppend","keys","Object","forEach","toAssign","oldVal","newVals","item","_appendWithOverwrite","_appendWithoutOverwrite","deepEqual","obj1","obj2","every","keys1","keys2","objAssign","Lang","ConfigEntry","ValueEmbedder","rootElem","super","_value","val","absent","fromNullable","CONFIG_VALUE","CONFIG_ANY","Config","Optional","root","configDef","shallowCopy","shallowCopy$","deepCopy$","static","other","newThis","getOwnPropertyNames","getIf","assertAccessPath","getClass","get","delete","toJson","setVal","preprocessKeys","currAccessPos","find","isPresent","isNoArray","ALLOWED_SUBMITTABLE_ELEMENTS","trim","isString","eqi","objToArray","NonceValueEmbedder","rootElems","isAbsent","nonce","getAttribute","newVal","setAttribute","ElementAttribute","element","name","orElse","values","valueKey","Style","style","DEFAULT_WHITELIST","DomQuery","rootNode","pos","_limits","foundElement","querySelectorAll","getAsElem","allElems","global","stream","lazyStream","id","tagName","nodeName","isTag","toLowerCase","type","inputValue","nodeId","checked","el","newChecked","eachElem","elements","deepElements","querySelectorAllDeep","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","disabled","attr","removeAttribute","childNodes","childNodeArr","concat","asArray","byId","offsetWidth","elem","reduce","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","asNodeArray","selector","document","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","code","globalEval","globalEvalSticky","markup","doc","implementation","createHTMLDocument","lowerMarkup","search","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","node","parentNode","removeChild","closest","_closestDeep","_closest","includeRoot","res","subItems","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","first","newInnerHTML","dispatchEvent","evt","retArr","innerHtml","newInnerHtml","filterSelector","matched","_mozMatchesSelector","some","nodeSelector","selectorStage","func","len","firstElem","lastElem","each","replace","toReplace","asElem","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","insertBefore","insertAfter","last","lastNode","reArr","head","getElementsByTagName","script","newScriptElement","appendChild","applyNonce","appendTo","orElseLazy","loadScriptEval","src","delay","_loadScriptEval","loadScriptEvalSticky","toInsertParams","existingItem","existingElement","nextSibling","insertElem","elseValue","allParents","firstParent","parentsWhileMatch","host","copyAttrs","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","fromMarkup","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","sticky","whitelisted","evalCollectedScripts","scriptsToProcess","joinedScripts","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","sort","node1","node2","compareDocumentPosition","e","console","error","message","description","_toReplace","newElement","execCss","click","fireEvent","addEventListener","listener","options","removeEventListener","eventName","finalOptions","bubbles","cancelable","ownerDocument","nodeType","EventClass","Event","MouseEvent","KeyboardEvent","event","synthetic","createEventObject","textContent","joinString","text1","text2","encodeFormElement","toMerge","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","from","cDATAAsString","reduced","data","subNodes","to","Math","min","limits","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","current","reset","attachShadow","params","mode","shadowElement","async","childList","subtree","timeout","interval","Promise","success","observer","MUT_ERROR","findElement","MutationObserver","mutTimeout","setTimeout","disconnect","callback","mutationList","mut","clearTimeout","observableOpts","observe","setInterval","clearInterval","waitUntilDom","shadowElements","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","domQueries","idx","notFound","prependTo","prepend","foundNodes","selectors","cnt2","levelSelector","toMatch","prototypeOwner","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","i","srcNode","createSourceNode","nonceCheck","marker","Date","now","random","attrName","DomQueryCollector","collect","finalValue","DQ","DQ$","Es2019Array_","another","_another","flatMapFun","_flatMap","flat","flatLevel","_flat","callbackfn","thisArg","_Es2019Array","prototype","items","reverse","splice","deleteCount","predicate","initialValue","flatDepth","_flatResolve","mapperFunction","Proxy","p","receiver","isNaN","set","property","_global$","globalThis","window","g","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","equalsIgnoreCase","source","destination","finalDest","assertType","probe","theType","isFunc","Function","theArgs","TypeError","nextSource","nextKey","hasOwnProperty","Monad","fn","inVal","currentPos","getIfPresent","match","resolver","alternative","ITERATION_STATUS","XMLQuery","docType","parseXML","xml","DOMParser","parser","ActiveXObject","parseFromString","contentType","loadXML","createIe11DomQueryShim","isXMLParserError","toString","serialized","XMLSerializer","serializeToString","parserErrorText","joinstr","txt","parseType","XQ","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","prop","r","toStringTag"],"sourceRoot":""}