{"version":3,"file":"index.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/AssocArray.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Config.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Messaging.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/TagBuilder.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///external amd \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/CryptoExtensions.ts"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * various helpers to deal with associative\n * arrays. If someone feels uncomfortable using\n * The config system, this is similar!\n */\nimport {IValueHolder} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * A nop as assign functionality (aka ignore assign)\n */\nclass IgnoreAssign implements IValueHolder<any>  {\n    constructor(private parent: any) {}\n\n    set value(value: any | Array<any>) {\n    }\n    get value(): any | Array<any> {\n        return this.parent;\n    }\n};\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assign<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return new IgnoreAssign(target);\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let assigner: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            lastPathItem.target[lastPathItem.key] = value;\n        }\n\n        get value(): T | Array<T> {\n            return lastPathItem.target[lastPathItem.key];\n        }\n    })();\n    return assigner;\n}\n\n\nexport function append<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return new IgnoreAssign(target);\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let appender: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            if(!Array.isArray(value)) {\n                value = [value];\n            }\n            if(!lastPathItem.target[lastPathItem.key]) {\n                lastPathItem.target[lastPathItem.key] = value\n            } else {\n                if(!Array.isArray(lastPathItem.target[lastPathItem.key])) {\n                    lastPathItem.target[lastPathItem.key] = [lastPathItem.target[lastPathItem.key]];\n                }\n                lastPathItem.target[lastPathItem.key].push(...value);\n            }\n        }\n    })();\n    return appender;\n}\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assignIf<T>(condition: boolean, target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if ((!condition) || accessPath.length < 1) {\n        return new IgnoreAssign(target);\n    }\n    return assign(target, ...accessPath);\n}\n\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function appendIf<T>(condition: boolean, target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if ((!condition) || accessPath.length < 1) {\n        return new IgnoreAssign(target);\n    }\n    return append(target, ...accessPath);\n}\n\nexport function resolve<T>(target, ...accessPath: string[]): T | null {\n    let ret = null;\n    accessPath = flattenAccessPath(accessPath);\n    let currPtr = target;\n    for(let cnt = 0; cnt < accessPath.length; cnt++) {\n        let accessKeyIndex: number | string = accessPath[cnt];\n        accessKeyIndex = arrayIndex(accessKeyIndex) != -1 ? arrayIndex(accessKeyIndex) : accessKeyIndex;\n        currPtr = currPtr?.[accessKeyIndex];\n        if('undefined' == typeof currPtr) {\n            return null;\n        }\n        ret = currPtr;\n    }\n    return currPtr;\n}\n\n\nfunction keyVal(key: string): string {\n    let start = key.indexOf(\"[\");\n\n    if (start >= 0) {\n        return key.substring(0, start);\n    } else {\n        return key;\n    }\n}\n\nfunction arrayIndex(key: string): number {\n    let start = key.indexOf(\"[\");\n    let end = key.indexOf(\"]\");\n    if (start >= 0 && end > 0 && start < end) {\n        return parseInt(key.substring(start + 1, end));\n    } else {\n        return -1;\n    }\n}\n\nfunction isArrayPos(currKey: string, arrPos: number): boolean {\n    return currKey === \"\" && arrPos >= 0;\n}\n\nfunction isNoArray(arrPos: number): boolean {\n    return arrPos == -1;\n}\n\nfunction alloc(arr: Array<any>, length: number, defaultVal = {}) {\n    let toAdd = [];\n    toAdd.length = length;\n    toAdd[length - 1] = defaultVal;\n    arr.push(...toAdd);\n}\n\n\nfunction flattenAccessPath(accessPath: string[]) {\n    return new Es2019Array(...accessPath).flatMap(path => path.split(\"[\"))\n        .map(path => path.indexOf(\"]\") != -1 ? \"[\" + path : path)\n        .filter(path => path != \"\");\n}\n\n/**\n * builds up a path, only done if no data is present!\n * @param target\n * @param accessPath\n * @returns the last assignable entry\n */\nexport function buildPath(target, ...accessPath: string[]) {\n    accessPath = flattenAccessPath(accessPath);\n    //we now have a pattern of having the array accessors always in separate items\n    let parentPtr = target;\n    let parKeyArrPos = null;\n    let currKey = null;\n    let arrPos = -1;\n\n    for (let cnt = 0; cnt < accessPath.length; cnt++) {\n        currKey = keyVal(accessPath[cnt]);\n        arrPos = arrayIndex(accessPath[cnt]);\n        //it now is either key or arrPos\n        if (arrPos != -1) {\n            //case root(array)[5] -> root must be array and allocate 5 elements\n            //case root.item[5] root.item must be array and of 5 elements\n            if(!Array.isArray(parentPtr)) {\n                throw Error(\"Associative array referenced as index array in path reference\");\n            }\n\n            //we need to look ahead for proper allocation\n            //not end reached\n            let nextArrPos = -1;\n            if(cnt < accessPath.length - 1) {\n                nextArrPos = arrayIndex(accessPath[cnt + 1])\n            }\n            let dataPresent = 'undefined' != typeof parentPtr?.[arrPos];\n            //no data present check here is needed, because alloc only reserves if not present\n            alloc(parentPtr, arrPos + 1, nextArrPos != -1 ?[]: {});\n            parKeyArrPos = arrPos;\n            //we now go to the reserved element\n            if(cnt == accessPath.length - 1) {\n                parentPtr[arrPos] = (dataPresent) ? parentPtr[arrPos] : null;\n            } else {\n                parentPtr = parentPtr[arrPos];\n            }\n        } else {\n            if(Array.isArray(parentPtr)) {\n                throw Error(\"Index array referenced as associative array in path reference\");\n            }\n            //again look ahead whether the next value is an array or assoc array\n            let nextArrPos = -1;\n            if(cnt < accessPath.length - 1) {\n                nextArrPos = arrayIndex(accessPath[cnt + 1])\n            }\n            parKeyArrPos = currKey;\n            let dataPresent = 'undefined' != typeof parentPtr?.[currKey];\n            if(cnt == accessPath.length - 1) {\n                if(!dataPresent) {\n                    parentPtr[currKey] = null;\n                }\n            } else {\n                if(!dataPresent) {\n                    parentPtr[currKey] = nextArrPos == -1 ? {} : [];\n                }\n                parentPtr = parentPtr[currKey];\n            }\n        }\n    }\n\n    return {target: parentPtr, key: parKeyArrPos};\n\n}\n\nexport function deepCopy(fromAssoc: {[key: string]: any}): {[key: string]: any} {\n    return JSON.parse(JSON.stringify(fromAssoc));\n}\n\n/**\n * simple left to right merge\n *\n * @param assocArrays\n */\nexport function simpleShallowMerge(...assocArrays) {\n   return shallowMerge(true, false, ...assocArrays);\n}\n\nfunction _appendWithOverwrite(withAppend: boolean, target: { [p: string]: any }, key, arr, toAssign) {\n    if (!withAppend) {\n        target[key] = arr[key];\n    } else {\n        //overwrite means in this case, no double entries!\n        //we do not a deep compare for now a single value compare suffices\n        if ('undefined' == typeof target?.[key]) {\n            target[key] = toAssign\n        } else if (!Array.isArray(target[key])) {\n\n            let oldVal = target[key];\n            let newVals = [];\n            //TODO maybe deep deep compare here, but on the other hand it is\n            //shallow\n            toAssign.forEach(item => {\n                if (oldVal != item) {\n                    newVals.push(item);\n                }\n            });\n            target[key] = new Es2019Array(...[]);\n            target[key].push(oldVal);\n            target[key].push(...newVals);\n        } else {\n            let oldVal = target[key];\n            let newVals = [];\n            //TODO deep compare here\n            toAssign.forEach(item => {\n                if (oldVal.indexOf(item) == -1) {\n                    newVals.push(item);\n                }\n            });\n\n            target[key].push(...newVals);\n        }\n    }\n}\n\nfunction _appendWithoutOverwrite(withAppend: boolean, target: { [p: string]: any }, key, arr, toAssign) {\n    if (!withAppend) {\n        return;\n    } else {\n        //overwrite means in this case, no double entries!\n        //we do not a deep compare for now a single value compare suffices\n        if ('undefined' == typeof target?.[key]) {\n            target[key] = toAssign\n        } else if (!Array.isArray(target[key])) {\n            let oldVal = target[key];\n            target[key] = new Es2019Array(...[]);\n            target[key].push(oldVal);\n            target[key].push(...toAssign);\n        } else {\n            target[key].push(...toAssign);\n        }\n    }\n}\n\n/**\n * Shallow merge as in config, but on raw associative arrays\n *\n * @param overwrite overwrite existing keys, if they exist with their subtrees\n * @param withAppend if a key exist append the values or drop them\n * Combination overwrite withappend filters doubles out of merged arrays\n * @param assocArrays array of assoc arres reduced right to left\n */\nexport function shallowMerge(overwrite = true, withAppend = false, ...assocArrays) {\n    let target: {[key: string]: any} = {};\n    new Es2019Array(...assocArrays).map(arr => {\n        return {arr, keys: Object.keys(arr)};\n    }).forEach(({arr, keys}) => {\n        keys.forEach(key => {\n            let toAssign = arr[key];\n            if(!Array.isArray(toAssign) && withAppend) {\n                toAssign = new Es2019Array(...[toAssign]);\n            }\n            if(overwrite || !target?.[key]) {\n                _appendWithOverwrite(withAppend, target, key, arr, toAssign);\n            } else if(!overwrite && target?.[key]) {\n                _appendWithoutOverwrite(withAppend, target, key, arr, toAssign);\n            }\n\n\n\n        })\n    });\n    return target;\n}\n\n//TODO test this, slightly altered from https://medium.com/@pancemarko/deep-equality-in-javascript-determining-if-two-objects-are-equal-bf98cf47e934\n//he overlooked some optimizations and a shortcut at typeof!\nexport function deepEqual(obj1, obj2) {\n    if(obj1 == obj2) {\n        return false;\n    }\n    if(typeof obj1 != typeof obj2) {\n        return false;\n    }\n    if(Array.isArray(obj1) && Array.isArray(obj2)) {\n        if(obj1.length != obj2.length) {\n            return;\n        }\n        //arrays must be equal, order as well, there is no way around it\n        //this is the major limitation we have\n        return obj1.every((item, cnt) => deepEqual(item, obj2[cnt]));\n    }\n    //string number and other primitives are filtered out here\n    if(\"object\" == typeof obj1 && \"object\" == typeof obj2) {\n        let keys1 = Object.keys(obj1);\n        let keys2 = Object.keys(obj2);\n        if(keys1.length != keys2.length) {\n            return false;\n        }\n        return keys1.every(key => keys2.indexOf(key) != -1) &&\n        keys1.every(key => deepEqual(obj1[key], obj2[key]));\n    }\n    return false;\n    //done here no match found\n}\n\n","import {Es2019Array} from \"./Es2019Array\";\nimport {IValueHolder, Optional, ValueEmbedder} from \"./Monad\";\nimport {Lang} from \"./Lang\";\nimport objAssign = Lang.objAssign;\nimport {append, appendIf, assign, assignIf, resolve, shallowMerge} from \"./AssocArray\";\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\nexport type ConfigDef = { [key: string]: any };\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        //shallow merge must be mutable so we have to remap\n        let newThis = shallowMerge(overwrite, withAppend, this.value, other.value);\n        if (Array.isArray(this._value)) {\n            this._value.length = 0;\n            this._value.push(...(newThis as any));\n        } else {\n            Object.getOwnPropertyNames(this._value).forEach(key => delete this._value[key]);\n            Object.getOwnPropertyNames(newThis).forEach(key => this._value[key] = newThis[key]);\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        return append(this._value, ...accessPath);\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        return appendIf(condition, this._value, ...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        return assign(this.value, ...accessPath);\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return assignIf(condition, this._value, ...accessPath);\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(resolve(this.value, ...accessPath));\n    }\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n     * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if (!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if (this.isArray(arrPos)) {\n                if (currKey != \"\") {\n                    currAccessPos = Array.isArray(currAccessPos.value) ?\n                        Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !!(item?.[currKey] ?? false);\n                        })?.[currKey]) :\n                    Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if (!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if (currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IValueHolder, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\n\nimport {ICollector, IStreamDataSource, ITERATION_STATUS} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport {_global$} from \"./Global\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport objToArray = Lang.objToArray;\nimport {append, assign, simpleShallowMerge} from \"./AssocArray\";\nimport {IDomQuery} from \"./IDomQuery\";\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\nclass NonceValueEmbedder extends ValueEmbedder<string> {\n\n    constructor(private rootElems: HTMLElement[]) {\n        super(rootElems?.[0], \"nonce\");\n    }\n\n    isAbsent(): boolean {\n        const value = this.value;\n        return 'undefined' == typeof value || '' == value;\n    }\n\n    get value(): string {\n        return (this?.rootElems?.[0] as HTMLElement)?.nonce ?? (this?.rootElems?.[0] as HTMLElement)?.getAttribute(\"nonce\")\n    }\n\n\n    set value(newVal: string) {\n        if (!this?.rootElems?.length) {\n            return;\n        }\n\n        this.rootElems.forEach((rootElem: HTMLElement) => {\n            if(\"undefined\" != typeof rootElem?.nonce) {\n                rootElem.nonce = newVal\n            } else {\n                rootElem.setAttribute(\"nonce\", newVal);\n            }\n        });\n\n    }\n}\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\n\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    get stream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    get lazyStream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return new Es2019Array(...this.values).every(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n\n    get asArray(): DomQuery[] {\n        // filter not supported by IE11\n        let items = new Es2019Array(...this.rootNode).filter(item => {\n            return item != null\n        }).map(item => {\n            return DomQuery.byId(item)\n        });\n        return items as DomQuery[];\n    }\n\n    get offsetWidth(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetHeight(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetLeft(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetTop(): number {\n        return new Es2019Array(this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as any).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get asNodeArray(): Array<Element> {\n        return new Es2019Array(...this.rootNode.filter(item => item != null));\n    }\n\n    get nonce(): ValueEmbedder<string> {\n        return new NonceValueEmbedder(this.rootNode as HTMLElement[]);\n    }\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/<!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(...\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(((item) => id == item.id) as any)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = new Es2019Array(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce((reduction: any, item: Element) => reduction.concat([item]), res);\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        return this.asArray\n            .some(item => this._mozMatchesSelector(item.getAsElem(0).value, selector));\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        new Es2019Array(...this.rootNode)\n            .forEach((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    case \"nonce\":\n                        // nonce will be handled below!\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n\n        //special nonce handling\n        sourceItem.nonce.isPresent(() => {\n            this.nonce.value = sourceItem.nonce.value;\n        });\n\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                new Es2019Array(...scriptsToProcess).forEach(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.asArray\n                .flatMap(item => [...item.values])\n                .sort((node1, node2) => node2.compareDocumentPosition(node1) - 3) // preceding 2, following == 4)\n                .forEach(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n            const _toReplace = DomQuery.byId(toReplace);\n            const tagName = _toReplace.tagName.orElse(\"\").value;\n            let newElement = DomQuery.fromMarkup(`<${tagName.toLowerCase()} />`);\n            newElement = newElement.copyAttrs(_toReplace);\n            newElement.innerHTML = toReplace.innerHTML;\n            // css suffices a simple replace to get it eval-ed, no need\n            // for a full head replace\n            _toReplace.replace(newElement);\n        };\n\n        const cssElems: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        cssElems.asArray\n            .flatMap(item => [...item.values])\n            // sort to make sure the execution order is correct\n            // this is needed because we mix 2 queries together\n            // -3 is needed due to the compareDocumentPosition return value\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .forEach(item => execCss(item as HTMLElement));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n\n        let finalOptions: any = {\n            bubbles: true, cancelable: true\n        }\n        finalOptions = simpleShallowMerge(finalOptions, options);\n\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Object.keys(finalOptions).forEach(key => event[key] = finalOptions[key]);\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\");\n    }\n\n    innerText(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => {\n                return [text1, text2].join(joinString)\n            }, \"\");\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = {}): {[key: string]: any} {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = simpleShallowMerge(toMerge);\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                append(target, name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        assign(target, name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        append(target, name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res = this.asArray\n            .flatMap( item => {\n                return item.childNodes.asArray;\n            })\n            .filter(item => {\n                return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n            })\n            .reduce((reduced: Array<any>, item: DomQuery) => {\n                reduced.push((<any>item?.value?.value)?.data ?? \"\");\n                return reduced;\n            }, []);\n        /*let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;*/\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): DomQuery {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): DomQuery {\n        let domQueries = this.asArray;\n        const ret = new DomQuery(...domQueries.concat(toAttach.asArray));\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return new DomQuery(...ret.asArray.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }));\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(...objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\nclass Es2019Array_<T>  extends Array<T>{\n\n    _another: T[];\n\n    constructor(...another: T[]) {\n        super(...another);\n        if((another as any)._another)  {\n            this._another = (another as any)._another;\n        } else {\n            this._another = another;\n        }\n\n        //for testing it definitely runs into this branch because we are on es5 level\n        //if (!(<any>Array.prototype).flatMap) {\n            this.flatMap = (flatMapFun) => this._flatMap(flatMapFun) as any;\n        //}\n        //if (!(<any>Array.prototype).flat) {\n            this.flat = (flatLevel: number = 1) => this._flat(flatLevel);\n        //}\n    }\n\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] {\n        const ret = Array.prototype.map.call(this._another, callbackfn, thisArg);\n        return new (_Es2019Array as any) (... ret);\n    }\n\n    concat(...items): T[] {\n        const ret = Array.prototype.concat.call(this._another, ...items);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    reverse(): T[] {\n        const ret = Array.prototype.reverse.call(this._another);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    slice(start?: number, end?: number): T[] {\n        const ret = Array.prototype.slice.call(this._another, start, end);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        const ret = Array.prototype.splice.call(this._another, start, deleteCount);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        const ret = Array.prototype.filter.call(this._another, predicate, thisArg);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n        const ret = Array.prototype.reduce.call(this._another, callbackfn, initialValue);\n        return ret;\n    }\n\n    /*reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T {\n        const ret = Array.prototype.reduceRight.call(callbackfn, initialValue);\n        return ret;\n    }*/\n\n    private _flat(flatDepth = 1) {\n        return this._flatResolve(this._another, flatDepth);\n    }\n\n    private _flatResolve(arr, flatDepth = 1) {\n        //recursion break\n        if (flatDepth == 0) {\n            return arr;\n        }\n        let res = [];\n\n        let reFlat = item => {\n            item = Array.isArray(item) ? item : [item];\n            let mapped = this._flatResolve(item, flatDepth - 1);\n            res = res.concat(mapped);\n        };\n        arr.forEach(reFlat)\n\n        return new Es2019Array(...res);\n    }\n\n    private _flatMap(mapperFunction: Function): any {\n        let res = this.map(item => mapperFunction(item));\n        return this._flatResolve(res);\n    }\n}\n\n//let _Es2019Array = function<T>(...data: T[]) {};\n\n//let oldProto = Es2019Array.prototype;\n\nexport function _Es2019Array<T>(...data: T[]): Es2019Array_<T> {\n    let ret = new Es2019Array_<T>(...data);\n    let proxied = new Proxy<Es2019Array_<T>>(ret, {\n        get(target: Es2019Array_<unknown>, p: string | symbol, receiver: any): any {\n            if(\"symbol\" == typeof p) {\n\n                return target._another[p];\n            }\n            if(!isNaN(parseInt(p as string))) {\n                return target._another[p];\n            } else {\n                return target[p];\n            }\n        },\n\n        set(target, property, value): boolean {\n            target[property] = value;\n            target._another[property] = value;\n            return true;\n        }\n\n    });\n    return proxied;\n};\n\n/**\n * this is the switch between normal array and our shim\n * the shim is only provided in case the native browser\n * does not yet have flatMap support on arrays\n */\nexport var Es2019Array: any = (Array.prototype.flatMap) ? function<T>(...data: T[]): T[] {\n    // sometimes the typescript compiler produces\n    // an array without flatmap between boundaries (the result produces True for Array.isArray\n    // but has no flatMap function, could be a node issue also or Typescript!\n    // we remap that (could be related to: https://github.com/microsoft/TypeScript/issues/31033\n    // the check and remap fixes the issue which should not exist in the first place\n    return data?.flatMap ? data : _Es2019Array(...data);\n} : _Es2019Array;","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return new Es2019Array(...pack.concat(Array.prototype.slice.call(obj, offset)));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * a standardized message to be sent over the message bus\n */\nimport {Observable, Subject} from \"rxjs\";\nimport {Stream} from \"./Stream\";\nimport {_global$} from \"./Global\";\n\n\n/**\n * generic crypto interface\n * to encrypt messages before they are sent\n * to the message bus oder the underlying bus system\n *\n * The idea is to make it as easy as possible, you can use for instance crypto js to\n * handle everything\n */\nexport interface Crypto {\n    /**\n     * note anything can be passed\n     *\n     * @param data the data to be encrypted\n     * @returns the encrypted data in any format, important is decode must be able to handle it\n     */\n    encode(data: any): any;\n\n    /**\n     * @param data the encrypted data in the format you expect it to be\n     * @returns the unencrypted data\n     */\n    decode(data: any): any;\n}\n\n\n/**\n * generic hash interface which provides\n * exactly one method a hash encode which returns a string hash value of encoded data\n */\nexport interface Hash {\n    encode(encodedData: string): string;\n}\n\n/**\n * Default implementation = no encryption\n */\nexport class NoCrypto implements Crypto {\n    decode(data: any): string {\n        return data;\n    }\n\n    encode(data: any): any {\n        return data;\n    }\n}\n\n//TODO dynamic encryptor which flushes the messages before changing the keys\n//that way we can rotate and change internal crypto keys on the fly\n\nlet noEncryption = new NoCrypto();\n\nexport class Message {\n\n    creationDate?: number;\n    identifier?: string;\n    targetOrigin?: string;\n    encoded: boolean = false;\n\n    constructor(public message: any = {}, targetOrigin = \"*\") {\n        this.targetOrigin = targetOrigin;\n        this.creationDate = new Date().getMilliseconds();\n        this.identifier = new Date().getMilliseconds() + \"_\" + Math.random() + \"_\" + Math.random();\n    }\n}\n\n/**\n * custom dom event wrapping our messages\n */\nclass MessageWrapper implements CustomEventInit<Message> {\n\n    detail?: Message;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n    channel: string;\n\n    constructor(channel: string, message: Message) {\n        this.detail = message;\n        this.bubbles = true;\n        this.cancelable = true;\n        this.composed = true;\n        this.channel = channel;\n    }\n}\n\n/**\n * abstract broker class\n * (The broker is the central distribution unit of messages)\n */\nabstract class BaseBroker {\n\n    static readonly EVENT_TYPE = \"brokerEvent\";\n    /**\n     * we can split the listeners with the system\n     * namespace... and type (aka identifier criteria)\n     */\n    protected messageListeners: any = {};\n    protected subjects: any = {};\n    protected processedMessages: any = {};\n\n    protected cleanupCnt = 0;\n    protected rootElem;\n    protected msgHandler;\n\n    protected readonly TIMEOUT_IN_MS = 1000;\n    protected readonly MSG_EVENT = \"message\";\n\n    //must be public because we also must have the option\n    //to set it outside of the constructor\n    crypto = noEncryption;\n\n\n    abstract register(scopeElement?: any): BaseBroker;\n\n    abstract unregister(): BaseBroker;\n\n    abstract broadcast(channel: string, message: Message | string): BaseBroker;\n\n\n    /**\n     * registers a listener on a channel\n     * @param channel the channel to register the listeners for\n     * @param listener the listener to register\n     */\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.reserveListenerNS(channel);\n\n        //we skip the processed messages, because they originated here\n        //and already are processed\n        this.messageListeners[channel].push((msg: Message) => {\n            if (msg.identifier in this.processedMessages) {\n                return;\n            }\n            if (msg?.encoded || msg?.[\"detail\"]?.encoded) {\n                if (msg?.[\"detail\"]) {\n                    msg[\"detail\"].message = this.crypto.decode(msg[\"detail\"].message);\n                    msg[\"detail\"].encoded = false;\n                } else {\n                    msg.message = this.crypto.decode(msg.message);\n                    msg.encoded = false;\n                }\n\n            }\n            listener(msg);\n        });\n        return this;\n    }\n\n    /**\n     * binding into rxjs\n     * produces a subject which can be used via next calls to send messages\n     * on the other hand we\n     * @param channel\n     */\n    asSubject(channel: string): Subject<Message> {\n        this.reserveSubjectNS(channel);\n        let subject = this.subjects[channel];\n        let oldNext = subject.next;\n\n        subject.next = (msg: Message | MessageWrapper) => {\n            //We use a recursive call to let the broadcaster handle\n            //The wrapper conversion and then again call us here\n            //that way both directions are handled.. next calls the broker\n            //and a broadcast calls next\n            if ((<MessageWrapper>msg)?.detail) {\n                oldNext.call(subject, (<MessageWrapper>msg)?.detail);\n            } else {\n                this.broadcast(channel, <Message>msg);\n            }\n        }\n        return subject;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * returns an observable on the baseBroker\n     * @param channel\n     */\n    asObservable(channel: string): Observable<Message> {\n        return this.asSubject(channel).asObservable();\n    }\n\n    /**\n     * reserves the listener namespace and wildcard namespace for the given identifier\n     * @param identifier\n     * @private\n     */\n    private reserveListenerNS(identifier: string) {\n        if (!this.messageListeners[identifier]) {\n            this.messageListeners[identifier] = [];\n        }\n        if (!this.messageListeners[\"*\"]) {\n            this.messageListeners[\"*\"] = [];\n        }\n    }\n\n    private reserveSubjectNS(identifier: string) {\n        if (!this.subjects[identifier]) {\n            this.subjects[identifier] = new Subject();\n        }\n        if (!this.subjects[\"*\"]) {\n            this.subjects[\"*\"] = new Subject();\n        }\n    }\n\n    /**\n     * unregisters a listener from this channel\n     *\n     * @param channel the channel to unregister from\n     * @param listener the listener to unregister the channel from\n     */\n    unregisterListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.messageListeners[channel] = (this.messageListeners[channel] || []).filter((item: any) => item !== listener);\n        return this;\n    }\n\n    /**\n     * answers a bidirectional message received\n     * usage, the client can use this method, to answer an incoming message in a precise manner\n     * so that the caller sending the bidirectional message knows how to deal with it\n     * this mechanism can be used for global storages where we have one answering entity per channel delivering the\n     * requested data, the request can be done asynchronously via promises waiting for answers\n     *\n     * @param channel the channel the originating message\n     * @param request the requesting message\n     * @param answer the answer to the request\n     */\n    answer(channel: string, request: Message | string, answer: Message): BaseBroker {\n        if ('string' == typeof request) {\n            request = new Message(request);\n        }\n\n        if (BaseBroker.isAnswer(request)) {\n            return;\n        }\n        answer.identifier = BaseBroker.getAnswerId(request);\n        this.broadcast(channel, answer);\n        return this;\n    }\n\n    private static getAnswerId(request: Message) {\n        return \"_r_\" + request.identifier;\n    }\n\n    private static isAnswer(request: Message) {\n        return request.identifier.indexOf(\"_r_\") == 0;\n    }\n\n    /**\n     * idea... a bidirectional broadcast\n     * sends a message and waits for the first answer coming in from one of the receivers\n     * sending the message back with a messageIdentifier_broadCastId answer\n     *\n     * @param channel\n     * @param message\n     */\n    request(channel: string, message: Message | string): Promise<Message> {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        let messageId = message.identifier;\n\n        let ret = new Promise<Message>((resolve, reject) => {\n            let timeout = null;\n            let listener = (message2: Message) => {\n                if (message2.identifier == messageId) {\n                    //broadcast from same source, we do not want\n                    //to deal with it now\n                    return;\n                }\n\n                if (message2.identifier == \"_r_\" + messageId) {\n                    clearTimeout(timeout);\n                    this.unregisterListener(channel, listener);\n                    resolve(message2);\n                }\n            }\n            timeout = setTimeout(() => {\n                this.unregisterListener(channel, listener);\n                reject(\"request message performed, timeout, no return value\");\n            }, 3000);\n            this.registerListener(channel, listener);\n\n        });\n        this.broadcast(channel, message);\n        return ret;\n    }\n\n\n    /**\n     * garbage collects the processed messages queue\n     * usually after one second\n     */\n    protected gcProcessedMessages() {\n        if ((++this.cleanupCnt) % 10 != 0) {\n            return;\n        }\n        let newProcessedMessages: any = {};\n        Object.keys(this.processedMessages).forEach(key => {\n            if (this.messageStillActive(key)) return;\n            newProcessedMessages[key] = this.processedMessages[key];\n        });\n        this.processedMessages = newProcessedMessages;\n    }\n\n    private messageStillActive(key: string): boolean {\n        return this.processedMessages[key] > ((new Date()).getMilliseconds() - this.TIMEOUT_IN_MS);\n    }\n\n    protected markMessageAsProcessed(message: Message) {\n        this.processedMessages[message.identifier] = message.creationDate;\n    }\n}\n\nlet broadCastChannelBrokerGenerator = (name) => {\n    if (_global$()?.BroadcastChannel) {\n        return new (_global$()).BroadcastChannel(name);\n    }\n    throw Error(\"No Broadcast channel in the system, use a shim or provide a factory function\" +\n        \"in the constructor\");\n};\n\nconst DEFAULT_CHANNEL_GROUP = \"brokr\";\n\n/**\n * a broker which hooks into the Broadcast Channel\n * either via shim or substitute lib\n *\n * The broadcast channels are a standardized messaging library\n * The broker mechanism sets a layer on top to make it more manageable!\n *\n */\nexport class BroadcastChannelBroker extends BaseBroker {\n    private openChannels: [{ key: string }, BroadcastChannel] = <any>{};\n    private readonly msgListener: Function;\n\n\n    /**\n     * @param brokerFactory a factory generating a broker\n     * @param channelGroup a group to combine a set of channels\n     * @param crypto a crypto class\n     */\n    constructor(private brokerFactory: Function = broadCastChannelBrokerGenerator, private channelGroup = DEFAULT_CHANNEL_GROUP, public crypto: Crypto = noEncryption) {\n        super();\n        this.msgListener = (messageData: MessageWrapper) => {\n            if (messageData.detail.encoded) {\n                messageData.detail.message = <any>this.crypto.decode(messageData.detail.message);\n                messageData.detail.encoded = false;\n            }\n            let coreMessage = messageData.detail;\n            let channel: string = messageData.channel;\n\n            if (this.messageListeners?.[channel]) {\n                this.messageListeners?.[channel].forEach(listener => {\n                    listener(coreMessage);\n                })\n            }\n            this.markMessageAsProcessed(coreMessage);\n            return true;\n        }\n        this.crypto = crypto;\n        this.register();\n    }\n\n    broadcast(channel: string, message: Message | string, includeOrigin = true): BaseBroker {\n        try {\n            if ('string' == typeof message) {\n                message = new Message(message);\n            }\n            //we now run a quick remapping to avoid\n            //serialisation errors\n            let msgString = JSON.stringify(<Message>message);\n            message = <Message>JSON.parse(msgString);\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n            messageWrapper.detail.encoded = true;\n\n            if (this?.subjects[channel]) {\n                this.subjects[channel].next(messageWrapper);\n            }\n\n            this.openChannels[this.channelGroup].postMessage(messageWrapper);\n            if (includeOrigin) {\n                this.msgListener(messageWrapper);\n            }\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        super.registerListener(channel, listener);\n        return <BaseBroker>this;\n    }\n\n    register(): BaseBroker {\n        if (!this.openChannels[this.channelGroup]) {\n            this.openChannels[this.channelGroup] = this.brokerFactory(this.channelGroup);\n        }\n        this.openChannels[this.channelGroup].addEventListener(\"message\", this.msgListener);\n        return <BaseBroker>this;\n    }\n\n    unregister(): BaseBroker {\n        this.openChannels[this.channelGroup].close();\n        return <BaseBroker>this;\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a broadcast channel broker\n */\nexport class BroadcastChannelBrokerBuilder {\n    private broadCastChannelGenerator: Function = broadCastChannelBrokerGenerator;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withGeneratorFunc(generatorFunc: Function): BroadcastChannelBrokerBuilder {\n        this.broadCastChannelGenerator = generatorFunc;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BroadcastChannelBrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n    withChannelGroup(channelGroup: string): BroadcastChannelBrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BroadcastChannelBrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): BroadcastChannelBroker {\n        let broker = new BroadcastChannelBroker(this.broadCastChannelGenerator, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}\n\n\n/**\n * implementation of a messaging based transport\n */\n\n/**\n * central message broker which uses various dom constructs\n * to broadcast messages into subelements\n *\n * we use the dom event system as transport and iframe and shadow dom mechanisms in a transparent way to\n * pull this off\n *\n * usage\n *\n * broker = new Broker(optional rootElement)\n *\n * defines a message broker within a scope of rootElement (without it is window aka the current isolation level)\n *\n * broker.registerListener(channel, listener) registers a new listener to the current broker and channel\n * broker.unregisterListener(channel, listener) unregisters the given listener\n *\n * broker.broadcast(message, optional direction, optional callBrokerListeners)\n * sends a message (channel included in the message object) in a direction (up, down, both)\n * and also optionally calls the listeners on the same broker (default off)\n *\n * the flow is like\n * up messages are propagated upwards only until it reaches the outer top of the dom\n * downwards, the messages are propagated downwards only\n * both the message is propagated into both directions\n *\n * Usually messages sent from the same broker are not processed within... however by setting\n * callBrokerListeners to true the listeners on the same broker also are called\n * brokers on the same level will get the message and process it automatically no matter what.\n * That way you can exclude the source from message processing (and it is done that way automatically)\n *\n * Isolation levels. Usually every isolation level needs its own broker object registering\n * on the outer bounds\n *\n * aka documents will register on window\n * iframes on the iframe windowObject\n * isolated shadow doms... document\n *\n *\n *\n */\nexport class Broker extends BaseBroker {\n\n    /**\n     * constructor has an optional root element\n     * and an internal name\n     *\n     * @param scopeElement\n     * @param brokerGroup\n     * @param crypto\n     */\n    constructor(scopeElement: HTMLElement | Window | ShadowRoot = window, public brokerGroup = \"brokr\", crypto: Crypto = noEncryption) {\n\n        super();\n\n        /**\n         * message relay.. identifies message events and relays them to the listeners\n         * @param event\n         */\n        let evtHandler = (event: MessageEvent | CustomEvent<Message>) => {\n            let details = (<any>event)?.detail ?? (<MessageEvent>event)?.data?.detail;\n            //TODO possible crypto hook, needs unit testing\n            let channel = ((<any>event)?.data?.channel) ?? ((<any>event)?.channel);\n\n            //javascript loses the type info in certain module types\n            if (details?.identifier && details?.message) {\n                let msg: Message = details;\n                if (msg.identifier in this.processedMessages) {\n                    return;\n                }\n                //coming in from up... we need to send it down\n                //a relayed message always has to trigger the listeners as well\n                if ((<any>event)?.detail) {\n                    this.broadcast(channel, msg);\n                } else {\n                    this.broadcast(channel, msg);\n                }\n\n            }\n        };\n        this.msgHandler = (evt: MessageEvent) => evtHandler(evt);\n        this.crypto = crypto;\n        this.register(scopeElement);\n    }\n\n    /**\n     * register the current broker into a scope defined by wnd\n     * @param scopeElement\n     */\n    register(scopeElement: HTMLElement | Window | ShadowRoot): BaseBroker {\n        this.rootElem = (<any>scopeElement).host ? (<any>scopeElement).host : scopeElement;\n        if ((<any>scopeElement).host) {\n            let host = (<ShadowRoot>scopeElement).host;\n            host.setAttribute(\"data-broker\", \"1\");\n        } else {\n            if (scopeElement?.[\"setAttribute\"])\n                (<any>scopeElement).setAttribute(\"data-broker\", \"1\");\n        }\n\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler, {capture: true});\n        /*dom message usable by iframes*/\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE + this.MSG_EVENT, this.msgHandler, {capture: true});\n        return <any>this;\n    }\n\n    /**\n     * manual unregister function, to unregister as broker from the current\n     * scope\n     */\n    unregister(): BaseBroker {\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler)\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + this.MSG_EVENT, this.msgHandler)\n        return <any>this;\n    }\n\n\n    /**\n     * broadcast a message\n     * the message contains the channel and the data and some internal bookkeeping data\n     *\n     * @param channel the channel to broadcast to\n     * @param message the message dot send\n     * (for instance 2 iframes within the same parent broker)\n     */\n    broadcast(channel: string, message: Message | string): BaseBroker {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        //message.message = this.crypto.encode(message);\n        //message.encoded = true;\n\n        if (this?.subjects[channel]) {\n            let messageWrapper = new MessageWrapper(channel, message);\n            if (!messageWrapper.detail.encoded) {\n                messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n                messageWrapper.detail.encoded = true;\n            }\n            this.subjects[channel].next(messageWrapper);\n        }\n\n        try {\n            this.dispatchUp(channel, message, false, true);\n            //listeners already called\n            this.dispatchDown(channel, message, true, false)\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n\n    private dispatchUp(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.markMessageAsProcessed(message);\n        if (_global$().parent != null) {\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            _global$().parent.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        }\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n    private dispatchSameLevel(channel: string, message: Message) {\n        let event = this.transformToEvent(channel, message, true);\n        //we also dispatch sideways\n        _global$().dispatchEvent(event);\n    }\n\n    //a dispatch of our own should never trigger the listeners hence the default true\n    private dispatchDown(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        let evt = this.transformToEvent(channel, message);\n\n        /*we now notify all iframes lying underneath */\n        Array.prototype.slice.call(document.querySelectorAll(\"iframe\")).forEach((element: HTMLIFrameElement) => {\n            let messageWrapper = new MessageWrapper(channel, message);\n            element.contentWindow.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        });\n\n        Array.prototype.slice.call(document.querySelectorAll(\"[data-broker='1']\")).forEach((element: HTMLElement) => element.dispatchEvent(evt))\n\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n\n    private msgCallListeners(channel: string, message: Message) {\n        let listeners = this.messageListeners[channel];\n        if (listeners?.length) {\n            let callElement = (element: (msg: Message) => void) => {\n                element(message);\n            }\n\n            listeners.forEach(callElement);\n        }\n    }\n\n    private transformToEvent(channel: string, message: Message, bubbles = false): CustomEvent {\n        let messageWrapper = new MessageWrapper(channel, message);\n        messageWrapper.bubbles = bubbles;\n        return Broker.createCustomEvent(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, messageWrapper);\n    }\n\n    private static createCustomEvent(name: string, wrapper: MessageWrapper): any {\n        if ('function' != typeof _global$().CustomEvent) {\n            let e: any = document.createEvent('HTMLEvents');\n            e.detail = wrapper.detail;\n            e.channel = wrapper.channel;\n            e.initEvent(name, wrapper.bubbles, wrapper.cancelable);\n            return e;\n\n        } else {\n            let customEvent = new (_global$()).CustomEvent(name, wrapper);\n            (<any>customEvent).channel = wrapper.channel;\n            return customEvent;\n        }\n\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a dom broker\n */\nexport class BrokerBuilder {\n    private scopeElement: HTMLElement | Window | ShadowRoot = window;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withScopeElement(scopeElement: HTMLElement | Window | ShadowRoot): BrokerBuilder {\n        this.scopeElement = scopeElement;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n\n    withChannelGroup(channelGroup: string): BrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): Broker {\n        let broker = new Broker(this.scopeElement, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/*\n * Promise wrappers for timeout and interval\n */\nexport function timeout(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setTimeout(() => apply(), timeout);\n    }, () => {\n        if (handler) {\n            clearTimeout(handler);\n            handler = null;\n        }\n    });\n}\n\nexport function interval(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setInterval(() => {\n            apply();\n        }, timeout);\n    }, () => {\n        if (handler) {\n            clearInterval(handler);\n            handler = null;\n        }\n    });\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //let func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n            if (fn.catch) {\n                let funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            let fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport {Config} from \"./Config\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource, calculateSkips,\n    FilteredStreamDatasource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource, MultiStreamDatasource\n} from \"./SourcesCollectors\";\nimport {DomQuery} from \"./DomQuery\";\nimport {Config} from \"./Config\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n\n        let lookAhead = this?.activeDataSource?.lookAhead(cnt);\n        if (this?.activeDataSource && lookAhead != ITERATION_STATUS.EO_STRM) {\n            //this should cover 95% of all cases\n            return lookAhead;\n        }\n\n        if (this.activeDataSource) {\n            cnt -= calculateSkips(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams sub-sequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them, so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let datasourceData = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            //no embedded data anymore? we are done, data\n            //can either be a scalar an array or another datasource\n            if (datasourceData === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mappedData = this.mapFunc(datasourceData as T);\n\n            //it either comes in as datasource or as array\n            //both cases must be unified into a datasource\n            let currentDataSource = this.toDatasource(mappedData);\n            //we now run again  a lookahead\n            let ret = currentDataSource.lookAhead(cnt);\n            //if the value is found then we are set\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            //reduce the next lookahead by the number of elements\n            //we are now skipping in the current data source\n            cnt -= calculateSkips(currentDataSource);\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns the currently element selected in the stream\n     */\n    current(): T | ITERATION_STATUS\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T>, IStreamDataSource<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    static ofDomQuery(value: DomQuery): Stream<DomQuery> {\n        return Stream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): Stream<[string, any]> {\n        return Stream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    current(): T | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        if(this.pos >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos];\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    static ofDomQuery(value: DomQuery): LazyStream<DomQuery> {\n        return LazyStream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): LazyStream<[string, any]> {\n        return LazyStream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.ofStreamDataSource(new MultiStreamDatasource(this, toAppend as any) as any)\n        //return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n/**\n * 1.0 backwards compatibility functions\n *\n * this restores the stream and lazy stream\n * property on DomQuery on prototype level\n *\n */\n\nObject.defineProperty(DomQuery.prototype, \"stream\", {\n    get: function stream(){\n        return Stream.ofDomQuery(this);\n    }\n})\n\n\nObject.defineProperty(DomQuery.prototype, \"lazyStream\", {\n    get: function lazyStream(){\n        return LazyStream.ofDomQuery(this);\n    }\n})","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//poliyfill from @webcomponents/webcomponentsjs\nimport {DomQuery} from \"./DomQuery\";\nimport {_global$} from \"./Global\";\n\n\nif (\"undefined\" != typeof _global$) {\n    (function () {\n        if (void 0 === _global$().Reflect || void 0 === _global$().customElements || (<any>_global$().customElements).polyfillWrapFlushCallback) return;\n        const a = HTMLElement;\n        _global$().HTMLElement = {\n            HTMLElement: function HTMLElement() {\n                return Reflect.construct(a, [], this.constructor)\n            }\n        }.HTMLElement, HTMLElement.prototype = a.prototype, HTMLElement.prototype.constructor = HTMLElement, Object.setPrototypeOf(HTMLElement, a);\n    })();\n}\n\n/**\n * beginning custom tag support\n *\n * This api is still experimental\n * and might be interwoven with DomQuery\n * so it is bound to change\n *\n * it follows a builder pattern to allow easier creations\n * with less code of custom tags\n */\nexport class TagBuilder {\n    tagName: string;\n    connectedCallback?: Function;\n    clazz?: CustomElementConstructor;\n    extendsType: CustomElementConstructor = HTMLElement;\n    theOptions: ElementDefinitionOptions | null;\n    markup: string;\n    disconnectedCallback?: Function;\n    adoptedCallback ?: Function;\n    attributeChangedCallback ?: Function;\n    observedAttrs: string[] = [];\n\n    // noinspection JSUnusedGlobalSymbols\n    static withTagName(tagName): TagBuilder {\n        return new TagBuilder(tagName);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withObservedAttributes(...oAttrs) {\n        this.observedAttrs = oAttrs;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withConnectedCallback(callback: Function) {\n        this.connectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withDisconnectedCallback(callback: Function) {\n        this.disconnectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAdoptedCallback(callback: Function) {\n        this.adoptedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAttributeChangedCallback(callback: Function) {\n        this.attributeChangedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withExtendsType(extendsType: CustomElementConstructor) {\n        this.extendsType = extendsType;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withOptions(theOptions) {\n        this.theOptions = theOptions;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withClass(clazz) {\n        if (this.markup) {\n            throw Error(\"Markup already defined, markup must be set in the class\");\n        }\n        this.clazz = clazz;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withMarkup(markup) {\n        if (this.clazz) {\n            throw Error(\"Class already defined, markup must be set in the class\");\n        }\n        this.markup = markup;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    register() {\n        if (!this.clazz && !this.markup) {\n            throw Error(\"Class or markup must be defined\")\n        }\n        if (this.clazz) {\n\n            let applyCallback = (name: string) => {\n                let outerCallback = this[name];\n                let protoCallback = (<any>this.clazz.prototype)[name];\n                let finalCallback = outerCallback || protoCallback;\n                if (finalCallback) {\n                    (<any>this.clazz.prototype)[name] = function () {\n                        if(outerCallback) {\n                            finalCallback.apply(DomQuery.byId(this));\n                        } else {\n                            protoCallback.apply(<any>this);\n                        }\n                    }\n                }\n            }\n\n            applyCallback(\"connectedCallback\");\n            applyCallback(\"disconnectedCallback\");\n            applyCallback(\"adoptedCallback\");\n            applyCallback(\"attributeChangedCallback\");\n\n            //TODO how do we handle the oAttrs?\n            if (this.observedAttrs.length) {\n                Object.defineProperty(this.clazz.prototype, \"observedAttributes\", {\n                    get(): any {\n                        return this.observedAttrs;\n                    }\n                });\n            }\n\n            _global$().customElements.define(this.tagName, this.clazz, this.theOptions || null);\n        } else {\n            let _t_ = this;\n            let applyCallback = (name: string, scope: any) => {\n                if (_t_[name]) {\n                    _t_[name].apply(DomQuery.byId(<any>scope));\n                }\n            };\n\n            _global$().customElements.define(this.tagName, class extends this.extendsType {\n                constructor() {\n                    super();\n                    this.innerHTML = _t_.markup;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                static get observedAttributes() {\n                    return _t_.observedAttrs;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                connectedCallback() {\n                    applyCallback(\"connectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                disconnectedCallback() {\n                    applyCallback(\"disconnectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                adoptedCallback() {\n                    applyCallback(\"adoptedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                attributeChangedCallback() {\n                    applyCallback(\"attributeChangedCallback\", this);\n                }\n\n            }, this.theOptions || null);\n        }\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\nimport {_global$} from \"./Global\";\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new (_global$()).DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (_global$())?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","module.exports = __WEBPACK_EXTERNAL_MODULE__177__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {Crypto, Hash} from \"./Messaging\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {LazyStream} from \"./Stream\";\n\n/*\n * Some crypto implementations which might come in handy\n */\n\n\n/**\n * basic json stringify encryption impl\n * this does not really full encryption except for a standard json stringyfywith an encapsulation json\n *\n * the return value resembles:\n * <pre>\n *     {\n *         encryptedData: <data as string>\n *     }\n * </pre>\n */\nexport class JSONCrypto implements Crypto {\n    decode(data: any): any {\n        if (data?.encryptedData) {\n            return JSON.parse(data.encryptedData);\n        }\n        return data;\n    }\n\n    encode(data: any) {\n        return {\n            encryptedData: JSON.stringify(data)\n        }\n    }\n}\n\n\n/**\n * a class with  timeout functionality which blocks decodes after a certain period of time\n * if the message is not decoded by then\n * We use hash as identifier generation after encryption to make sure\n * a trace was possible\n *\n * The idea behind this is to have a generic wrapper which allows messages with dynamic encryption\n * where keys/salts only exist for a certain period of time before expiring!\n * That way someone who implements such a scheme does not have to take care about the bookeeping mechanisms!\n * Or you can use crypto mechanisms which do not have expiring keys and still expire them automatically\n *\n * I will leave it up to the system integrator to provide a rotating crypto class, because this is highly\n * implementation dependent. But it helps to have a wrapper!\n */\nexport class ExpiringCrypto implements Crypto {\n\n    private static MAX_GC_CYCLES = 10;\n    private gcCycleCnt = 0;\n    private storedMessages: { [key: string]: number } = {};\n    private lastCall = 0;\n\n    /**\n     * @param timeout timeout in miliseconds until a message is expired\n     * @param parentCrypto the embedded decorated crypto algorithm\n     * @param hashSum hashshum implementation to generate a hash\n     */\n    constructor(private timeout: number, private parentCrypto: Crypto, private hashSum: Hash) {\n\n    }\n\n    /**\n     * decode implementation with a timeout hook install\n     * @param data\n     */\n    decode(data: any): any {\n        //if ((this.gcCycleCnt++ % ExpiringCrypto.MAX_GC_CYCLES) === 0) {\n\n        const currTime = new Date().getTime();\n        if(this.gcLimitReached(currTime)) {\n            this.storedMessages = LazyStream\n                .ofAssoc(this.storedMessages)\n                .filter(data => data[1] >= currTime)\n                .collect(new AssocArrayCollector());\n        }\n        this.lastCall = currTime;\n\n\n        let rotatingEncoded = this.hashSum.encode(data);\n        if (!this.storedMessages?.[rotatingEncoded.toString()]) {\n            throw Error(\"An item was tried to be decryted which either was expired or invalid\");\n        }\n        return this.parentCrypto.decode(data);\n    }\n\n    /**\n     * trigger function to determine whether the gc needs to cycle again, this is either time or call based\n     * the gc itself collects only on expiration dates\n     * The idea is to run this operation only occasionally because it is costly\n     * We also could have used timeouts etc.. but those would need shutdown/destroy cleanups\n     *\n     * @param currTime\n     * @private\n     */\n    private gcLimitReached(currTime: number) {\n        return (this.lastCall + this.timeout) < currTime || ((++this.gcCycleCnt) % ExpiringCrypto.MAX_GC_CYCLES == 0);\n    }\n\n    /**\n     * encode with a timeout hook installed\n     * calls the encode of the delegated object\n     *\n     * @param data\n     */\n    encode(data: any): any {\n        let encoded = this.parentCrypto.encode(data);\n        //ok use the hashsum really only to store expirations, theoretically there could be a second message which does not invalidate the first one\n        //but this is very unlikely unless a message is sent over and over again, in this case we have a timeout extension anyway!\n        let rotatingEncoded = this.hashSum.encode(encoded);\n        this.storedMessages[rotatingEncoded.toString()] = (new Date().getTime()) + this.timeout;\n        return encoded;\n    }\n}"],"names":["IgnoreAssign","constructor","parent","value","this","assign","target","accessPath","length","lastPathItem","buildPath","key","append","Array","isArray","push","assignIf","condition","appendIf","resolve","ret","flattenAccessPath","currPtr","cnt","accessKeyIndex","arrayIndex","keyVal","start","indexOf","substring","end","parseInt","alloc","arr","defaultVal","toAdd","Es2019Array","flatMap","path","split","map","filter","parentPtr","parKeyArrPos","currKey","arrPos","Error","nextArrPos","dataPresent","simpleShallowMerge","assocArrays","shallowMerge","overwrite","withAppend","keys","Object","forEach","toAssign","oldVal","newVals","item","_appendWithOverwrite","_appendWithoutOverwrite","objAssign","Lang","ConfigEntry","ValueEmbedder","rootElem","super","_value","val","absent","fromNullable","CONFIG_VALUE","CONFIG_ANY","Config","Optional","root","configDef","shallowCopy","shallowCopy$","deepCopy","deepCopy$","static","other","newThis","getOwnPropertyNames","getIf","assertAccessPath","getClass","get","delete","toJson","JSON","stringify","setVal","preprocessKeys","currAccessPos","find","isPresent","isNoArray","ALLOWED_SUBMITTABLE_ELEMENTS","trim","isString","eqi","objToArray","NonceValueEmbedder","rootElems","isAbsent","nonce","getAttribute","newVal","setAttribute","ElementAttribute","element","name","orElse","values","valueKey","Style","style","DEFAULT_WHITELIST","DomQuery","rootNode","pos","_limits","foundElement","querySelectorAll","getAsElem","allElems","global","stream","lazyStream","id","tagName","nodeName","isTag","toLowerCase","type","inputValue","nodeId","checked","every","el","newChecked","eachElem","elements","deepElements","querySelectorAllDeep","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","disabled","attr","removeAttribute","childNodes","childNodeArr","concat","asArray","byId","offsetWidth","elem","reduce","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","asNodeArray","selector","document","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","code","globalEval","globalEvalSticky","markup","doc","implementation","createHTMLDocument","lowerMarkup","search","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","node","parentNode","removeChild","closest","_closestDeep","_closest","includeRoot","res","subItems","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","first","newInnerHTML","dispatchEvent","evt","retArr","innerHtml","newInnerHtml","filterSelector","matched","_mozMatchesSelector","some","nodeSelector","selectorStage","func","len","firstElem","lastElem","each","replace","toReplace","asElem","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","insertBefore","insertAfter","last","lastNode","reArr","head","getElementsByTagName","script","newScriptElement","appendChild","applyNonce","appendTo","orElseLazy","loadScriptEval","src","delay","_loadScriptEval","loadScriptEvalSticky","toInsertParams","existingItem","existingElement","nextSibling","insertElem","elseValue","allParents","firstParent","parentsWhileMatch","host","copyAttrs","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","fromMarkup","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","sticky","whitelisted","evalCollectedScripts","scriptsToProcess","joinedScripts","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","sort","node1","node2","compareDocumentPosition","e","console","error","message","description","_toReplace","newElement","execCss","click","fireEvent","addEventListener","listener","options","removeEventListener","eventName","finalOptions","bubbles","cancelable","ownerDocument","nodeType","EventClass","Event","MouseEvent","KeyboardEvent","event","synthetic","createEventObject","textContent","joinString","text1","text2","encodeFormElement","toMerge","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","from","cDATAAsString","reduced","data","subNodes","to","Math","min","limits","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","current","reset","attachShadow","params","mode","shadowElement","async","childList","subtree","timeout","interval","Promise","success","observer","MUT_ERROR","findElement","MutationObserver","mutTimeout","setTimeout","disconnect","callback","mutationList","mut","clearTimeout","observableOpts","observe","setInterval","clearInterval","waitUntilDom","shadowElements","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","domQueries","idx","notFound","prependTo","prepend","foundNodes","selectors","cnt2","levelSelector","toMatch","prototypeOwner","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","i","srcNode","createSourceNode","nonceCheck","marker","Date","now","random","attrName","DomQueryCollector","collect","finalValue","DQ","DQ$","Es2019Array_","another","_another","flatMapFun","_flatMap","flat","flatLevel","_flat","callbackfn","thisArg","_Es2019Array","prototype","items","reverse","splice","deleteCount","predicate","initialValue","flatDepth","_flatResolve","mapperFunction","Proxy","p","receiver","isNaN","set","property","_global$","globalThis","window","g","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","equalsIgnoreCase","source","destination","finalDest","assertType","probe","theType","isFunc","Function","theArgs","TypeError","nextSource","nextKey","hasOwnProperty","NoCrypto","decode","encode","noEncryption","Message","targetOrigin","encoded","creationDate","getMilliseconds","identifier","MessageWrapper","channel","detail","composed","BaseBroker","messageListeners","subjects","processedMessages","cleanupCnt","TIMEOUT_IN_MS","MSG_EVENT","crypto","registerListener","reserveListenerNS","msg","asSubject","reserveSubjectNS","subject","oldNext","broadcast","asObservable","Subject","unregisterListener","answer","request","isAnswer","getAnswerId","messageId","reject","message2","gcProcessedMessages","newProcessedMessages","messageStillActive","markMessageAsProcessed","EVENT_TYPE","broadCastChannelBrokerGenerator","BroadcastChannel","DEFAULT_CHANNEL_GROUP","BroadcastChannelBroker","brokerFactory","channelGroup","openChannels","msgListener","messageData","coreMessage","register","includeOrigin","msgString","parse","messageWrapper","postMessage","unregister","close","Broker","scopeElement","brokerGroup","evtHandler","details","msgHandler","capture","dispatchUp","dispatchDown","ignoreListeners","callBrokerListeners","msgCallListeners","dispatchSameLevel","transformToEvent","contentWindow","listeners","callElement","createCustomEvent","wrapper","CustomEvent","createEvent","initEvent","customEvent","Monad","fn","inVal","currentPos","getIfPresent","match","resolver","alternative","PromiseStatus","executor","status","PENDING","allFuncs","promises","myapply","promiseCnt","myPromise","apply","__last__","finally","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","CancellablePromise","cancellator","cancel","ITERATION_STATUS","calculateSkips","next_strm","EO_STRM","MultiStreamDatasource","strms","selectedPos","activeStrm","findNextStrm","all_strms","SequenceDataSource","total","BEF_STRM","ArrayStreamDataSource","dataPos","max","FilteredStreamDatasource","filterFunc","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","lookupVal","loop","MappedStreamDataSource","mapFunc","lookAheadVal","AssocArrayCollector","ConfigCollector","FormDataCollector","FormData","QueryFormDataCollector","QueryFormStringCollector","formData","item1","item2","ArrayCollector","FlatMapStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","dsLoop","datasourceData","mappedData","currentDataSource","toDatasource","ds","Stream","of","dataSource","toAppend","toConcat","onElem","inval","strmR","startVal","val1","anyMatch","allMatch","noneMatch","comparator","newArr","collector","LazyStream","isOverLimits","ofStreamDataSource","nextFilter","t","stop","value1","value2","el1","el2","defineProperty","ofDomQuery","Reflect","customElements","polyfillWrapFlushCallback","a","HTMLElement","construct","setPrototypeOf","TagBuilder","extendsType","observedAttrs","withObservedAttributes","oAttrs","withConnectedCallback","connectedCallback","withDisconnectedCallback","disconnectedCallback","withAdoptedCallback","adoptedCallback","withAttributeChangedCallback","attributeChangedCallback","withExtendsType","withOptions","theOptions","withClass","withMarkup","applyCallback","outerCallback","protoCallback","finalCallback","define","_t_","scope","observedAttributes","XMLQuery","docType","parseXML","xml","DOMParser","parser","ActiveXObject","parseFromString","contentType","loadXML","createIe11DomQueryShim","isXMLParserError","toString","serialized","XMLSerializer","serializeToString","parserErrorText","joinstr","txt","parseType","XQ","module","exports","__WEBPACK_EXTERNAL_MODULE__177__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","definition","o","enumerable","prop","r","toStringTag","JSONCrypto","encryptedData","ExpiringCrypto","parentCrypto","hashSum","gcCycleCnt","storedMessages","lastCall","currTime","getTime","gcLimitReached","rotatingEncoded","MAX_GC_CYCLES"],"sourceRoot":""}