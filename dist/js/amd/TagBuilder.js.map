{"version":3,"file":"TagBuilder.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/AssocArray.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Config.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/TagBuilder.ts"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * various helpers to deal with associative\n * arrays. If someone feels uncomfortable using\n * The config system, this is similar!\n */\nimport {IValueHolder, Optional} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * A nop as assign functionality (aka ignore assign)\n */\nconst IGNORE_ASSIGN: IValueHolder<any> = new (class {\n    set value(value: any | Array<any>) {\n    }\n})();\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assign<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let assigner: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            lastPathItem.target[lastPathItem.key] = value;\n        }\n    })();\n    return assigner;\n}\n\n\nexport function append<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let appender: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            if(!Array.isArray(value)) {\n                value = [value];\n            }\n            if(!lastPathItem.target[lastPathItem.key]) {\n                lastPathItem.target[lastPathItem.key] = value\n            } else {\n                if(!Array.isArray(lastPathItem.target[lastPathItem.key])) {\n                    lastPathItem.target[lastPathItem.key] = [lastPathItem.target[lastPathItem.key]];\n                }\n                lastPathItem.target[lastPathItem.key].push(...value);\n            }\n        }\n    })();\n    return appender;\n}\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assignIf<T>(condition: boolean, target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    return assign(target, ...accessPath);\n}\n\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function appendIf<T>(condition: boolean, target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    return append(target, ...accessPath);\n}\n\nexport function resolve<T>(target, ...accessPath: string[]): T | null {\n    let ret = null;\n    accessPath = flattenAccessPath(accessPath);\n    let currPtr = target;\n    for(let cnt = 0; cnt < accessPath.length; cnt++) {\n        let accessKeyIndex: number | string = accessPath[cnt];\n        accessKeyIndex = arrayIndex(accessKeyIndex) != -1 ? arrayIndex(accessKeyIndex) : accessKeyIndex;\n        currPtr = currPtr?.[accessKeyIndex];\n        if('undefined' == typeof currPtr) {\n            return null;\n        }\n        ret = currPtr;\n    }\n    return currPtr;\n}\n\n\nfunction keyVal(key: string): string {\n    let start = key.indexOf(\"[\");\n\n    if (start >= 0) {\n        return key.substring(0, start);\n    } else {\n        return key;\n    }\n}\n\nfunction arrayIndex(key: string): number {\n    let start = key.indexOf(\"[\");\n    let end = key.indexOf(\"]\");\n    if (start >= 0 && end > 0 && start < end) {\n        return parseInt(key.substring(start + 1, end));\n    } else {\n        return -1;\n    }\n}\n\nfunction isArrayPos(currKey: string, arrPos: number): boolean {\n    return currKey === \"\" && arrPos >= 0;\n}\n\nfunction isNoArray(arrPos: number): boolean {\n    return arrPos == -1;\n}\n\nfunction alloc(arr: Array<any>, length: number, defaultVal = {}) {\n    let toAdd = [];\n    toAdd.length = length;\n    toAdd[length - 1] = defaultVal;\n    arr.push(...toAdd);\n}\n\n\nfunction flattenAccessPath(accessPath: string[]) {\n    return accessPath.flatMap(path => path.split(\"[\"))\n        .map(path => path.indexOf(\"]\") != -1 ? \"[\" + path : path)\n        .filter(path => path != \"\");\n}\n\n/**\n * builds up a path, only done if no data is present!\n * @param target\n * @param accessPath\n * @returns the last assignable entry\n */\nexport function buildPath(target, ...accessPath: string[]) {\n    accessPath = flattenAccessPath(accessPath);\n    //we now have a pattern of having the array accessors always in separate items\n    let parentPtr = target;\n    let parKeyArrPos = null;\n    let currKey = null;\n    let arrPos = -1;\n\n    for (let cnt = 0; cnt < accessPath.length; cnt++) {\n        currKey = keyVal(accessPath[cnt]);\n        arrPos = arrayIndex(accessPath[cnt]);\n        //it now is either key or arrPos\n        if (arrPos != -1) {\n            //case root(array)[5] -> root must be array and allocate 5 elements\n            //case root.item[5] root.item must be array and of 5 elements\n            if(!Array.isArray(parentPtr)) {\n                throw Error(\"Associative array referenced as index array in path reference\");\n            }\n\n            //we need to look ahead for proper allocation\n            //not end reached\n            let nextArrPos = -1;\n            if(cnt < accessPath.length - 1) {\n                nextArrPos = arrayIndex(accessPath[cnt + 1])\n            }\n            let dataPresent = 'undefined' != typeof parentPtr?.[arrPos];\n            //no data present check here is needed, because alloc only reserves if not present\n            alloc(parentPtr, arrPos + 1, nextArrPos != -1 ?[]: {});\n            parKeyArrPos = arrPos;\n            //we now go to the reserved element\n            if(cnt == accessPath.length - 1) {\n                parentPtr[arrPos] = (dataPresent) ? parentPtr[arrPos] : null;\n            } else {\n                parentPtr = parentPtr[arrPos];\n            }\n        } else {\n            if(Array.isArray(parentPtr)) {\n                throw Error(\"Index array referenced as associative array in path reference\");\n            }\n            //again look ahead whether the next value is an array or assoc array\n            let nextArrPos = -1;\n            if(cnt < accessPath.length - 1) {\n                nextArrPos = arrayIndex(accessPath[cnt + 1])\n            }\n            parKeyArrPos = currKey;\n            let dataPresent = 'undefined' != typeof parentPtr?.[currKey];\n            if(cnt == accessPath.length - 1) {\n                if(!dataPresent) {\n                    parentPtr[currKey] = null;\n                }\n            } else {\n                if(!dataPresent) {\n                    parentPtr[currKey] = nextArrPos == -1 ? {} : [];\n                }\n                parentPtr = parentPtr[currKey];\n            }\n        }\n    }\n\n    return {target: parentPtr, key: parKeyArrPos};\n\n}\n\nexport function deepCopy(fromAssoc: {[key: string]: any}): {[key: string]: any} {\n    return JSON.parse(JSON.stringify(fromAssoc));\n}\n\n/**\n * simple left to right merge\n *\n * @param assocArrays\n */\nexport function simpleShallowMerge(...assocArrays) {\n   return shallowMerge(true, false, ...assocArrays);\n}\n\n/**\n * Shallow merge as in config\n *\n * @param overwrite\n * @param withAppend\n * @param assocArrays\n */\nexport function shallowMerge(overwrite = true, withAppend = false, ...assocArrays) {\n    let target: {[key: string]: any} = {};\n    assocArrays.map(arr => {\n        return {arr, keys: Object.keys(arr)};\n    }).forEach(({arr, keys}) => {\n        keys.forEach(key => {\n            if(overwrite || !target?.[key]) {\n                if(!withAppend) {\n                    target[key] = arr[key];\n                } else {\n                    if (Array.isArray(arr[key])) {\n                        if('undefined' == typeof target?.[key]) {\n                            target[key] = new Es2019Array(...arr[key])\n                        } else if(!Array.isArray(target[key])) {\n                            let oldVal = target[key];\n                            target[key] = new Es2019Array(...[]);\n                            target[key].push(oldVal);\n                            target[key].push(...arr[key]);\n                        } else {\n                            target[key].push(...arr[key]);\n                        }\n                        //new Es2019Array(...arr[key]).forEach(item => this.append(key).value = item);\n                    } else {\n                        if('undefined' == typeof target?.[key]) {\n                            target[key] = arr[key];\n                        } else if(!Array.isArray(target[key])) {\n                            let oldVal = target[key];\n                            target[key] = new Es2019Array(...[]);\n                            target[key].push(oldVal);\n                            target[key].push(arr[key]);\n                        } else {\n                            target[key].push(arr[key]);\n                        }\n                    }\n                }\n            }\n        })\n    });\n    return target;\n}\n\n","import {Es2019Array} from \"./Es2019Array\";\nimport {IValueHolder, Optional, ValueEmbedder} from \"./Monad\";\nimport {Lang} from \"./Lang\";\nimport objAssign = Lang.objAssign;\nimport {append, appendIf, assign, assignIf, resolve, shallowMerge} from \"./AssocArray\";\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\nexport type ConfigDef = { [key: string]: any };\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        this._value = shallowMerge(overwrite, withAppend, this.value, other.value)\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        return append(this._value, ...accessPath);\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        return appendIf(condition, this._value, ...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        return assign(this.value, ...accessPath);\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return assignIf(condition, this._value, ...accessPath);\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(resolve(this.value, ...accessPath));\n    }\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n     * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if (!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if (this.isArray(arrPos)) {\n                if (currKey != \"\") {\n                    currAccessPos = Array.isArray(currAccessPos.value) ?\n                        Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !!(item?.[currKey] ?? false);\n                        })?.[currKey]) :\n                    Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if (!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if (currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\n\nimport {ICollector, IStreamDataSource, ITERATION_STATUS} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport {_global$} from \"./Global\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport objToArray = Lang.objToArray;\nimport {append, assign, simpleShallowMerge} from \"./AssocArray\";\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\ninterface IDomQuery {\n    /**\n     * reference to the systems global object\n     * (globalThis, window, global, depending on the environment)\n     */\n    readonly global: any;\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n\n    /**\n     * accumulated top element offsetWidth\n     */\n    readonly offsetWidth: number;\n    /**\n     * accumulated top element offsetHeight\n     */\n    readonly offsetHeight: number;\n    /**\n     * accumulated top element offsetLeft\n     */\n    readonly offsetLeft: number;\n    /**\n     * accumulated top element offsetTop\n     */\n    readonly offsetTop: number;\n\n\n    /**\n     * abbreviation for inputValue\\.value to make\n     * the code terser\n     */\n    val: string | boolean;\n\n    /**\n     * the underlying form elements as DomQuery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: any;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: any;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * inner html property\n     * setter and getter which works directly on strings\n     */\n    innerHTML: string;\n\n    /**\n     * same as innerHTML\n     * will be removed once\n     * my code is transitioned\n     * @deprecated do not use anymore, user innerHTML instead\n     */\n    innerHtml: string;\n\n    /**\n     * convenience for dq.id.value to make the code a little tighter\n     */\n    nodeId: string;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded ( highest level )\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n\n    /**\n     * closest, walks up the dom tree to fid the closest element to match\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchEvent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    lastElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * Runs an eval and keeps the evaluated code in the head\n     * This is a corner condition, where we want to update the head with custom\n     * code and leave the code in (instead of deleting ig)\n     *\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {DomQuery} DomQuery of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    append(elem: DomQuery): DomQuery;\n\n    /**\n     * replace convenience function replaces the domquery elements with the\n     * elements passed as parameter\n     * @param toReplace the replacement elements\n     * @return a reference on the replacement elements\n     */\n    replace(toReplace: DomQuery): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    prepend(elem: DomQuery): DomQuery;\n\n    /**\n     * prepend equivalent to appendTo\n     *\n     * @param elem the element to prepend to\n     */\n    prependTo(elem: DomQuery): DomQuery;\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param charSet\n     */\n    loadScriptEval(src: string, delay: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the DomQuery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery;\n\n    /**\n     * first parents with a matching selector\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery;\n\n    /**\n     * all parents until the selector match stops\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery;\n\n\n    /**\n     * the parent of the elements\n     */\n    parent(): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another DomQuery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the element must be left in the head after eval default === false\n     * @param whiteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky?: boolean, whiteListed?: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinString?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinString?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): {[key: string]: any};\n\n    /**\n     * fetches the sub-nodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    // observable: Observable<DomQuery>;\n\n    // observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    get stream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    get lazyStream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return new Es2019Array(...this.values).every(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n\n    get asArray(): DomQuery[] {\n        // filter not supported by IE11\n        let items = new Es2019Array(...this.rootNode).filter(item => {\n            return item != null\n        }).map(item => {\n            return DomQuery.byId(item)\n        });\n        return items as DomQuery[];\n    }\n\n    get offsetWidth(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetHeight(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetLeft(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetTop(): number {\n        return new Es2019Array(this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as any).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get asNodeArray(): Array<Element> {\n        return new Es2019Array(...this.rootNode.filter(item => item != null));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/<!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(...\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(((item) => id == item.id) as any)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = new Es2019Array(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce((reduction: any, item: Element) => reduction.concat([item]), res);\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        return this.asArray\n            .some(item => this._mozMatchesSelector(item.getAsElem(0).value, selector));\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        new Es2019Array(...this.rootNode)\n            .forEach((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                new Es2019Array(...scriptsToProcess).forEach(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.asArray\n                .flatMap(item => [...item.values])\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) // preceding 2, following == 4)\n                .forEach(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n            const _toReplace = DomQuery.byId(toReplace);\n            const tagName = _toReplace.tagName.orElse(\"\").value;\n            const head = DomQuery.byTagName(\"head\");\n\n            if (tagName && eqi(tagName, \"link\") && eqi(toReplace.getAttribute(\"rel\"), \"stylesheet\")) {\n                const rel = toReplace.getAttribute(\"rel\");\n                //if possible we are now replacing the existing elements where we reference this stylesheet\n                const matches = head.querySelectorAll(`link[rel='stylesheet'][href='${rel}']`);\n\n                if(matches.length) {\n                    matches.replace(_toReplace);\n                } else {\n                    head.append(_toReplace);\n                }\n            } else if (tagName && eqi(tagName, \"style\")) {\n                let innerText = _toReplace.innerHTML.replace(/\\s+/gi, \"\");\n                let styles = head.querySelectorAll(\"style\");\n                let filteredStyles = styles.asArray.filter(style => {\n                    return style.innerHTML.replace(/\\s+/gi, \"\") == innerText;\n                });\n                styles = new DomQuery(...filteredStyles);\n                if(!styles.length) { //already present\n                    head.append(_toReplace);\n                }\n            }\n        };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.asArray\n            .flatMap(item => [...item.values])\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .forEach(item => execCss(item as HTMLElement));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n\n        let finalOptions: any = {\n            bubbles: true, cancelable: true\n        }\n        finalOptions = simpleShallowMerge(finalOptions, options);\n\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Object.keys(finalOptions).forEach(key => event[key] = finalOptions[key]);\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\");\n    }\n\n    innerText(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => {\n                return [text1, text2].join(joinString)\n            }, \"\");\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = {}): {[key: string]: any} {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = simpleShallowMerge(toMerge);\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                append(target, name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        assign(target, name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        append(target, name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res = this.asArray\n            .flatMap( item => {\n                return item.childNodes.asArray;\n            })\n            .filter(item => {\n                return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n            })\n            .reduce((reduced: Array<any>, item: DomQuery) => {\n                reduced.push((<any>item?.value?.value)?.data ?? \"\");\n                return reduced;\n            }, []);\n        /*let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;*/\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): DomQuery {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): DomQuery {\n        let domQueries = this.asArray;\n        const ret = new DomQuery(...domQueries.concat(toAttach.asArray));\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return new DomQuery(...ret.asArray.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }));\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(...objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\n\n\n\n\n\nclass Es2019Array_<T>  extends Array<T>{\n\n    _another: T[];\n\n    constructor(...another: T[]) {\n        super(...another);\n        if((another as any)._another)  {\n            this._another = (another as any)._another;\n        } else {\n            this._another = another;\n        }\n\n        //for testing it definitely runs into this branch because we are on es5 level\n        //if (!(<any>Array.prototype).flatMap) {\n            this.flatMap = (flatMapFun) => this._flatMap(flatMapFun) as any;\n        //}\n        //if (!(<any>Array.prototype).flat) {\n            this.flat = (flatLevel: number = 1) => this._flat(flatLevel);\n        //}\n    }\n\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] {\n        const ret = Array.prototype.map.call(this._another, callbackfn, thisArg);\n        return new (_Es2019Array as any) (... ret);\n    }\n\n    concat(...items): T[] {\n        const ret = Array.prototype.concat.call(this._another, ...items);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    reverse(): T[] {\n        const ret = Array.prototype.reverse.call(this._another);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    slice(start?: number, end?: number): T[] {\n        const ret = Array.prototype.slice.call(this._another, start, end);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        const ret = Array.prototype.splice.call(this._another, start, deleteCount);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        const ret = Array.prototype.filter.call(this._another, predicate, thisArg);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n        const ret = Array.prototype.reduce.call(this._another, callbackfn, initialValue);\n        return ret;\n    }\n\n    /*reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T {\n        const ret = Array.prototype.reduceRight.call(callbackfn, initialValue);\n        return ret;\n    }*/\n\n    private _flat(flatDepth = 1) {\n        return this._flatResolve(this._another, flatDepth);\n    }\n\n    private _flatResolve(arr, flatDepth = 1) {\n        //recursion break\n        if (flatDepth == 0) {\n            return arr;\n        }\n        let res = [];\n\n        let reFlat = item => {\n            item = Array.isArray(item) ? item : [item];\n            let mapped = this._flatResolve(item, flatDepth - 1);\n            res = res.concat(mapped);\n        };\n        arr.forEach(reFlat)\n\n        return new Es2019Array(...res);\n    }\n\n    private _flatMap(mapperFunction: Function): any {\n        let res = this.map(item => mapperFunction(item));\n        return this._flatResolve(res);\n    }\n}\n\n//let _Es2019Array = function<T>(...data: T[]) {};\n\n//let oldProto = Es2019Array.prototype;\n\nexport function _Es2019Array<T>(...data: T[]): Es2019Array_<T> {\n    let ret = new Es2019Array_<T>(...data);\n    let proxied = new Proxy<Es2019Array_<T>>(ret, {\n        get(target: Es2019Array_<unknown>, p: string | symbol, receiver: any): any {\n            if(\"symbol\" == typeof p) {\n\n                return target._another[p];\n            }\n            if(!isNaN(parseInt(p as string))) {\n                return target._another[p];\n            } else {\n                return target[p];\n            }\n        },\n\n        set(target, property, value): boolean {\n            target[property] = value;\n            target._another[property] = value;\n            return true;\n        }\n\n    });\n    return proxied;\n};\n\n/**\n * this is the switch between normal array and our shim\n * the shim is only provided in case the native browser\n * does not yet have flatMap support on arrays\n */\nexport var Es2019Array: any = (Array.prototype.flatMap) ? function<T>(...data: T[]): T[] {\n    return data;\n} : _Es2019Array;","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return new Es2019Array(...pack.concat(Array.prototype.slice.call(obj, offset)));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport {Config} from \"./Config\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//poliyfill from @webcomponents/webcomponentsjs\nimport {DomQuery} from \"./DomQuery\";\nimport {_global$} from \"./Global\";\n\n\nif (\"undefined\" != typeof _global$) {\n    (function () {\n        if (void 0 === _global$().Reflect || void 0 === _global$().customElements || (<any>_global$().customElements).polyfillWrapFlushCallback) return;\n        const a = HTMLElement;\n        _global$().HTMLElement = {\n            HTMLElement: function HTMLElement() {\n                return Reflect.construct(a, [], this.constructor)\n            }\n        }.HTMLElement, HTMLElement.prototype = a.prototype, HTMLElement.prototype.constructor = HTMLElement, Object.setPrototypeOf(HTMLElement, a);\n    })();\n}\n\n/**\n * beginning custom tag support\n *\n * This api is still experimental\n * and might be interwoven with DomQuery\n * so it is bound to change\n *\n * it follows a builder pattern to allow easier creations\n * with less code of custom tags\n */\nexport class TagBuilder {\n    tagName: string;\n    connectedCallback?: Function;\n    clazz?: CustomElementConstructor;\n    extendsType: CustomElementConstructor = HTMLElement;\n    theOptions: ElementDefinitionOptions | null;\n    markup: string;\n    disconnectedCallback?: Function;\n    adoptedCallback ?: Function;\n    attributeChangedCallback ?: Function;\n    observedAttrs: string[] = [];\n\n    // noinspection JSUnusedGlobalSymbols\n    static withTagName(tagName): TagBuilder {\n        return new TagBuilder(tagName);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withObservedAttributes(...oAttrs) {\n        this.observedAttrs = oAttrs;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withConnectedCallback(callback: Function) {\n        this.connectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withDisconnectedCallback(callback: Function) {\n        this.disconnectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAdoptedCallback(callback: Function) {\n        this.adoptedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAttributeChangedCallback(callback: Function) {\n        this.attributeChangedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withExtendsType(extendsType: CustomElementConstructor) {\n        this.extendsType = extendsType;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withOptions(theOptions) {\n        this.theOptions = theOptions;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withClass(clazz) {\n        if (this.markup) {\n            throw Error(\"Markup already defined, markup must be set in the class\");\n        }\n        this.clazz = clazz;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withMarkup(markup) {\n        if (this.clazz) {\n            throw Error(\"Class already defined, markup must be set in the class\");\n        }\n        this.markup = markup;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    register() {\n        if (!this.clazz && !this.markup) {\n            throw Error(\"Class or markup must be defined\")\n        }\n        if (this.clazz) {\n\n            let applyCallback = (name: string) => {\n                let outerCallback = this[name];\n                let protoCallback = (<any>this.clazz.prototype)[name];\n                let finalCallback = outerCallback || protoCallback;\n                if (finalCallback) {\n                    (<any>this.clazz.prototype)[name] = function () {\n                        if(outerCallback) {\n                            finalCallback.apply(DomQuery.byId(this));\n                        } else {\n                            protoCallback.apply(<any>this);\n                        }\n                    }\n                }\n            }\n\n            applyCallback(\"connectedCallback\");\n            applyCallback(\"disconnectedCallback\");\n            applyCallback(\"adoptedCallback\");\n            applyCallback(\"attributeChangedCallback\");\n\n            //TODO how do we handle the oAttrs?\n            if (this.observedAttrs.length) {\n                Object.defineProperty(this.clazz.prototype, \"observedAttributes\", {\n                    get(): any {\n                        return this.observedAttrs;\n                    }\n                });\n            }\n\n            _global$().customElements.define(this.tagName, this.clazz, this.theOptions || null);\n        } else {\n            let _t_ = this;\n            let applyCallback = (name: string, scope: any) => {\n                if (_t_[name]) {\n                    _t_[name].apply(DomQuery.byId(<any>scope));\n                }\n            };\n\n            _global$().customElements.define(this.tagName, class extends this.extendsType {\n                constructor() {\n                    super();\n                    this.innerHTML = _t_.markup;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                static get observedAttributes() {\n                    return _t_.observedAttrs;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                connectedCallback() {\n                    applyCallback(\"connectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                disconnectedCallback() {\n                    applyCallback(\"disconnectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                adoptedCallback() {\n                    applyCallback(\"adoptedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                attributeChangedCallback() {\n                    applyCallback(\"attributeChangedCallback\", this);\n                }\n\n            }, this.theOptions || null);\n        }\n    }\n}\n"],"names":["IGNORE_ASSIGN","value","assign","target","accessPath","length","lastPathItem","buildPath","key","append","Array","isArray","push","keyVal","start","indexOf","substring","arrayIndex","end","parseInt","alloc","arr","defaultVal","toAdd","flattenAccessPath","flatMap","path","split","map","filter","parentPtr","parKeyArrPos","currKey","arrPos","cnt","Error","nextArrPos","dataPresent","simpleShallowMerge","assocArrays","overwrite","withAppend","keys","Object","forEach","Es2019Array","oldVal","shallowMerge","Lang","ConfigEntry","ValueEmbedder","constructor","rootElem","super","this","_value","val","absent","fromNullable","ALLOWED_SUBMITTABLE_ELEMENTS","trim","isString","eqi","objToArray","ElementAttribute","element","name","get","orElse","values","getAttribute","setAttribute","getClass","static","valueKey","Style","style","DEFAULT_WHITELIST","DomQuery","rootNode","pos","_limits","Optional","isAbsent","foundElement","querySelectorAll","getAsElem","allElems","global","stream","lazyStream","id","tagName","getIf","nodeName","isTag","toLowerCase","type","inputValue","isPresent","nodeId","checked","every","el","newChecked","eachElem","elements","deepElements","querySelectorAllDeep","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","disabled","attr","removeAttribute","item","childNodes","childNodeArr","concat","asArray","byId","offsetWidth","elem","reduce","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","asNodeArray","selector","document","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","code","nonce","globalEval","globalEvalSticky","markup","doc","implementation","createHTMLDocument","lowerMarkup","search","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","closest","_closestDeep","_closest","includeRoot","res","subItems","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","first","newInnerHTML","dispatchEvent","evt","retArr","innerHtml","newInnerHtml","filterSelector","matched","_mozMatchesSelector","some","nodeSelector","selectorStage","func","len","firstElem","lastElem","each","replace","toReplace","asElem","parent","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","insertBefore","insertAfter","last","lastNode","reArr","head","getElementsByTagName","script","newScriptElement","appendChild","applyNonce","appendTo","orElseLazy","loadScriptEval","src","delay","_loadScriptEval","loadScriptEvalSticky","toInsertParams","existingItem","existingElement","nextSibling","insertElem","elseValue","allParents","ret","firstParent","parentsWhileMatch","host","copyAttrs","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","fromMarkup","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","sticky","whitelisted","evalCollectedScripts","scriptsToProcess","joinedScripts","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","sort","node1","node2","compareDocumentPosition","e","console","error","message","description","_toReplace","rel","matches","styles","filteredStyles","execCss","click","fireEvent","addEventListener","listener","options","removeEventListener","eventName","finalOptions","bubbles","cancelable","ownerDocument","nodeType","EventClass","Event","MouseEvent","KeyboardEvent","event","synthetic","createEventObject","textContent","joinString","text1","text2","encodeFormElement","toMerge","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","from","cDATAAsString","reduced","data","subNodes","to","Math","min","limits","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","current","reset","attachShadow","params","mode","shadowElement","waitUntilDom","condition","childList","subtree","timeout","interval","root","Promise","success","observer","MUT_ERROR","findElement","MutationObserver","mutTimeout","setTimeout","disconnect","callback","mutationList","mut","clearTimeout","observableOpts","observe","setInterval","clearInterval","shadowElements","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","domQueries","idx","notFound","prependTo","prepend","foundNodes","selectors","cnt2","levelSelector","toMatch","prototypeOwner","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","i","srcNode","createSourceNode","nonceCheck","marker","Date","now","random","attrName","Es2019Array_","another","_another","flatMapFun","_flatMap","flat","flatLevel","_flat","callbackfn","thisArg","_Es2019Array","prototype","items","reverse","splice","deleteCount","predicate","initialValue","flatDepth","_flatResolve","mapperFunction","Proxy","p","receiver","isNaN","set","property","_global$","globalThis","window","g","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","equalsIgnoreCase","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","theArgs","TypeError","nextSource","nextKey","hasOwnProperty","Monad","fn","inVal","preprocessKeys","currentPos","getIfPresent","match","toJson","JSON","stringify","resolve","resolver","newVal","alternative","ITERATION_STATUS","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","prop","r","toStringTag","Reflect","customElements","polyfillWrapFlushCallback","a","HTMLElement","construct","setPrototypeOf","TagBuilder","extendsType","observedAttrs","withObservedAttributes","oAttrs","withConnectedCallback","connectedCallback","withDisconnectedCallback","disconnectedCallback","withAdoptedCallback","adoptedCallback","withAttributeChangedCallback","attributeChangedCallback","withExtendsType","withOptions","theOptions","withClass","withMarkup","register","applyCallback","outerCallback","protoCallback","finalCallback","apply","define","_t_","scope","observedAttributes"],"sourceRoot":""}