{"version":3,"file":"TagBuilder.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/TagBuilder.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/global","webpack:///webpack/startup"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {\n    ArrayCollector,\n    AssocArrayCollector,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS, LOOKAHEAD_RESULT\n} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport {_global$} from \"./Global\";\nimport objToArray = Lang.objToArray;\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\ninterface IDomQuery {\n    /**\n     * reference to the systems global object\n     * (globalThis, window, global, depending on the environment)\n     */\n    readonly global: any;\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n\n    /**\n     * accumulated top element offsetWidth\n     */\n    readonly offsetWidth: number;\n    /**\n     * accumulated top element offsetHeight\n     */\n    readonly offsetHeight: number;\n    /**\n     * accumulated top element offsetLeft\n     */\n    readonly offsetLeft: number;\n    /**\n     * accumulated top element offsetTop\n     */\n    readonly offsetTop: number;\n\n\n    /**\n     * abbreviation for inputValue\\.value to make\n     * the code terser\n     */\n    val: string | boolean;\n\n    /**\n     * the underlying form elements as DomQuery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * inner html property\n     * setter and getter which works directly on strings\n     */\n    innerHTML: string;\n\n    /**\n     * same as innerHTML\n     * will be removed once\n     * my code is transitioned\n     * @deprecated do not use anymore, user innerHTML instead\n     */\n    innerHtml: string;\n\n    /**\n     * convenience for dq.id.value to make the code a little bit tighter\n     */\n    nodeId: string;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded ( highest level )\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n\n    /**\n     * closest, walks up the dom tree to fid the closest element to match\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchEvent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    lastElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * Runs an eval and keeps the evaluated code in the head\n     * This is a corner condition, where we want to update the head with custom\n     * code and leave the code in (instead of deleting ig)\n     *\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {DomQuery} DomQuery of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    append(elem: DomQuery): DomQuery;\n\n    /**\n     * replace convenience function replaces the domquery elements with the\n     * elements passed as parameter\n     * @param toReplace the replacement elements\n     * @return a reference on the replacement elements\n     */\n    replace(toReplace: DomQuery): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    prepend(elem: DomQuery): DomQuery;\n\n    /**\n     * prepend equivalent to appendTo\n     *\n     * @param elem the element to prepend to\n     */\n    prependTo(elem: DomQuery): DomQuery;\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param charSet\n     */\n    loadScriptEval(src: string, delay: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the DomQuery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery;\n\n    /**\n     * first parents with a matching selector\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery;\n\n    /**\n     * all parents until the selector match stops\n     * @param tagName\n     */\n    parentsWhileMatch(selector: string): DomQuery;\n\n\n    /**\n     * the parent of the elements\n     */\n    parent(): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another DomQuery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the element must be left in the head after eval default === false\n     * @param whiteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky?: boolean, whiteListed?: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinString?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinString?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the sub-nodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    // observable: Observable<DomQuery>;\n\n    // observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc.\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        // filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => {\n            return item != null\n        })\n            .map(item => {\n                return DomQuery.byId(item)\n            }).collect(new ArrayCollector()));\n    }\n\n    get offsetWidth(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get offsetHeight(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get offsetLeft(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get offsetTop(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(...this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/\\<\\!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any>LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        const ret = this.lazyStream\n            .map(item => this._mozMatchesSelector(item.getAsElem(0).value, selector))\n            .filter(match => match)\n            .first();\n        return ret.isPresent();\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n               ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                Stream.of(...scriptsToProcess).each(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(...item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) // preceding 2, following == 4)\n                .each(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n                const _toReplace = DomQuery.byId(toReplace);\n                const tagName = _toReplace.tagName.orElse(\"\").value;\n                const head = DomQuery.byTagName(\"head\");\n\n                if (tagName && eqi(tagName, \"link\") && eqi(toReplace.getAttribute(\"rel\"), \"stylesheet\")) {\n                    const rel = toReplace.getAttribute(\"rel\");\n                    //if possible we are now replacing the existing elements where we reference this stylesheet\n                    const matches = head.querySelectorAll(`link[rel='stylesheet'][href='${rel}']`);\n\n                    if(matches.length) {\n                        matches.replace(_toReplace);\n                    } else {\n                        head.append(_toReplace);\n                    }\n                } else if (tagName && eqi(tagName, \"style\")) {\n                    let innerText = _toReplace.innerHTML.replace(/\\s+/gi, \"\");\n                    let styles = head.querySelectorAll(\"style\");\n                    styles = styles.stream.filter(style => {\n                        return style.innerHTML.replace(/\\s+/gi, \"\") == innerText;\n                    }).collect(new DomQueryCollector())\n                    if(!styles.length) { //already present\n                        head.append(_toReplace);\n                    }\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(...item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n        let finalOptions = Stream.ofAssoc({\n            bubbles: true, cancelable: true\n        }).concat(Stream.ofAssoc(options)).collect(new AssocArrayCollector());\n        \n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Stream.ofAssoc(finalOptions).each(([key, value]): void => {\n                    event[key] = value;\n                });\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\").value;\n    }\n\n    innerText(joinString: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinString), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        target.assign(name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): LOOKAHEAD_RESULT<DomQuery> {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return {\n                iterations: cnt,\n                value: ITERATION_STATUS.EO_STRM\n            };\n        }\n        return {\n            iterations: cnt,\n            value: new DomQuery(this.values[this.pos + cnt])\n        };\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): any {\n        const ret = this.lazyStream.concat(toAttach.lazyStream).collect(new DomQueryCollector());\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return ret.lazyStream.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }).collect(new DomQueryCollector());\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {ArrayCollector, AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return Stream.of(...keys)\n            .flatMap(item => {\n                return Stream.of(...item.split(/\\]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            })\n\n            .collect(new ArrayCollector());\n    }\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\nconst ALL_VALUES = \"*\";\n\n\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assings an new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambigous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * returns the first config level as streeam\n     */\n    get stream(): Stream<[string, any]> {\n        return Stream.of(... Object.keys(this.value)).map(key => [key, this.value[key]]);\n    }\n    \n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semy typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        let currAccessPos = null;\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        const ABSENT = \"__ABSENT__\";\n        currAccessPos = this.configDef;\n\n\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos = (Array.isArray(currAccessPos)) ?\n                        Stream.of(...currAccessPos)\n                            .filter(item => !!(item?.[currKey] ?? false))\n                            .map(item => item?.[currKey]).first() :\n                        Optional.fromNullable(currAccessPos?.[currKey] ?? null);\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos)) ?\n                        Stream.of(...currAccessPos)\n                            .filter(item => Array.isArray(item))\n                            .flatMap(item => Stream.of(...item)).first() : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos)) ? Stream.of(...currAccessPos)\n                        .filter(item => !! (item?.[currKey] ?? false))\n                        .map(item => item?.[currKey])\n                        .first():\n                Optional.fromNullable(currAccessPos?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            currAccessPos = currAccessPos.value;\n\n            //no further testing needed, from this point onwards we are on our own\n            if(currAccessPos == CONFIG_ANY) {\n                return;\n            }\n        }\n\n    }\n\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\n\nimport {Config} from \"./Monad\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fullfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport declare type LOOKAHEAD_RESULT<T> = {iterations: number, value: T} | {iterations: number, value: ITERATION_STATUS};\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * returns the next element in the stream\n     * difference to next is, that the internal data position\n     * is not changed, so next still will deliver the next item from the current\n     * data position. Look ahead is mostly needed internally\n     * by possible endless data constructs which have no fixed data boundary, or index\n     * positions. (aka infinite sets, or flatmapped constructs)\n     *\n     * @returns a tuple of iterations and the result, iterations is the number of steps for the result\n     *\n     */\n    lookAhead(cnt ?: number): LOOKAHEAD_RESULT<T>;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): LOOKAHEAD_RESULT<T> {\n        //lets clone\n        const streamsToProcess = this.strms.slice(this.selectedPos);\n\n        if(!streamsToProcess.length) {\n            return {iterations: cnt, value: ITERATION_STATUS.EO_STRM};\n        }\n\n        const allStreams = [...streamsToProcess];\n        let skippedCount = 0;\n        while(allStreams.length) {\n            let nextStream = allStreams.shift();\n            let lookAheadResult = nextStream.lookAhead(cnt);\n\n            if (lookAheadResult.value !== ITERATION_STATUS.EO_STRM) {\n                return {iterations: skippedCount + lookAheadResult.iterations, value: lookAheadResult.value};\n            }\n            // -1 because the last return value is virtual and not present\n            skippedCount = skippedCount + lookAheadResult.iterations - 1;\n            cnt -= skippedCount;\n        }\n        return {iterations: skippedCount + 1, value: ITERATION_STATUS.EO_STRM};\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): LOOKAHEAD_RESULT<number> {\n        if ((this.value + cnt) > this.total - 1) {\n            return {iterations: this.total, value: ITERATION_STATUS.EO_STRM};\n        } else {\n            return {iterations: cnt, value: this.value + cnt};\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): LOOKAHEAD_RESULT<T> {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return {iterations: this.value.length - this.dataPos, value: ITERATION_STATUS.EO_STRM};\n        }\n        return {iterations: cnt, value: this.value[this.dataPos + cnt]};\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)).value != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next.value)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice,\n            // because its state might change, so if indexed,\n            // we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * this lookahead is special\n     * wo only count the unfiltered skipped items\n     * as return item!\n     * The logic of the stream flow, filtered items do not exist\n     * and hence are not actively skipped!\n     *\n     * @param cnt the number of look aheads\n     */\n    lookAhead(cnt = 1): LOOKAHEAD_RESULT<T> {\n        let lookupVal: LOOKAHEAD_RESULT<T>;\n        let skipped = 0;\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)).value != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal.value)) {\n              //  cnt--;\n                skipped ++;\n                cnt--;\n                //the filter idx is needed to prevent double calls into the filter\n                //function within a filter loop\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        if(lookupVal.value == ITERATION_STATUS.EO_STRM) {\n            skipped++;\n        }\n        return {\n            iterations: skipped,\n            value: lookupVal.value\n        } as LOOKAHEAD_RESULT<T>;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): LOOKAHEAD_RESULT<S> {\n        let lookAheadVal: LOOKAHEAD_RESULT<T> = this.inputDataSource.lookAhead(cnt);\n        if(lookAheadVal.value == ITERATION_STATUS.EO_STRM) {\n            return lookAheadVal as LOOKAHEAD_RESULT<S>;\n        }\n        //We have to remap, to fullfill the typing\n        return {\n            iterations: lookAheadVal.iterations,\n            value: this.mapFunc(lookAheadVal.value) as S\n        }\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    lookAhead(cnt = 1): LOOKAHEAD_RESULT<S> {\n\n        let lookAhead = this?.activeDataSource?.lookAhead(cnt);\n        if (this?.activeDataSource && lookAhead.value != ITERATION_STATUS.EO_STRM) {\n            //this should cover 95% of all cases\n            return lookAhead;\n        }\n\n        if (this.activeDataSource) {\n            cnt -= (lookAhead.iterations - 1);\n        }\n\n        //the idea is basically to look into the streams sub-sequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them, so we introduce a small o2 here\n        const orig_cnt = cnt;\n        for (let dsLoop = 1; true; dsLoop++) {\n            let datasourceData = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            //no embedded data anymore? we are done, data\n            //can either be a scalar an array or another datasource\n            if (datasourceData.value === ITERATION_STATUS.EO_STRM) {\n                return datasourceData as LOOKAHEAD_RESULT<ITERATION_STATUS>;\n            }\n            let mappedData = this.mapFunc(datasourceData.value as T);\n\n            //it either comes in as datasource or as array\n            //both cases must be unified into a datasource\n            let currentDataSource = this.toDatasource(mappedData);\n            //we now run again  a lookahead\n            let ret = currentDataSource.lookAhead(cnt);\n            //if the value is found then we are set\n            if (ret.value != ITERATION_STATUS.EO_STRM) {\n                return {\n                    iterations: orig_cnt,\n                    value: ret.value as S\n                };\n            }\n            //reduce the next lookahead by the number of elements\n            //we are now skipping in the current data source\n            cnt -= (ret.iterations - 1);\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS, LOOKAHEAD_RESULT,\n    MappedStreamDataSource, MultiStreamDatasource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns the currently element selected in the stream\n     */\n    current(): T | ITERATION_STATUS\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T>, IStreamDataSource<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    current(): T | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        if(this.pos >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos];\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): LOOKAHEAD_RESULT<T> {\n        if((this.pos + cnt) >= this.value.length) {\n            return {\n                iterations: this.value.length + 1,\n                value: ITERATION_STATUS.EO_STRM\n            };\n        }\n        return {\n            iterations: this.pos + cnt,\n            value: this.value[this.pos + cnt]\n        };\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): LOOKAHEAD_RESULT<T> {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.ofStreamDataSource(new MultiStreamDatasource(this, toAppend as any) as any)\n        //return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//poliyfill from @webcomponents/webcomponentsjs\nimport {DomQuery} from \"./DomQuery\";\nimport {_global$} from \"./Global\";\n\n\nif (\"undefined\" != typeof _global$) {\n    (function () {\n        if (void 0 === _global$().Reflect || void 0 === _global$().customElements || (<any>_global$().customElements).polyfillWrapFlushCallback) return;\n        const a = HTMLElement;\n        _global$().HTMLElement = {\n            HTMLElement: function HTMLElement() {\n                return Reflect.construct(a, [], this.constructor)\n            }\n        }.HTMLElement, HTMLElement.prototype = a.prototype, HTMLElement.prototype.constructor = HTMLElement, Object.setPrototypeOf(HTMLElement, a);\n    })();\n}\n\n/**\n * beginning custom tag support\n *\n * This api is still experimental\n * and might be interwoven with DomQuery\n * so it is bound to change\n *\n * it follows a builder pattern to allow easier creations\n * with less code of custom tags\n */\nexport class TagBuilder {\n    tagName: string;\n    connectedCallback?: Function;\n    clazz?: CustomElementConstructor;\n    extendsType: CustomElementConstructor = HTMLElement;\n    theOptions: ElementDefinitionOptions | null;\n    markup: string;\n    disconnectedCallback?: Function;\n    adoptedCallback ?: Function;\n    attributeChangedCallback ?: Function;\n    observedAttrs: string[] = [];\n\n    // noinspection JSUnusedGlobalSymbols\n    static withTagName(tagName): TagBuilder {\n        return new TagBuilder(tagName);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withObservedAttributes(...oAttrs) {\n        this.observedAttrs = oAttrs;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withConnectedCallback(callback: Function) {\n        this.connectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withDisconnectedCallback(callback: Function) {\n        this.disconnectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAdoptedCallback(callback: Function) {\n        this.adoptedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAttributeChangedCallback(callback: Function) {\n        this.attributeChangedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withExtendsType(extendsType: CustomElementConstructor) {\n        this.extendsType = extendsType;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withOptions(theOptions) {\n        this.theOptions = theOptions;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withClass(clazz) {\n        if (this.markup) {\n            throw Error(\"Markup already defined, markup must be set in the class\");\n        }\n        this.clazz = clazz;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withMarkup(markup) {\n        if (this.clazz) {\n            throw Error(\"Class already defined, markup must be set in the class\");\n        }\n        this.markup = markup;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    register() {\n        if (!this.clazz && !this.markup) {\n            throw Error(\"Class or markup must be defined\")\n        }\n        if (this.clazz) {\n\n            let applyCallback = (name: string) => {\n                let outerCallback = this[name];\n                let protoCallback = (<any>this.clazz.prototype)[name];\n                let finalCallback = outerCallback || protoCallback;\n                if (finalCallback) {\n                    (<any>this.clazz.prototype)[name] = function () {\n                        if(outerCallback) {\n                            finalCallback.apply(DomQuery.byId(this));\n                        } else {\n                            protoCallback.apply(<any>this);\n                        }\n                    }\n                }\n            }\n\n            applyCallback(\"connectedCallback\");\n            applyCallback(\"disconnectedCallback\");\n            applyCallback(\"adoptedCallback\");\n            applyCallback(\"attributeChangedCallback\");\n\n            //TODO how do we handle the oAttrs?\n            if (this.observedAttrs.length) {\n                Object.defineProperty(this.clazz.prototype, \"observedAttributes\", {\n                    get(): any {\n                        return this.observedAttrs;\n                    }\n                });\n            }\n\n            _global$().customElements.define(this.tagName, this.clazz, this.theOptions || null);\n        } else {\n            let _t_ = this;\n            let applyCallback = (name: string, scope: any) => {\n                if (_t_[name]) {\n                    _t_[name].apply(DomQuery.byId(<any>scope));\n                }\n            };\n\n            _global$().customElements.define(this.tagName, class extends this.extendsType {\n                constructor() {\n                    super();\n                    this.innerHTML = _t_.markup;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                static get observedAttributes() {\n                    return _t_.observedAttrs;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                connectedCallback() {\n                    applyCallback(\"connectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                disconnectedCallback() {\n                    applyCallback(\"disconnectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                adoptedCallback() {\n                    applyCallback(\"adoptedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                attributeChangedCallback() {\n                    applyCallback(\"attributeChangedCallback\", this);\n                }\n\n            }, this.theOptions || null);\n        }\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(356);\n"],"names":["ALLOWED_SUBMITTABLE_ELEMENTS","trim","Lang","isString","eqi","equalsIgnoreCase","objToArray","waitUntilDom","root","condition","options","attributes","childList","subtree","timeout","interval","Promise","success","error","observer","MUT_ERROR","Error","findElement","childNodes","filter","item","first","value","querySelectorAll","foundElement","DomQuery","MutationObserver","setTimeout","disconnect","mutationList","found","map","mut","target","isPresent","clearTimeout","eachElem","observe","setInterval","clearInterval","element","name","defaultVal","val","this","get","orElse","values","length","getAttribute","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","style","Style","DEFAULT_WHITELIST","rootNode","pos","_limits","Optional","isAbsent","push","getAsElem","allElems","_global$","getIf","isTag","tagName","nodeName","toLowerCase","absent","inputValue","id","Stream","of","allMatch","el","checked","newChecked","querySelectorAllDeep","queryStr","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","childNodeArr","concat","asArray","LazyStream","byId","collect","ArrayCollector","elem","offsetWidth","reduce","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","selector","document","indexOf","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","globalEvalSticky","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","search","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","closest","_closestDeep","_closest","includeRoot","res","subItems","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","newInnerHTML","dispatchEvent","evt","retArr","newInnerHtml","filterSelector","matched","_mozMatchesSelector","lazyStream","match","selectorStage","nodeSelector","func","len","firstElem","lastElem","each","replace","toReplace","asElem","parent","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","insertBefore","insertAfter","append","last","lastNode","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","applyNonce","appendTo","orElseLazy","loadScriptEval","src","delay","_loadScriptEval","loadScriptEvalSticky","existingItem","existingElement","nextSibling","toInsertParams","insertElem","elseValue","allParents","ret","firstParent","parentsWhileMatch","host","copyAttrs","sourceItem","sourceNode","attrs","resolveAttributeHolder","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","sticky","whitelisted","evalCollectedScripts","scriptsToProcess","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","substring","stream","flatMap","sort","node1","node2","compareDocumentPosition","e","console","message","description","_toReplace","rel","matches","styles","DomQueryCollector","execCss","click","fireEvent","addEventListener","listener","removeEventListener","eventName","finalOptions","ofAssoc","bubbles","cancelable","AssocArrayCollector","ownerDocument","nodeType","EventClass","Event","global","MouseEvent","KeyboardEvent","synthetic","createEventObject","key","textContent","joinString","text1","text2","encodeFormElement","toMerge","Config","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","assign","Array","from","reduced","data","subNodes","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","iterations","ITERATION_STATUS","EO_STRM","current","BEF_STRM","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","idx","notFound","prependTo","prepend","foundNodes","selectors","split","cnt2","levelSelector","toMatch","prototypeOwner","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","i","srcNode","createSourceNode","nonceCheck","marker","Date","now","random","attrName","DQ","DQ$","globalThis","window","g","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","forEach","obj","offset","pack","prototype","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","Object","theArgs","nextSource","keys","nextKey","hasOwnProperty","_value","fn","inval","Monad","preprocessKeys","currentPos","currKey","keyVal","arrPos","arrayIndex","getIfPresent","toJson","JSON","stringify","start","parseInt","resolve","resolver","rootElem","newVal","alternative","ConfigEntry","CONFIG_VALUE","CONFIG_ANY","configDef","shallowCopy$","deepCopy$","shallowMerge","other","overwrite","withAppend","isArray","noKeys","accessPath","assertAccessPath","lastKey","pathExists","buildPath","finalKeyArrPos","retVal","apply","appendIf","assignIf","setVal","currAccessPos","ERR_ACCESS_PATH","parentVal","parentPos","alloc","arr","length1","length2","isArrayPos","tempVal","isNoArray","selectedPos","strms","activeStrm","findNextStrm","streamsToProcess","allStreams","skippedCount","lookAheadResult","shift","MultiStreamDatasource","total","SequenceDataSource","dataPos","max","ArrayStreamDataSource","filterFunc","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","lookupVal","skipped","loop","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","orig_cnt","dsLoop","datasourceData","mappedData","toDatasource","ds","FlatMapStreamDataSource","unshift","InverseArrayCollector","finalValue","ArrayAssocArrayCollector","Run","ConfigCollector","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ofDataSource","dataSource","toConcat","toAppend","onElem","strmR","startVal","val1","anyMatch","noneMatch","comparator","newArr","collector","ofStreamDataSource","isOverLimits","nextFilter","t","stop","value1","value2","el1","el2","Reflect","customElements","polyfillWrapFlushCallback","a","HTMLElement","construct","constructor","setPrototypeOf","extendsType","observedAttrs","withTagName","TagBuilder","withObservedAttributes","oAttrs","withConnectedCallback","callback","connectedCallback","withDisconnectedCallback","disconnectedCallback","withAdoptedCallback","adoptedCallback","withAttributeChangedCallback","attributeChangedCallback","withExtendsType","withOptions","theOptions","withClass","withMarkup","register","applyCallback","outerCallback","protoCallback","finalCallback","defineProperty","define","scope","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}