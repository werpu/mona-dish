{"version":3,"file":"Messaging.js","mappings":"iIASO,MAAMA,UAAuBC,MAChCC,eAAeC,GAGX,GAFAC,SAASD,IAECF,MAAMI,UAAWC,QAAS,CAChC,IAAIC,EAAmBP,EAAaK,UAAUG,SAG9CC,KAAKH,QAAUC,C,CAEvB,CAEAC,SAASE,EAA0BC,GAAsB,GAErD,IAAIC,EAAM,GAENC,EAAQC,IACR,IAAIC,EAAQL,EAAeI,GAC3B,GAAGb,MAAMe,QAAQD,GAAQ,CACrB,GAAmB,GAAhBA,EAAME,OAEL,YADAL,EAAIM,KAAKH,EAAM,IAGhBA,EAAME,OAAS,GACdF,EAAMI,SAAQC,GAAWP,EAAMO,I,MAGnCR,EAAIM,KAAKJ,E,EAKjB,OAFAL,KAAKU,SAASL,GAAQD,EAAMC,KAErB,IAAId,KAAeY,EAC9B,CAGAS,UAAUC,GACN,OAAO,IAAItB,KAAeI,MAAMiB,UAAUC,GAC9C,CAEAC,UACI,OAAO,IAAIvB,KAAeI,MAAMmB,UACpC,CAEAC,MAAMC,EAAgBC,GAClB,OAAO,IAAI1B,KAAeI,MAAMoB,MAAMC,EAAOC,GACjD,CAEAC,OAAOF,EAAeG,GAClB,OAAO,IAAI5B,KAAeI,MAAMuB,OAAOF,EAAOG,GAClD,CAEAC,OAAoBC,EAAyDC,GACzE,OAAO,IAAI/B,KAAeI,MAAMyB,OAAOC,EAAWC,GACtD,E,sBCzCG,SAASC,I,MACZ,IAAIA,EAAkB,oBAAsBC,YAAcA,WAAWC,OAAUD,WAAWC,OACrF,oBAAsBA,OAAUA,OAC5B,oBAAsBD,WAAcA,gBAChC,IAAsB,EAAAE,IAAgB,OAAN,EAAAA,QAAM,IAAN,EAAAA,OAAM,EAAN,EAAAA,EAAQD,QAAU,EAAAC,EAAOD,YACrD,IAAsB,EAAAC,EAAU,EAAAA,EAAS,KAG1D,OAAuB,QAAhB,EAAAH,aAAQ,EAARA,EAAUE,cAAM,QAAIF,CAC/B,C,4FCTcI,E,UAAd,SAAcA,GAiEV,SAAgBC,EAAKC,GAEjB,IAAIC,EAAK,KAAMC,GADfF,EAAMA,EAAIG,QAAQ,SAAU,KACLxB,OAEvB,KAAOsB,EAAGG,KAAKJ,EAAIK,SAASH,MAG5B,OAAOF,EAAId,MAAM,EAAGgB,EAAI,EAC5B,CAqDA,SAAgBI,EAASC,GAGrB,QAASC,UAAU7B,QAAgB,MAAN4B,IAA4B,iBAANA,GAAkBA,aAAcE,OACvF,CA7GgB,EAAAC,YAAhB,SAA+BC,EAA2BC,EAAkB,MACxE,IACI,IAAIC,EAASF,IACb,OAAO,EAAAG,SAAA,aAAsBD,QAAAA,EAAUD,E,CACzC,MAAOG,GACL,OAAO,EAAAD,SAAA,M,CAEf,EAQgB,EAAAE,gBAAhB,SAAmCL,EAA2BC,EAAwB,MAClF,IACI,IAAIC,EAASF,IACb,OAAO,EAAAG,SAAA,aAAsBD,QAAAA,EAAUD,I,CACzC,MAAOG,GACL,OAAO,EAAAD,SAAA,M,CAEf,EAQgB,EAAAG,WAAhB,SAA2BV,EAAYW,EAA4B,QAE/D,IAAIC,EAAM,GAIV,OAHAZ,EAAGa,MAAMF,GAAUrC,SAASwC,IACxBF,EAAIvC,KAAKmB,EAAKsB,GACjB,IACMF,CACX,EAOgB,EAAApB,KAAI,EAkBJ,EAAAuB,WAAhB,SAA8BC,EAAUC,EAAiB,EAAGC,EAAiB,IACzE,MAAgC,kBAA3BF,QAAAA,EAAO,iBACDE,QAAAA,EAAQ,KAITF,aAAgB5D,QAAU6D,IAAWC,EAAaF,EAErDE,EAAK1C,OAAOpB,MAAMI,UAAUmB,MAAMwC,KAAKH,EAAKC,GACvD,EAQgB,EAAAG,iBAAhB,SAAiCC,EAAiBC,GAC9C,IACIC,EAAYD,QAAAA,EAAe,gBAG/B,OAJkBD,QAAAA,EAAU,iBAITG,gBAAkBD,EAAUC,aACnD,EASgB,EAAAC,WAAhB,SAA2BC,EAAYC,GACnC,OAAO5B,EAAS4B,UAAkBD,GAASC,EAAUD,aAAiBC,CAC1E,EASgB,EAAA5B,SAAQ,EAUR,EAAA6B,OAAhB,SAAuB5B,GACnB,OAAOA,aAAc6B,UAA0B,mBAAP7B,CAC5C,EAIgB,EAAA8B,UAAhB,SAA0BC,KAAgBC,GACtC,GAAc,MAAVD,EACA,MAAM,IAAIE,UAAU,8CAGxB,IAAIC,EAAKC,OAAOJ,GAChB,OAASI,OAAQC,QACbJ,EAAQ1D,SAAQL,GAAckE,OAAQC,OAAOF,EAAIjE,KAC1CiE,IAGXF,EAAQhD,QAAOf,GAAgB,MAARA,IAAcK,SAAQL,IACzC,IAAIoE,EAAapE,EACjBkE,OAAOG,KAAKD,GACPrD,QAAOuD,GAAWJ,OAAO3E,UAAUgF,eAAerB,KAAKkB,EAAYE,KACnEjE,SAAQiE,GAAWL,EAAGK,GAAWF,EAAWE,IAAS,IAEvDL,EACX,CAGH,CAnKD,CAAc3C,IAAAA,EAAI,I,mFCIC,EAAAA,KAAA,UA+CZ,MAAMkD,EACTpF,YAAYqF,GACR9E,KAAK+E,OAASD,CAClB,CAIIA,YACA,OAAO9E,KAAK+E,MAChB,CAEAC,IAAOC,GACEA,IACDA,EAAMC,GAAkBA,GAE5B,IAAIxC,EAAYuC,EAAGjF,KAAK8E,OACxB,OAAO,IAAID,EAAMnC,EACrB,CAEA7C,QAAWoF,GACP,IAAIE,EAAqBnF,KAAKgF,IAAIC,GAClC,MAAOE,aAAM,EAANA,EAAQL,iBAAiBD,GAC5BM,EAASA,EAAOL,MAEpB,OAAOK,CACX,EASG,MAAMxC,UAAoBkC,EAK7BpF,YAAYqF,GACRnF,MAAMmF,EACV,CAEIA,YACA,OAAI9E,KAAK+E,kBAAkBF,EAChB7E,KAAK+E,OAAOlF,UAAUiF,MAE1B9E,KAAK+E,MAChB,CAEAK,oBAA8CN,GAC1C,OAAW,IAAInC,EAASmC,EAC5B,CAGAO,WACI,YAAO,IAAsBrF,KAAK8E,OAAS,MAAQ9E,KAAK8E,KAC5D,CAKAQ,UAAUC,GACN,IAAIC,EAASxF,KAAKqF,WAIlB,OAHKG,GAAUD,GACXA,EAAgBhC,KAAKvD,KAAMA,OAEvBwF,CACZ,CAEAC,cAAcF,EAA6C,UAGvD,OADAvF,KAAKsF,UAAU/B,KAAKvD,KAAMuF,GACnBvF,IACX,CAEA0F,OAAOC,GACH,OAAI3F,KAAKsF,YACEtF,KAGU,MAAb2F,EACOhD,EAAS6C,OAEbxF,KAAKH,SAAQ,IAAM8F,GAElC,CAOAC,WAAWC,GACP,OAAI7F,KAAKsF,YACEtF,KAEAA,KAAKH,QAAQgG,EAE5B,CAMAhG,QAAWoF,GACP,IAAIa,EAAMnG,MAAME,QAAQoF,GACxB,OAAMa,aAAenD,EAICmD,EAAIjG,UAHf8C,EAASoD,aAAaD,EAAIhB,MAIzC,CAMAkB,SAAYC,GAERA,EAAMjG,KAAKkG,kBAAkBD,GAE7B,IAAIE,EAA4BnG,KAChC,IAAK,IAAIoG,EAAM,EAAGA,EAAMH,EAAIzF,OAAQ4F,IAAO,CACvC,IAAIC,EAAUrG,KAAKsG,OAAOL,EAAIG,IAC1BG,EAASvG,KAAKwG,WAAWP,EAAIG,IAEjC,GAAgB,KAAZC,GAAkBE,GAAU,GAE5B,GADAJ,EAAanG,KAAKyG,WAAWV,aAAeI,EAAWrB,iBAAiBtF,MAAiB2G,EAAWrB,MAAMtE,OAAS+F,EAAS,KAAOJ,EAAWrB,MAAMyB,GAAnE,MAC7EJ,EAAWd,WACX,OAAOc,OAGR,GAAIE,GAAWE,GAAU,EAAzB,CACH,GAAIJ,EAAWO,aAAaL,GAAShB,WACjC,OAAOc,EAGX,GADAA,EAAcA,EAAWO,aAAaL,GAASvB,iBAAiBtF,MAASQ,KAAKyG,WAAWV,aAAaI,EAAWO,aAAaL,GAASvB,MAAMyB,IAAWvG,KAAKyG,WAAWjB,OACpKW,EAAWd,WACX,OAAOc,C,KANR,CAaP,GAFIA,EAAaA,EAAWO,aAAaL,GAErCF,EAAWd,WACX,OAAOc,EACAI,GAAU,IACjBJ,EAAanG,KAAKyG,WAAWV,aAAaI,EAAWrB,MAAMyB,I,EAGnE,OAAOJ,CACX,CASAQ,MAAM1B,GACF,OAAIjF,KAAKqF,YAGFJ,EAAGjF,KAAK8E,MACnB,CASA8B,IAAOC,EAAkBlE,EAAS6C,QAC9B,OAAIxF,KAAKqF,WACErF,KAAKyG,WAAWV,aAAac,GAAYhH,UAG7CG,KAAKyG,WAAWV,aAAa/F,KAAK8E,OAAOjF,SACpD,CAEAiH,SACI,OAAOC,KAAKC,UAAUhH,KAAK8E,MAC/B,CASU2B,WACN,OAAO9D,CACX,CAGU6D,WAAWP,GACjB,IAAIjF,EAAQiF,EAAIgB,QAAQ,KACpBhG,EAAMgF,EAAIgB,QAAQ,KACtB,OAAIjG,GAAS,GAAKC,EAAM,GAAKD,EAAQC,EAC1BiG,SAASjB,EAAIkB,UAAUnG,EAAQ,EAAGC,KAEjC,CAEhB,CAGUqF,OAAOL,GACb,IAAIjF,EAAQiF,EAAIgB,QAAQ,KAExB,OAAIjG,GAAS,EACFiF,EAAIkB,UAAU,EAAGnG,GAEjBiF,CAEf,CAOAS,aAAgBT,GACZ,OAAIjG,KAAKqF,WACErF,KAAKyG,WAAWjB,OAEpBxF,KAAKyG,WAAWV,aAAa/F,KAAK8E,MAAMmB,IAAMpG,SACzD,CAcAuH,QAAWC,GACP,GAAIrH,KAAKqF,WACL,OAAO1C,EAAS6C,OAEpB,IACI,OAAO7C,EAASoD,aAAasB,EAASrH,KAAK8E,O,CAC7C,MAAOlC,GACL,OAAOD,EAAS6C,M,CAExB,CAGUU,kBAAkBxB,GACxB,OAAO,IAAI,EAAAnF,eAAemF,GACrB7E,SAAQQ,GACE,IAAI,EAAAd,eAAec,EAAK4C,MAAM,aAChC+B,KAAI3E,KAEwB,IADzBA,EAAOA,EAAK2B,QAAQ,aAAc,KAC1BiF,QAAQ,OAAoC,GAAtB5G,EAAK4G,QAAQ,OACvC5G,EAAO,IAAMA,IAEQ,GAAtBA,EAAK4G,QAAQ,OAAoC,GAAtB5G,EAAK4G,QAAQ,OACvC5G,GAAc,KAEXA,MAG3B,EA3OO,EAAAmF,OAAS7C,EAASoD,aAAa,MAyPnC,MAAMuB,UAAyB3E,EAOlClD,YAAY8H,EAAeC,EAAmB,SAC1C7H,MAAM4H,GAENvH,KAAKiG,IAAMuB,CACf,CAEI1C,YACA,OAAO9E,KAAK+E,OAAY/E,KAAK+E,OAAO/E,KAAKiG,KAAO,IACpD,CAEInB,UAAM2C,GACDzH,KAAK+E,SAGV/E,KAAK+E,OAAO/E,KAAKiG,KAAOwB,EAC5B,CAEA/B,OAAOC,GACH,IAAI+B,EAAc,CAAC,EAEnB,OADAA,EAAY1H,KAAKiG,KAAON,EACjB3F,KAAKsF,YAActF,KAAO,IAAIsH,EAAcI,EAAa1H,KAAKiG,IACzE,CAEAL,WAAWC,GACP,GAAI7F,KAAKsF,YACL,OAAOtF,KACJ,CACH,IAAI0H,EAAc,CAAC,EAEnB,OADAA,EAAY1H,KAAKiG,KAAOJ,IACjB,IAAIyB,EAAcI,EAAa1H,KAAKiG,I,CAEnD,CASUQ,WACN,OAAOa,CACX,CAEAlC,oBAA6CN,EAAa0C,EAAmB,SACzE,OAAa,IAAIF,EAAiBxC,EAAO0C,EAC7C,EAlDO,EAAAhC,OAAS8B,EAAcvB,aAAa,MA0D/C,MAAM4B,UAAuBL,EAUzB7H,YAAY8H,EAAetB,EAAUM,GACjC5G,MAAM4H,EAAUtB,GAEhBjG,KAAKuG,OAASA,QAAAA,GAAW,CAC7B,CAEIzB,YACA,MAAgB,IAAZ9E,KAAKiG,KAAajG,KAAKuG,QAAU,EAC1BvG,KAAK+E,OAAO/E,KAAKuG,QACjBvG,KAAKiG,KAAOjG,KAAKuG,QAAU,EAC3BvG,KAAK+E,OAAO/E,KAAKiG,KAAKjG,KAAKuG,QAE/BvG,KAAK+E,OAAO/E,KAAKiG,IAC5B,CAEInB,UAAMgB,GACU,IAAZ9F,KAAKiG,KAAajG,KAAKuG,QAAU,EACjCvG,KAAK+E,OAAO/E,KAAKuG,QAAUT,EAEpB9F,KAAKiG,KAAOjG,KAAKuG,QAAU,EAClCvG,KAAK+E,OAAO/E,KAAKiG,KAAKjG,KAAKuG,QAAUT,EAGzC9F,KAAK+E,OAAO/E,KAAKiG,KAAOH,CAC5B,EA/BO,EAAAN,OAASmC,EAAY5B,aAAa,K,2DCvYjC6B,E,eAAZ,SAAYA,GACR,wBACA,0BACH,CAHD,CAAYA,IAAAA,EAAgB,I,iFCoRrB,MAAMC,EAOTpI,eAAeqF,GAJf,KAAAgD,SAAW,EAEH,KAAAC,KAAO,EAGX/H,KAAK8E,MAAQA,CACjB,CAEAM,aAAgB4C,GACZ,OAAO,IAAIH,KAAaG,EAC5B,CAEA5C,eAAkB4C,GACd,OAAOhI,KAAKiI,MAAM1D,OAAOG,KAAKsD,IAAOhD,KAAIiB,GAAO,CAACA,EAAK+B,EAAK/B,KAC/D,CAEAb,oBAAuB8C,GACnB,IAAIpD,EAAa,GACjB,KAAOoD,EAAWC,WACdrD,EAAMrE,KAAKyH,EAAWE,QAG1B,OAAO,IAAIP,KAAU/C,EACzB,CAEAM,kBAAkBN,GACd,OAAO+C,EAAOI,MAAMnD,EAAMuD,QAC9B,CAEAjD,gBAAgBN,GACZ,OAAO+C,EAAOI,MAAO1D,OAAOG,KAAKI,EAAMA,QAAQE,KAAIiB,GAAO,CAACA,EAAKnB,EAAMA,MAAMmB,KAChF,CAEAqC,UACI,OAAgB,GAAbtI,KAAK+H,IACG,cAER/H,KAAK+H,KAAO/H,KAAK8E,MAAMtE,OACf,aAEJR,KAAK8E,MAAM9E,KAAK+H,IAC3B,CAEAQ,OAAOtH,GAEH,OADAjB,KAAK8H,QAAU7G,EACRjB,IACX,CAMAY,UAAU4H,GACN,IAAIC,EAAW,CAACzI,MAAMY,OAAO4H,GAC7B,OAAOX,EAAOI,MAAMQ,GAAU5I,SAAQQ,GAAQA,GAClD,CAGAqI,OAAOzD,GACH,IAAK,IAAImB,EAAM,EAAGA,EAAMpG,KAAK8E,MAAMtE,UAA4B,GAAjBR,KAAK8H,SAAiB1B,EAAMpG,KAAK8H,WAC1C,IAA7B7C,EAAGjF,KAAK8E,MAAMsB,GAAMA,GAD6DA,KAKzF,OAAOpG,IACX,CAGA2I,KAAK1D,GACDjF,KAAK0I,OAAOzD,GACZjF,KAAK4I,OACT,CAEA5D,IAAOC,GACEA,IACDA,EAAM4D,GAAkBA,GAE5B,IAAI1I,EAAW,GAKf,OAJAH,KAAK2I,MAAMtI,IACPF,EAAIM,KAAKwE,EAAG5E,GAAM,IAGf,IAAIwH,KAAa1H,EAC5B,CAOAN,QAA2BoF,GACvB,IAAIjC,EAAM,GAKV,OAJAhD,KAAK2I,MAAKtI,IACN,IAAIyI,EAAa7D,EAAG5E,GACpB2C,EAAMxD,MAAMe,QAAQuI,GAAS9F,EAAIpC,OAAOkI,GAAS9F,EAAIpC,OAAOkI,EAAMhE,MAAM,IAExD+C,EAAOI,MAAMjF,EACrC,CAEA5B,OAAO6D,GACH,IAAI9E,EAAgB,GAMpB,OALAH,KAAK2I,MAAMX,IACH/C,EAAG+C,IACH7H,EAAIM,KAAKuH,E,IAGV,IAAIH,KAAa1H,EAC5B,CAEA4I,OAAU9D,EAAyB+D,EAAc,MAC7C,IAAI3F,EAAqB,MAAZ2F,EAAmB,EAAI,EAChCC,EAA0B,MAAZD,EAAmBA,EAAWhJ,KAAK8E,MAAMtE,OAASR,KAAK8E,MAAM,GAAK,KAEpF,IAAK,IAAIsB,EAAM/C,EAAQ+C,EAAMpG,KAAK8E,MAAMtE,UAA4B,GAAjBR,KAAK8H,SAAiB1B,EAAMpG,KAAK8H,SAAU1B,IAC1F6C,EAAOhE,EAAGgE,EAAMjJ,KAAK8E,MAAMsB,IAG/B,OADApG,KAAK4I,QACE,EAAAjG,SAAA,aAA4CsG,EACvD,CAEAC,QAEI,OADAlJ,KAAK4I,QACE5I,KAAK8E,OAAS9E,KAAK8E,MAAMtE,OAAS,EAAAmC,SAAA,aAAsB3C,KAAK8E,MAAM,IAAM,EAAAnC,SAAA,MACpF,CAEAwG,OAEI,IAAI3I,EAASR,KAAK8H,QAAU,EAAIsB,KAAKC,IAAIrJ,KAAK8H,QAAS9H,KAAK8E,MAAMtE,QAAUR,KAAK8E,MAAMtE,OAEvF,OADAR,KAAK4I,QACE,EAAAjG,SAAA,aAAsBnC,EAASR,KAAK8E,MAAMtE,EAAS,GAAK,KACnE,CAEA8I,SAASrE,GACL,IAAK,IAAImB,EAAM,EAAGA,EAAMpG,KAAK8E,MAAMtE,UAA4B,GAAjBR,KAAK8H,SAAiB1B,EAAMpG,KAAK8H,SAAU1B,IACrF,GAAInB,EAAGjF,KAAK8E,MAAMsB,IACd,OAAO,EAIf,OADApG,KAAK4I,SACE,CACX,CAEAW,SAAStE,GACL,IAAKjF,KAAK8E,MAAMtE,OACZ,OAAO,EAEX,IAAIgJ,EAAU,EACd,IAAK,IAAIpD,EAAM,EAAGA,EAAMpG,KAAK8E,MAAMtE,OAAQ4F,IACnCnB,EAAGjF,KAAK8E,MAAMsB,KACdoD,IAIR,OADAxJ,KAAK4I,QACEY,GAAWxJ,KAAK8E,MAAMtE,MACjC,CAEAiJ,UAAUxE,GACN,IAAIuE,EAAU,EACd,IAAK,IAAIpD,EAAM,EAAGA,EAAMpG,KAAK8E,MAAMtE,OAAQ4F,IAClCnB,EAAGjF,KAAK8E,MAAMsB,KACfoD,IAIR,OADAxJ,KAAK4I,QACEY,GAAWxJ,KAAK8E,MAAMtE,MACjC,CAEAkJ,KAAKC,GACD,IAAIC,EAAS5J,KAAK8E,MAAM/D,QAAQ2I,KAAKC,GACrC,OAAO9B,EAAOI,MAAM2B,EACxB,CAGAC,QAAQC,GAGJ,OAFA9J,KAAK2I,MAAKX,GAAQ8B,EAAUD,QAAQ7B,KACpChI,KAAK4I,QACEkB,EAAUC,UACrB,CAGA5B,UACI,IAAI6B,GAAmC,GAAjBhK,KAAK8H,SAAiB9H,KAAK+H,KAAO/H,KAAK8H,QAAU,EACnEmC,EAAejK,KAAK+H,KAAO/H,KAAK8E,MAAMtE,OAAS,EACnD,QAASwJ,GAAmBC,EAChC,CAEA7B,OACI,OAAKpI,KAAKmI,WAGVnI,KAAK+H,MACE/H,KAAK8E,MAAM9E,KAAK+H,MAHZ,IAIf,CAEAmC,UAAU9D,EAAM,GACZ,OAAIpG,KAAK+H,IAAM3B,GAAQpG,KAAK8E,MAAMtE,OACvB,aAEJR,KAAK8E,MAAM9E,KAAK+H,IAAM3B,EACjC,CAGA,CAAC+D,OAAOC,YACJ,MAAO,CACHhC,KAAM,KAGK,CACHiC,MAHQrK,KAAKmI,UAIbrD,MAHM9E,KAAKoI,SAO3B,CAMAQ,QACI5I,KAAK+H,KAAO,CAChB,EA+BG,MAAMuC,EAgCT7K,YAAY8K,GA7BZ,KAAAzC,SAAW,EAOX,KAAAC,KAAO,EAuBH/H,KAAKkI,WAAaqC,CAEtB,CAvBAnF,aAAgBoF,GACZ,OAAO,IAAIF,EAAc,IAAIG,yBAAyBD,GAC1D,CAEApF,eAAkB4C,GACd,OAAOhI,KAAKiI,MAAM1D,OAAOG,KAAKsD,IAAOhD,KAAIiB,GAAO,CAACA,EAAK+B,EAAK/B,KAC/D,CAEAb,0BAA6BN,GACzB,OAAO,IAAIwF,EAAWxF,EAC1B,CAEAM,kBAAkBN,GACd,OAAOwF,EAAWrC,MAAMnD,EAAMuD,QAClC,CAEAjD,gBAAgBN,GACZ,OAAOwF,EAAWrC,MAAO1D,OAAOG,KAAKI,EAAMA,QAAQE,KAAIiB,GAAO,CAACA,EAAKnB,EAAMA,MAAMmB,KACpF,CAOAkC,UACI,OAAInI,KAAK0K,gBAIF1K,KAAKkI,WAAWC,SAC3B,CAEAC,OACI,IAAIA,EAAOpI,KAAKkI,WAAWE,OAG3B,OADApI,KAAK+H,MACEK,CACX,CAEA8B,UAAU9D,EAAK,GACX,OAAOpG,KAAKkI,WAAWgC,UAAU9D,EACrC,CAIAkC,UACI,OAAOtI,KAAKkI,WAAWI,SAC3B,CAEAM,QACI5I,KAAKkI,WAAWU,QAChB5I,KAAK+H,KAAO,EACZ/H,KAAK8H,SAAW,CACpB,CAMAlH,UAAU4H,GAGN,OAAO8B,EAAWK,mBAAmB,IAAIC,sBAAsB5K,KAAMwI,GAEzE,CAEAqC,WAAW5F,GACP,GAAIjF,KAAKmI,UAAW,CAChB,IAAIV,EAAYzH,KAAKoI,OACrB,OAAKnD,EAAGwC,GAGEA,EAFCzH,KAAK6K,WAAW5F,E,CAI/B,OAAO,IACX,CAEAsD,OAAOuC,GAEH,OADA9K,KAAK8H,QAAUgD,EACR9K,IACX,CAGA6J,QAAQC,GACJ,KAAO9J,KAAKmI,WAAW,CACnB,IAAI4C,EAAI/K,KAAKoI,OACb0B,EAAUD,QAAWkB,E,CAGzB,OADA/K,KAAK4I,QACEkB,EAAUC,UACrB,CAEArB,OAAOzD,GACH,OAAO,IAAIqF,EAAW,IAAIU,wBAAwBC,KACrB,IAArBhG,EAAGgG,EAAIjL,KAAK+H,MACZ/H,KAAKkL,OAEFD,IACRjL,MACP,CAEAoB,OAAO6D,GACH,OAAsB,IAAIqF,EAAc,IAAIa,yBAA8BlG,EAAIjF,MAClF,CAEAgF,IAAOC,GACH,OAAO,IAAIqF,EAAW,IAAIU,uBAAuB/F,EAAIjF,MACzD,CAEAH,QAAsBoF,GAClB,OAAO,IAAIqF,EAAgB,IAAIc,wBAA6BnG,EAAIjF,MACpE,CAGA2I,KAAK1D,GACD,KAAOjF,KAAKmI,YACqB,IAAzBlD,EAAGjF,KAAKoI,SACRpI,KAAKkL,OAGblL,KAAK4I,OACT,CAEAG,OAAU9D,EAAqB+D,EAAkB,MAC7C,IAAKhJ,KAAKmI,UACN,OAAOxF,SAAS6C,OAEpB,IAAI6F,EACAC,EAAS,KACb,GAAgB,MAAZtC,EACSA,EACAhJ,KAAKoI,WACX,CAEH,GADSpI,KAAKoI,QACTpI,KAAKmI,UACN,OAAOxF,SAASoD,aAAasF,GAExBrL,KAAKoI,M,CAGlB,IADSnD,EAAGoG,EAAQC,GACbtL,KAAKmI,WACCnI,KAAKoI,OACLnD,EAAGoG,EAAQC,GAGxB,OADAtL,KAAK4I,QACEjG,SAASoD,aAAasF,EACjC,CAEAlC,OACI,OAAKnJ,KAAKmI,UAGHnI,KAAK+I,QAAO,CAACwC,EAAKC,IAAQA,IAFtB7I,SAAS6C,MAGxB,CAEA0D,QAEI,OADAlJ,KAAK4I,QACA5I,KAAKmI,UAGHxF,SAASoD,aAAa/F,KAAKoI,QAFvBzF,SAAS6C,MAGxB,CAEA8D,SAASrE,GACL,KAAOjF,KAAKmI,WACR,GAAIlD,EAAGjF,KAAKoI,QACR,OAAO,EAGf,OAAO,CACX,CAEAmB,SAAStE,GACL,KAAOjF,KAAKmI,WACR,IAAKlD,EAAGjF,KAAKoI,QACT,OAAO,EAGf,OAAO,CACX,CAEAqB,UAAUxE,GACN,KAAOjF,KAAKmI,WACR,GAAIlD,EAAGjF,KAAKoI,QACR,OAAO,EAGf,OAAO,CACX,CAEAsB,KAAKC,GACD,IAAI8B,EAAMzL,KAAK6J,QAAQ,IAAI6B,gBAE3B,OADMD,EAAI/B,KAAKC,GACRW,EAAWrC,MAAMwD,EAC5B,CAEI3G,YACA,OAAO9E,KAAK6J,QAAQ,IAAI6B,eAC5B,CAEA,CAACvB,OAAOC,YACJ,MAAO,CACHhC,KAAM,KAGK,CACHiC,MAHQrK,KAAKmI,UAIbrD,MAHM9E,KAAKoI,SAO3B,CAMQ8C,OACJlL,KAAK+H,IAAM/H,KAAK8H,QAAU,IAC1B9H,KAAK8H,QAAU,CACnB,CAEQ4C,eACJ,OAAwB,GAAjB1K,KAAK8H,SAAiB9H,KAAK+H,KAAO/H,KAAK8H,QAAU,CAC5D,E,kBChyBJ6D,EAAOC,QAAUC,C,GCCbC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,CCrBAG,EAAoBK,EAAI,SAAST,GAChC,IAAIU,EAASV,GAAUA,EAAOW,WAC7B,WAAa,OAAOX,EAAgB,OAAG,EACvC,WAAa,OAAOA,CAAQ,EAE7B,OADAI,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CACR,ECNAN,EAAoBQ,EAAI,SAASX,EAASa,GACzC,IAAI,IAAIxG,KAAOwG,EACXV,EAAoBW,EAAED,EAAYxG,KAAS8F,EAAoBW,EAAEd,EAAS3F,IAC5E1B,OAAOoI,eAAef,EAAS3F,EAAK,CAAE2G,YAAY,EAAMhG,IAAK6F,EAAWxG,IAG3E,ECPA8F,EAAoBrK,EAAI,WACvB,GAA0B,iBAAfF,WAAyB,OAAOA,WAC3C,IACC,OAAOxB,MAAQ,IAAIiE,SAAS,cAAb,EAGhB,CAFE,MAAOrB,GACR,GAAsB,iBAAXnB,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBsK,EAAoBW,EAAI,SAAStJ,EAAKyJ,GAAQ,OAAOtI,OAAO3E,UAAUgF,eAAerB,KAAKH,EAAKyJ,EAAO,ECCtGd,EAAoBe,EAAI,SAASlB,GACX,oBAAXzB,QAA0BA,OAAO4C,aAC1CxI,OAAOoI,eAAef,EAASzB,OAAO4C,YAAa,CAAEjI,MAAO,WAE7DP,OAAOoI,eAAef,EAAS,aAAc,CAAE9G,OAAO,GACvD,E,mSCwDO,MAAMkI,EACTC,OAAOjF,GACH,OAAOA,CACX,CAEAkF,OAAOlF,GACH,OAAOA,CACX,EAMJ,IAAImF,EAAe,IAAIH,EAEhB,MAAMI,EAOT3N,YAAmB4N,EAAe,CAAC,EAAGC,EAAe,KAAlC,KAAAD,QAAAA,EAFnB,KAAAE,SAAmB,EAGfvN,KAAKsN,aAAeA,EACpBtN,KAAKwN,cAAe,IAAIC,MAAOC,kBAC/B1N,KAAK2N,YAAa,IAAIF,MAAOC,kBAAoB,IAAMtE,KAAKwE,SAAW,IAAMxE,KAAKwE,QACtF,EAMJ,MAAMC,EAQFpO,YAAYqO,EAAiBT,GACzBrN,KAAK+N,OAASV,EACdrN,KAAKgO,SAAU,EACfhO,KAAKiO,YAAa,EAClBjO,KAAKkO,UAAW,EAChBlO,KAAK8N,QAAUA,CACnB,EAOJ,MAAeK,EAAf,cAOc,KAAAC,iBAAwB,CAAC,EACzB,KAAAC,SAAgB,CAAC,EACjB,KAAAC,kBAAyB,CAAC,EAE1B,KAAAC,WAAa,EAIJ,KAAAC,cAAgB,IAChB,KAAAC,UAAY,UAI/B,KAAAC,OAASvB,CA2Mb,CA5LIwB,iBAAiBb,EAAiBc,GAqB9B,OApBA5O,KAAK6O,kBAAkBf,GAIvB9N,KAAKoO,iBAAiBN,GAASrN,MAAMqO,I,MAC7BA,EAAInB,cAAc3N,KAAKsO,sBAGvBQ,aAAG,EAAHA,EAAKvB,WAA0B,QAAf,EAAAuB,aAAG,EAAHA,EAAc,cAAC,eAAEvB,aAC7BuB,aAAG,EAAHA,EAAc,SACdA,EAAY,OAAEzB,QAAUrN,KAAK0O,OAAOzB,OAAO6B,EAAY,OAAEzB,SACzDyB,EAAY,OAAEvB,SAAU,IAExBuB,EAAIzB,QAAUrN,KAAK0O,OAAOzB,OAAO6B,EAAIzB,SACrCyB,EAAIvB,SAAU,IAItBqB,EAASE,GAAI,IAEV9O,IACX,CAQA+O,UAAUjB,GACN9N,KAAKgP,iBAAiBlB,GACtB,IAAImB,EAAUjP,KAAKqO,SAASP,GACxBoB,EAAUD,EAAQ7G,KAatB,OAXA6G,EAAQ7G,KAAQ0G,KAKSA,aAAG,EAAHA,EAAMf,QACvBmB,EAAQ3L,KAAK0L,EAA0BH,aAAG,EAAHA,EAAMf,QAE7C/N,KAAKmP,UAAUrB,EAAkBgB,E,EAGlCG,CACX,CAOAG,aAAatB,GACT,OAAO9N,KAAK+O,UAAUjB,GAASsB,cACnC,CAOQP,kBAAkBlB,GACjB3N,KAAKoO,iBAAiBT,KACvB3N,KAAKoO,iBAAiBT,GAAc,IAEnC3N,KAAKoO,iBAAiB,OACvBpO,KAAKoO,iBAAiB,KAAO,GAErC,CAEQY,iBAAiBrB,GAChB3N,KAAKqO,SAASV,KACf3N,KAAKqO,SAASV,GAAc,IAAI,EAAA0B,SAE/BrP,KAAKqO,SAAS,OACfrO,KAAKqO,SAAS,KAAO,IAAI,EAAAgB,QAEjC,CAQAC,mBAAmBxB,EAAiBc,GAEhC,OADA5O,KAAKoO,iBAAiBN,IAAY9N,KAAKoO,iBAAiBN,IAAY,IAAI1M,QAAQf,GAAcA,IAASuO,IAChG5O,IACX,CAaAuP,OAAOzB,EAAiB0B,EAA2BD,GAK/C,GAJI,iBAAmBC,IACnBA,EAAU,IAAIpC,EAAQoC,KAGtBrB,EAAWsB,SAASD,GAKxB,OAFAD,EAAO5B,WAAaQ,EAAWuB,YAAYF,GAC3CxP,KAAKmP,UAAUrB,EAASyB,GACjBvP,IACX,CAEQoF,mBAAmBoK,GACvB,MAAO,MAAQA,EAAQ7B,UAC3B,CAEQvI,gBAAgBoK,GACpB,OAA4C,GAArCA,EAAQ7B,WAAW1G,QAAQ,MACtC,CAUAuI,QAAQ1B,EAAiBT,GACjB,iBAAmBA,IACnBA,EAAU,IAAID,EAAQC,IAE1B,IAAIsC,EAAYtC,EAAQM,WAEpB3K,EAAM,IAAI4M,SAAiB,CAACxI,EAASyI,KACrC,IAAIC,EAAU,KACVlB,EAAYmB,IACRA,EAASpC,YAAcgC,GAMvBI,EAASpC,YAAc,MAAQgC,IAC/BK,aAAaF,GACb9P,KAAKsP,mBAAmBxB,EAASc,GACjCxH,EAAQ2I,G,EAGhBD,EAAUG,YAAW,KACjBjQ,KAAKsP,mBAAmBxB,EAASc,GACjCiB,EAAO,sDAAsD,GAC9D,KACH7P,KAAK2O,iBAAiBb,EAASc,EAAS,IAI5C,OADA5O,KAAKmP,UAAUrB,EAAST,GACjBrK,CACX,CAOUkN,sBACN,KAAOlQ,KAAKuO,WAAc,IAAM,EAC5B,OAEJ,IAAI4B,EAA4B,CAAC,EACjC5L,OAAOG,KAAK1E,KAAKsO,mBAAmB5N,SAAQuF,IACpCjG,KAAKoQ,mBAAmBnK,KAC5BkK,EAAqBlK,GAAOjG,KAAKsO,kBAAkBrI,GAAI,IAE3DjG,KAAKsO,kBAAoB6B,CAC7B,CAEQC,mBAAmBnK,GACvB,OAAOjG,KAAKsO,kBAAkBrI,IAAQ,IAAKwH,MAAQC,kBAAoB1N,KAAKwO,aAChF,CAEU6B,uBAAuBhD,GAC7BrN,KAAKsO,kBAAkBjB,EAAQM,YAAcN,EAAQG,YACzD,EA5NgB,EAAA8C,WAAa,cA+NjC,IAAIC,EAAmCC,I,MACnC,GAAc,QAAV,mBAAU,eAAEC,iBACZ,OAAO,KAAK,SAAYA,kBAAiBD,GAE7C,MAAME,MAAM,iGACa,EAG7B,MAAMC,EAAwB,QAUvB,MAAMC,UAA+BzC,EAUxC1O,YAAoBoR,EAA0BN,EAAyCO,EAAeH,QAA8BjC,EAAiBvB,GACjJxN,QADgB,KAAAkR,cAAAA,EAAmE,KAAAC,aAAAA,EAA6C,KAAApC,OAAAA,EAT5H,KAAAqC,aAAyD,CAAC,EAW9D/Q,KAAKgR,YAAeC,I,QACZA,EAAYlD,OAAOR,UACnB0D,EAAYlD,OAAOV,QAAerN,KAAK0O,OAAOzB,OAAOgE,EAAYlD,OAAOV,SACxE4D,EAAYlD,OAAOR,SAAU,GAEjC,IAAI2D,EAAcD,EAAYlD,OAC1BD,EAAkBmD,EAAYnD,QAQlC,OANyB,QAArB,EAAA9N,KAAKoO,wBAAgB,eAAGN,MACH,QAArB,EAAA9N,KAAKoO,wBAAgB,SAAGN,GAASpN,SAAQkO,IACrCA,EAASsC,EAAY,KAG7BlR,KAAKqQ,uBAAuBa,IACrB,CAAI,EAEflR,KAAK0O,OAASA,EACd1O,KAAKmR,UACT,CAEAhC,UAAUrB,EAAiBT,EAA2B+D,GAAgB,GAClE,IACQ,iBAAmB/D,IACnBA,EAAU,IAAID,EAAQC,IAI1B,IAAIgE,EAAYtK,KAAKC,UAAmBqG,GACxCA,EAAmBtG,KAAKuK,MAAMD,GAE9B,IAAIE,EAAiB,IAAI1D,EAAeC,EAAST,GACjDkE,EAAexD,OAAOV,QAAUrN,KAAK0O,OAAOxB,OAAOqE,EAAexD,OAAOV,SACzEkE,EAAexD,OAAOR,SAAU,GAE5BvN,gBAAI,EAAJA,KAAMqO,SAASP,KACf9N,KAAKqO,SAASP,GAAS1F,KAAKmJ,GAGhCvR,KAAK+Q,aAAa/Q,KAAK8Q,cAAcU,YAAYD,GAC7CH,GACApR,KAAKgR,YAAYO,E,SAGrBvR,KAAKkQ,qB,CAET,OAAOlQ,IACX,CAEA2O,iBAAiBb,EAAiBc,GAE9B,OADAjP,MAAMgP,iBAAiBb,EAASc,GACb5O,IACvB,CAEAmR,WAKI,OAJKnR,KAAK+Q,aAAa/Q,KAAK8Q,gBACxB9Q,KAAK+Q,aAAa/Q,KAAK8Q,cAAgB9Q,KAAK6Q,cAAc7Q,KAAK8Q,eAEnE9Q,KAAK+Q,aAAa/Q,KAAK8Q,cAAcW,iBAAiB,UAAWzR,KAAKgR,aACnDhR,IACvB,CAEA0R,aAEI,OADA1R,KAAK+Q,aAAa/Q,KAAK8Q,cAAca,QAClB3R,IACvB,EAOG,MAAM4R,EAAb,cACY,KAAAC,0BAAsCtB,EACtC,KAAAO,aAAeH,EACf,KAAAjC,OAASvB,EACT,KAAA2E,UAAwB,EAkCpC,CAhCIC,kBAAkBC,GAEd,OADAhS,KAAK6R,0BAA4BG,EAC1BhS,IACX,CAEAiS,aAAanE,KAAoBgE,GAO7B,OANA,EAAAjK,OAAA,MAAaiK,GAAWnJ,MAAKiG,IACzB5O,KAAK8R,UAAUrR,KAAK,CAChBqN,QAASA,EACTc,SAAUA,GACZ,IAEC5O,IACX,CAEAkS,iBAAiBpB,GAEb,OADA9Q,KAAK8Q,aAAeA,EACb9Q,IACX,CAEAmS,WAAWzD,GAEP,OADA1O,KAAK0O,OAASA,EACP1O,IACX,CAEAoS,QACI,IAAIC,EAAS,IAAIzB,EAAuB5Q,KAAK6R,0BAA2B7R,KAAK8Q,aAAc9Q,KAAK0O,QAIhG,OAHA,EAAA7G,OAAA,MAAa7H,KAAK8R,WAAWnJ,MAAK2J,IAC9BD,EAAO1D,iBAAiB2D,EAAaxE,QAASwE,EAAa1D,SAAS,IAEjEyD,CACX,EAgDG,MAAME,UAAepE,EAUxB1O,YAAY+S,EAAkD/Q,OAAegR,EAAc,QAAS/D,EAAiBvB,GAEjHxN,QAFyE,KAAA8S,YAAAA,EAQzE,IAAIC,EAAcC,I,YACd,IAAIC,EAA8B,QAAnB,EAAKD,aAAK,EAALA,EAAQ5E,cAAM,QAA+B,QAA1B,EAAc4E,aAAK,EAALA,EAAQ3K,YAAI,eAAE+F,OAE/DD,EAAuC,QAA5B,EAAkB,QAAjB,EAAK6E,aAAK,EAALA,EAAQ3K,YAAI,eAAE8F,eAAQ,QAAW6E,aAAK,EAALA,EAAQ7E,QAG9D,IAAI8E,aAAO,EAAPA,EAASjF,cAAciF,aAAO,EAAPA,EAASvF,SAAS,CACzC,IAAIyB,EAAe8D,EACnB,GAAI9D,EAAInB,cAAc3N,KAAKsO,kBACvB,OAIMqE,SAAAA,EAAQ5E,OACd/N,KAAKmP,UAAUrB,EAASgB,E,GAOpC9O,KAAK6S,WAAcC,GAAsBJ,EAAWI,GACpD9S,KAAK0O,OAASA,EACd1O,KAAKmR,SAASqB,EAClB,CAMArB,SAASqB,GAEL,GADAxS,KAAKuH,SAAiBiL,EAAcO,KAAaP,EAAcO,KAAOP,EAC5DA,EAAcO,KAAM,CACFP,EAAcO,KACjCC,aAAa,cAAe,I,MAE7BR,aAAY,EAAZA,EAA6B,eACvBA,EAAcQ,aAAa,cAAe,KAMxD,OAHAhT,KAAKuH,SAASkK,iBAAiBzR,KAAKyS,YAAc,SAAWF,EAAOjC,WAAYtQ,KAAK6S,WAAY,CAACI,SAAS,IAE3GjT,KAAKuH,SAASkK,iBAAiBzR,KAAKyS,YAAc,SAAWF,EAAOjC,WAAatQ,KAAKyO,UAAWzO,KAAK6S,WAAY,CAACI,SAAS,IAChHjT,IAChB,CAMA0R,aAGI,OAFA1R,KAAKuH,SAAS2L,oBAAoBlT,KAAKyS,YAAc,SAAWF,EAAOjC,WAAYtQ,KAAK6S,YACxF7S,KAAKuH,SAAS2L,oBAAoBlT,KAAKyS,YAAc,SAAWzS,KAAKyO,UAAWzO,KAAK6S,YACzE7S,IAChB,CAWAmP,UAAUrB,EAAiBT,GAOvB,GANI,iBAAmBA,IACnBA,EAAU,IAAID,EAAQC,IAKtBrN,gBAAI,EAAJA,KAAMqO,SAASP,GAAU,CACzB,IAAIyD,EAAiB,IAAI1D,EAAeC,EAAST,GAC5CkE,EAAexD,OAAOR,UACvBgE,EAAexD,OAAOV,QAAUrN,KAAK0O,OAAOxB,OAAOqE,EAAexD,OAAOV,SACzEkE,EAAexD,OAAOR,SAAU,GAEpCvN,KAAKqO,SAASP,GAAS1F,KAAKmJ,E,CAGhC,IACIvR,KAAKmT,WAAWrF,EAAST,GAAS,GAAO,GAEzCrN,KAAKoT,aAAatF,EAAST,GAAS,GAAM,E,SAE1CrN,KAAKkQ,qB,CAET,OAAOlQ,IACX,CAGQmT,WAAWrF,EAAiBT,EAAkBgG,GAAkB,EAAMC,GAAsB,GAKhG,GAJKD,GACDrT,KAAKuT,iBAAiBzF,EAAST,GAEnCrN,KAAKqQ,uBAAuBhD,GACH,OAArB,SAAW9C,OAAgB,CAE3B,IAAIgH,EAAiB,IAAI1D,EAAeC,EAAST,IACjD,SAAW9C,OAAOiH,YAAYzK,KAAKuK,MAAMvK,KAAKC,UAAUuK,IAAkBlE,EAAQC,a,CAElFgG,GACAtT,KAAKwT,kBAAkB1F,EAAST,EAExC,CAEQmG,kBAAkB1F,EAAiBT,GACvC,IAAIsF,EAAQ3S,KAAKyT,iBAAiB3F,EAAST,GAAS,IAEpD,SAAWqG,cAAcf,EAC7B,CAGQS,aAAatF,EAAiBT,EAAkBgG,GAAkB,EAAMC,GAAsB,GAC7FD,GACDrT,KAAKuT,iBAAiBzF,EAAST,GAEnCrN,KAAKsO,kBAAkBjB,EAAQM,YAAcN,EAAQG,aACrD,IAAIsF,EAAM9S,KAAKyT,iBAAiB3F,EAAST,GAGzC7N,MAAMI,UAAUmB,MAAMwC,KAAKoQ,SAASC,iBAAiB,WAAWlT,SAASwC,IACrE,IAAIqO,EAAiB,IAAI1D,EAAeC,EAAST,GACjDnK,EAAQ2Q,cAAcrC,YAAYzK,KAAKuK,MAAMvK,KAAKC,UAAUuK,IAAkBlE,EAAQC,aAAa,IAGvG9N,MAAMI,UAAUmB,MAAMwC,KAAKoQ,SAASC,iBAAiB,sBAAsBlT,SAASwC,GAAyBA,EAAQwQ,cAAcZ,KAE/HQ,GACAtT,KAAKwT,kBAAkB1F,EAAST,EAExC,CAGQkG,iBAAiBzF,EAAiBT,GACtC,IAAIyE,EAAY9R,KAAKoO,iBAAiBN,GACtC,GAAIgE,aAAS,EAATA,EAAWtR,OAAQ,CACnB,IAAIsT,EAAe5Q,IACfA,EAAQmK,EAAQ,EAGpByE,EAAUpR,QAAQoT,E,CAE1B,CAEQL,iBAAiB3F,EAAiBT,EAAkBW,GAAU,GAClE,IAAIuD,EAAiB,IAAI1D,EAAeC,EAAST,GAEjD,OADAkE,EAAevD,QAAUA,EAClBuE,EAAOwB,kBAAkB/T,KAAKyS,YAAc,SAAWF,EAAOjC,WAAYiB,EACrF,CAEQnM,yBAAyBoL,EAAcwD,GAC3C,GAAI,mBAAqB,SAAWC,YAAa,CAC7C,IAAIrR,EAAS+Q,SAASO,YAAY,cAIlC,OAHAtR,EAAEmL,OAASiG,EAAQjG,OACnBnL,EAAEkL,QAAUkG,EAAQlG,QACpBlL,EAAEuR,UAAU3D,EAAMwD,EAAQhG,QAASgG,EAAQ/F,YACpCrL,C,CAEJ,CACH,IAAIwR,EAAc,KAAK,SAAYH,aAAYzD,EAAMwD,GAErD,OADMI,EAAatG,QAAUkG,EAAQlG,QAC9BsG,C,CAGf,EAOG,MAAMC,EAAb,cACY,KAAA7B,aAAkD/Q,OAClD,KAAAqP,aAAeH,EACf,KAAAjC,OAASvB,EACT,KAAA2E,UAAwB,EAmCpC,CAjCIwC,iBAAiB9B,GAEb,OADAxS,KAAKwS,aAAeA,EACbxS,IACX,CAEAiS,aAAanE,KAAoBgE,GAO7B,OANA,EAAAjK,OAAA,MAAaiK,GAAWnJ,MAAKiG,IACzB5O,KAAK8R,UAAUrR,KAAK,CAChBqN,QAASA,EACTc,SAAUA,GACZ,IAEC5O,IACX,CAGAkS,iBAAiBpB,GAEb,OADA9Q,KAAK8Q,aAAeA,EACb9Q,IACX,CAEAmS,WAAWzD,GAEP,OADA1O,KAAK0O,OAASA,EACP1O,IACX,CAEAoS,QACI,IAAIC,EAAS,IAAIE,EAAOvS,KAAKwS,aAAcxS,KAAK8Q,aAAc9Q,KAAK0O,QAInE,OAHA,EAAA7G,OAAA,MAAa7H,KAAK8R,WAAWnJ,MAAK2J,IAC9BD,EAAO1D,iBAAiB2D,EAAaxE,QAASwE,EAAa1D,SAAS,IAEjEyD,CACX,E","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///external amd \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Messaging.ts"],"sourcesContent":["/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\nexport class Es2019Array<T> extends Array<T> {\n    constructor(...another: T[]) {\n        super(...another);\n        //for testing it definitely runs into this branch because we are on es5 level\n        if(!(<any>Array.prototype).flatMap) {\n            let flatmapFun = (<any>Es2019Array).prototype.flatMap_;\n            //unfortunately in es5 the flatMap function is lost due to inheritance of a primitive\n            //es  class, we have to remap it back in\n            this.flatMap = flatmapFun;\n        }\n    }\n\n    flatMap_(mapperFunction: Function, noFallback: boolean = false): Es2019Array<T> {\n\n        let res = [];\n\n        let remap = item => {\n            let opRes = mapperFunction(item);\n            if(Array.isArray(opRes)) {\n                if(opRes.length == 1) {\n                    res.push(opRes[1])\n                    return;\n                }\n                if(opRes.length > 1) {\n                    opRes.forEach(newItem => remap(newItem))\n                }\n            } else {\n                res.push(item);\n            }\n        };\n        this.forEach( item => remap(item) )\n\n        return new Es2019Array(...res);\n    }\n\n\n    concat(...items): T[] {\n        return new Es2019Array(...super.concat(...items));\n    }\n\n    reverse(): T[] {\n        return new Es2019Array(...super.reverse());\n    }\n\n    slice(start?: number, end?: number): T[] {\n        return new Es2019Array(...super.slice(start, end));\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        return new Es2019Array(...super.splice(start, deleteCount));\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        return new Es2019Array(...super.filter(predicate, thisArg)  as any);\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        new Es2019Array(...other.getIf(key).value).forEach(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos =  Array.isArray(currAccessPos.value) ?\n                         Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !! (item?.[currKey] ?? false);\n                        })?.[currKey])  :\n                Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if(currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Config} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array<S>(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {Config, IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource, calculateSkips,\n    FilteredStreamDatasource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource, MultiStreamDatasource\n} from \"./SourcesCollectors\";\nimport {DomQuery} from \"./DomQuery\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n\n        let lookAhead = this?.activeDataSource?.lookAhead(cnt);\n        if (this?.activeDataSource && lookAhead != ITERATION_STATUS.EO_STRM) {\n            //this should cover 95% of all cases\n            return lookAhead;\n        }\n\n        if (this.activeDataSource) {\n            cnt -= calculateSkips(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams sub-sequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them, so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let datasourceData = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            //no embedded data anymore? we are done, data\n            //can either be a scalar an array or another datasource\n            if (datasourceData === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mappedData = this.mapFunc(datasourceData as T);\n\n            //it either comes in as datasource or as array\n            //both cases must be unified into a datasource\n            let currentDataSource = this.toDatasource(mappedData);\n            //we now run again  a lookahead\n            let ret = currentDataSource.lookAhead(cnt);\n            //if the value is found then we are set\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            //reduce the next lookahead by the number of elements\n            //we are now skipping in the current data source\n            cnt -= calculateSkips(currentDataSource);\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns the currently element selected in the stream\n     */\n    current(): T | ITERATION_STATUS\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T>, IStreamDataSource<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    static ofDomQuery(value: DomQuery): Stream<DomQuery> {\n        return Stream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): Stream<[string, any]> {\n        return Stream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    current(): T | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        if(this.pos >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos];\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    static ofDomQuery(value: DomQuery): LazyStream<DomQuery> {\n        return LazyStream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): LazyStream<[string, any]> {\n        return LazyStream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.ofStreamDataSource(new MultiStreamDatasource(this, toAppend as any) as any)\n        //return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","module.exports = __WEBPACK_EXTERNAL_MODULE__177__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * a standardized message to be sent over the message bus\n */\nimport {Observable, Subject} from \"rxjs\";\nimport {Stream} from \"./Stream\";\nimport {_global$} from \"./Global\";\n\n\n/**\n * generic crypto interface\n * to encrypt messages before they are sent\n * to the message bus oder the underlying bus system\n *\n * The idea is to make it as easy as possible, you can use for instance crypto js to\n * handle everything\n */\nexport interface Crypto {\n    /**\n     * note anything can be passed\n     *\n     * @param data the data to be encrypted\n     * @returns the encrypted data in any format, important is decode must be able to handle it\n     */\n    encode(data: any): any;\n\n    /**\n     * @param data the encrypted data in the format you expect it to be\n     * @returns the unencrypted data\n     */\n    decode(data: any): any;\n}\n\n\n/**\n * generic hash interface which provides\n * exactly one method a hash encode which returns a string hash value of encoded data\n */\nexport interface Hash {\n    encode(encodedData: string): string;\n}\n\n/**\n * Default implementation = no encryption\n */\nexport class NoCrypto implements Crypto {\n    decode(data: any): string {\n        return data;\n    }\n\n    encode(data: any): any {\n        return data;\n    }\n}\n\n//TODO dynamic encryptor which flushes the messages before changing the keys\n//that way we can rotate and change internal crypto keys on the fly\n\nlet noEncryption = new NoCrypto();\n\nexport class Message {\n\n    creationDate?: number;\n    identifier?: string;\n    targetOrigin?: string;\n    encoded: boolean = false;\n\n    constructor(public message: any = {}, targetOrigin = \"*\") {\n        this.targetOrigin = targetOrigin;\n        this.creationDate = new Date().getMilliseconds();\n        this.identifier = new Date().getMilliseconds() + \"_\" + Math.random() + \"_\" + Math.random();\n    }\n}\n\n/**\n * custom dom event wrapping our messages\n */\nclass MessageWrapper implements CustomEventInit<Message> {\n\n    detail?: Message;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n    channel: string;\n\n    constructor(channel: string, message: Message) {\n        this.detail = message;\n        this.bubbles = true;\n        this.cancelable = true;\n        this.composed = true;\n        this.channel = channel;\n    }\n}\n\n/**\n * abstract broker class\n * (The broker is the central distribution unit of messages)\n */\nabstract class BaseBroker {\n\n    static readonly EVENT_TYPE = \"brokerEvent\";\n    /**\n     * we can split the listeners with the system\n     * namespace... and type (aka identifier criteria)\n     */\n    protected messageListeners: any = {};\n    protected subjects: any = {};\n    protected processedMessages: any = {};\n\n    protected cleanupCnt = 0;\n    protected rootElem;\n    protected msgHandler;\n\n    protected readonly TIMEOUT_IN_MS = 1000;\n    protected readonly MSG_EVENT = \"message\";\n\n    //must be public because we also must have the option\n    //to set it outside of the constructor\n    crypto = noEncryption;\n\n\n    abstract register(scopeElement?: any): BaseBroker;\n\n    abstract unregister(): BaseBroker;\n\n    abstract broadcast(channel: string, message: Message | string): BaseBroker;\n\n\n    /**\n     * registers a listener on a channel\n     * @param channel the channel to register the listeners for\n     * @param listener the listener to register\n     */\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.reserveListenerNS(channel);\n\n        //we skip the processed messages, because they originated here\n        //and already are processed\n        this.messageListeners[channel].push((msg: Message) => {\n            if (msg.identifier in this.processedMessages) {\n                return;\n            }\n            if (msg?.encoded || msg?.[\"detail\"]?.encoded) {\n                if (msg?.[\"detail\"]) {\n                    msg[\"detail\"].message = this.crypto.decode(msg[\"detail\"].message);\n                    msg[\"detail\"].encoded = false;\n                } else {\n                    msg.message = this.crypto.decode(msg.message);\n                    msg.encoded = false;\n                }\n\n            }\n            listener(msg);\n        });\n        return this;\n    }\n\n    /**\n     * binding into rxjs\n     * produces a subject which can be used via next calls to send messages\n     * on the other hand we\n     * @param channel\n     */\n    asSubject(channel: string): Subject<Message> {\n        this.reserveSubjectNS(channel);\n        let subject = this.subjects[channel];\n        let oldNext = subject.next;\n\n        subject.next = (msg: Message | MessageWrapper) => {\n            //We use a recursive call to let the broadcaster handle\n            //The wrapper conversion and then again call us here\n            //that way both directions are handled.. next calls the broker\n            //and a broadcast calls next\n            if ((<MessageWrapper>msg)?.detail) {\n                oldNext.call(subject, (<MessageWrapper>msg)?.detail);\n            } else {\n                this.broadcast(channel, <Message>msg);\n            }\n        }\n        return subject;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * returns an observable on the baseBroker\n     * @param channel\n     */\n    asObservable(channel: string): Observable<Message> {\n        return this.asSubject(channel).asObservable();\n    }\n\n    /**\n     * reserves the listener namespace and wildcard namespace for the given identifier\n     * @param identifier\n     * @private\n     */\n    private reserveListenerNS(identifier: string) {\n        if (!this.messageListeners[identifier]) {\n            this.messageListeners[identifier] = [];\n        }\n        if (!this.messageListeners[\"*\"]) {\n            this.messageListeners[\"*\"] = [];\n        }\n    }\n\n    private reserveSubjectNS(identifier: string) {\n        if (!this.subjects[identifier]) {\n            this.subjects[identifier] = new Subject();\n        }\n        if (!this.subjects[\"*\"]) {\n            this.subjects[\"*\"] = new Subject();\n        }\n    }\n\n    /**\n     * unregisters a listener from this channel\n     *\n     * @param channel the channel to unregister from\n     * @param listener the listener to unregister the channel from\n     */\n    unregisterListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.messageListeners[channel] = (this.messageListeners[channel] || []).filter((item: any) => item !== listener);\n        return this;\n    }\n\n    /**\n     * answers a bidirectional message received\n     * usage, the client can use this method, to answer an incoming message in a precise manner\n     * so that the caller sending the bidirectional message knows how to deal with it\n     * this mechanism can be used for global storages where we have one answering entity per channel delivering the\n     * requested data, the request can be done asynchronously via promises waiting for answers\n     *\n     * @param channel the channel the originating message\n     * @param request the requesting message\n     * @param answer the answer to the request\n     */\n    answer(channel: string, request: Message | string, answer: Message): BaseBroker {\n        if ('string' == typeof request) {\n            request = new Message(request);\n        }\n\n        if (BaseBroker.isAnswer(request)) {\n            return;\n        }\n        answer.identifier = BaseBroker.getAnswerId(request);\n        this.broadcast(channel, answer);\n        return this;\n    }\n\n    private static getAnswerId(request: Message) {\n        return \"_r_\" + request.identifier;\n    }\n\n    private static isAnswer(request: Message) {\n        return request.identifier.indexOf(\"_r_\") == 0;\n    }\n\n    /**\n     * idea... a bidirectional broadcast\n     * sends a message and waits for the first answer coming in from one of the receivers\n     * sending the message back with a messageIdentifier_broadCastId answer\n     *\n     * @param channel\n     * @param message\n     */\n    request(channel: string, message: Message | string): Promise<Message> {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        let messageId = message.identifier;\n\n        let ret = new Promise<Message>((resolve, reject) => {\n            let timeout = null;\n            let listener = (message2: Message) => {\n                if (message2.identifier == messageId) {\n                    //broadcast from same source, we do not want\n                    //to deal with it now\n                    return;\n                }\n\n                if (message2.identifier == \"_r_\" + messageId) {\n                    clearTimeout(timeout);\n                    this.unregisterListener(channel, listener);\n                    resolve(message2);\n                }\n            }\n            timeout = setTimeout(() => {\n                this.unregisterListener(channel, listener);\n                reject(\"request message performed, timeout, no return value\");\n            }, 3000);\n            this.registerListener(channel, listener);\n\n        });\n        this.broadcast(channel, message);\n        return ret;\n    }\n\n\n    /**\n     * garbage collects the processed messages queue\n     * usually after one second\n     */\n    protected gcProcessedMessages() {\n        if ((++this.cleanupCnt) % 10 != 0) {\n            return;\n        }\n        let newProcessedMessages: any = {};\n        Object.keys(this.processedMessages).forEach(key => {\n            if (this.messageStillActive(key)) return;\n            newProcessedMessages[key] = this.processedMessages[key];\n        });\n        this.processedMessages = newProcessedMessages;\n    }\n\n    private messageStillActive(key: string): boolean {\n        return this.processedMessages[key] > ((new Date()).getMilliseconds() - this.TIMEOUT_IN_MS);\n    }\n\n    protected markMessageAsProcessed(message: Message) {\n        this.processedMessages[message.identifier] = message.creationDate;\n    }\n}\n\nlet broadCastChannelBrokerGenerator = (name) => {\n    if (_global$()?.BroadcastChannel) {\n        return new (_global$()).BroadcastChannel(name);\n    }\n    throw Error(\"No Broadcast channel in the system, use a shim or provide a factory function\" +\n        \"in the constructor\");\n};\n\nconst DEFAULT_CHANNEL_GROUP = \"brokr\";\n\n/**\n * a broker which hooks into the Broadcast Channel\n * either via shim or substitute lib\n *\n * The broadcast channels are a standardized messaging library\n * The broker mechanism sets a layer on top to make it more manageable!\n *\n */\nexport class BroadcastChannelBroker extends BaseBroker {\n    private openChannels: [{ key: string }, BroadcastChannel] = <any>{};\n    private readonly msgListener: Function;\n\n\n    /**\n     * @param brokerFactory a factory generating a broker\n     * @param channelGroup a group to combine a set of channels\n     * @param crypto a crypto class\n     */\n    constructor(private brokerFactory: Function = broadCastChannelBrokerGenerator, private channelGroup = DEFAULT_CHANNEL_GROUP, public crypto: Crypto = noEncryption) {\n        super();\n        this.msgListener = (messageData: MessageWrapper) => {\n            if (messageData.detail.encoded) {\n                messageData.detail.message = <any>this.crypto.decode(messageData.detail.message);\n                messageData.detail.encoded = false;\n            }\n            let coreMessage = messageData.detail;\n            let channel: string = messageData.channel;\n\n            if (this.messageListeners?.[channel]) {\n                this.messageListeners?.[channel].forEach(listener => {\n                    listener(coreMessage);\n                })\n            }\n            this.markMessageAsProcessed(coreMessage);\n            return true;\n        }\n        this.crypto = crypto;\n        this.register();\n    }\n\n    broadcast(channel: string, message: Message | string, includeOrigin = true): BaseBroker {\n        try {\n            if ('string' == typeof message) {\n                message = new Message(message);\n            }\n            //we now run a quick remapping to avoid\n            //serialisation errors\n            let msgString = JSON.stringify(<Message>message);\n            message = <Message>JSON.parse(msgString);\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n            messageWrapper.detail.encoded = true;\n\n            if (this?.subjects[channel]) {\n                this.subjects[channel].next(messageWrapper);\n            }\n\n            this.openChannels[this.channelGroup].postMessage(messageWrapper);\n            if (includeOrigin) {\n                this.msgListener(messageWrapper);\n            }\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        super.registerListener(channel, listener);\n        return <BaseBroker>this;\n    }\n\n    register(): BaseBroker {\n        if (!this.openChannels[this.channelGroup]) {\n            this.openChannels[this.channelGroup] = this.brokerFactory(this.channelGroup);\n        }\n        this.openChannels[this.channelGroup].addEventListener(\"message\", this.msgListener);\n        return <BaseBroker>this;\n    }\n\n    unregister(): BaseBroker {\n        this.openChannels[this.channelGroup].close();\n        return <BaseBroker>this;\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a broadcast channel broker\n */\nexport class BroadcastChannelBrokerBuilder {\n    private broadCastChannelGenerator: Function = broadCastChannelBrokerGenerator;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withGeneratorFunc(generatorFunc: Function): BroadcastChannelBrokerBuilder {\n        this.broadCastChannelGenerator = generatorFunc;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BroadcastChannelBrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n    withChannelGroup(channelGroup: string): BroadcastChannelBrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BroadcastChannelBrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): BroadcastChannelBroker {\n        let broker = new BroadcastChannelBroker(this.broadCastChannelGenerator, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}\n\n\n/**\n * implementation of a messaging based transport\n */\n\n/**\n * central message broker which uses various dom constructs\n * to broadcast messages into subelements\n *\n * we use the dom event system as transport and iframe and shadow dom mechanisms in a transparent way to\n * pull this off\n *\n * usage\n *\n * broker = new Broker(optional rootElement)\n *\n * defines a message broker within a scope of rootElement (without it is window aka the current isolation level)\n *\n * broker.registerListener(channel, listener) registers a new listener to the current broker and channel\n * broker.unregisterListener(channel, listener) unregisters the given listener\n *\n * broker.broadcast(message, optional direction, optional callBrokerListeners)\n * sends a message (channel included in the message object) in a direction (up, down, both)\n * and also optionally calls the listeners on the same broker (default off)\n *\n * the flow is like\n * up messages are propagated upwards only until it reaches the outer top of the dom\n * downwards, the messages are propagated downwards only\n * both the message is propagated into both directions\n *\n * Usually messages sent from the same broker are not processed within... however by setting\n * callBrokerListeners to true the listeners on the same broker also are called\n * brokers on the same level will get the message and process it automatically no matter what.\n * That way you can exclude the source from message processing (and it is done that way automatically)\n *\n * Isolation levels. Usually every isolation level needs its own broker object registering\n * on the outer bounds\n *\n * aka documents will register on window\n * iframes on the iframe windowObject\n * isolated shadow doms... document\n *\n *\n *\n */\nexport class Broker extends BaseBroker {\n\n    /**\n     * constructor has an optional root element\n     * and an internal name\n     *\n     * @param scopeElement\n     * @param brokerGroup\n     * @param crypto\n     */\n    constructor(scopeElement: HTMLElement | Window | ShadowRoot = window, public brokerGroup = \"brokr\", crypto: Crypto = noEncryption) {\n\n        super();\n\n        /**\n         * message relay.. identifies message events and relays them to the listeners\n         * @param event\n         */\n        let evtHandler = (event: MessageEvent | CustomEvent<Message>) => {\n            let details = (<any>event)?.detail ?? (<MessageEvent>event)?.data?.detail;\n            //TODO possible crypto hook, needs unit testing\n            let channel = ((<any>event)?.data?.channel) ?? ((<any>event)?.channel);\n\n            //javascript loses the type info in certain module types\n            if (details?.identifier && details?.message) {\n                let msg: Message = details;\n                if (msg.identifier in this.processedMessages) {\n                    return;\n                }\n                //coming in from up... we need to send it down\n                //a relayed message always has to trigger the listeners as well\n                if ((<any>event)?.detail) {\n                    this.broadcast(channel, msg);\n                } else {\n                    this.broadcast(channel, msg);\n                }\n\n            }\n        };\n        this.msgHandler = (evt: MessageEvent) => evtHandler(evt);\n        this.crypto = crypto;\n        this.register(scopeElement);\n    }\n\n    /**\n     * register the current broker into a scope defined by wnd\n     * @param scopeElement\n     */\n    register(scopeElement: HTMLElement | Window | ShadowRoot): BaseBroker {\n        this.rootElem = (<any>scopeElement).host ? (<any>scopeElement).host : scopeElement;\n        if ((<any>scopeElement).host) {\n            let host = (<ShadowRoot>scopeElement).host;\n            host.setAttribute(\"data-broker\", \"1\");\n        } else {\n            if (scopeElement?.[\"setAttribute\"])\n                (<any>scopeElement).setAttribute(\"data-broker\", \"1\");\n        }\n\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler, {capture: true});\n        /*dom message usable by iframes*/\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE + this.MSG_EVENT, this.msgHandler, {capture: true});\n        return <any>this;\n    }\n\n    /**\n     * manual unregister function, to unregister as broker from the current\n     * scope\n     */\n    unregister(): BaseBroker {\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler)\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + this.MSG_EVENT, this.msgHandler)\n        return <any>this;\n    }\n\n\n    /**\n     * broadcast a message\n     * the message contains the channel and the data and some internal bookkeeping data\n     *\n     * @param channel the channel to broadcast to\n     * @param message the message dot send\n     * (for instance 2 iframes within the same parent broker)\n     */\n    broadcast(channel: string, message: Message | string): BaseBroker {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        //message.message = this.crypto.encode(message);\n        //message.encoded = true;\n\n        if (this?.subjects[channel]) {\n            let messageWrapper = new MessageWrapper(channel, message);\n            if (!messageWrapper.detail.encoded) {\n                messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n                messageWrapper.detail.encoded = true;\n            }\n            this.subjects[channel].next(messageWrapper);\n        }\n\n        try {\n            this.dispatchUp(channel, message, false, true);\n            //listeners already called\n            this.dispatchDown(channel, message, true, false)\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n\n    private dispatchUp(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.markMessageAsProcessed(message);\n        if (_global$().parent != null) {\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            _global$().parent.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        }\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n    private dispatchSameLevel(channel: string, message: Message) {\n        let event = this.transformToEvent(channel, message, true);\n        //we also dispatch sideways\n        _global$().dispatchEvent(event);\n    }\n\n    //a dispatch of our own should never trigger the listeners hence the default true\n    private dispatchDown(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        let evt = this.transformToEvent(channel, message);\n\n        /*we now notify all iframes lying underneath */\n        Array.prototype.slice.call(document.querySelectorAll(\"iframe\")).forEach((element: HTMLIFrameElement) => {\n            let messageWrapper = new MessageWrapper(channel, message);\n            element.contentWindow.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        });\n\n        Array.prototype.slice.call(document.querySelectorAll(\"[data-broker='1']\")).forEach((element: HTMLElement) => element.dispatchEvent(evt))\n\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n\n    private msgCallListeners(channel: string, message: Message) {\n        let listeners = this.messageListeners[channel];\n        if (listeners?.length) {\n            let callElement = (element: (msg: Message) => void) => {\n                element(message);\n            }\n\n            listeners.forEach(callElement);\n        }\n    }\n\n    private transformToEvent(channel: string, message: Message, bubbles = false): CustomEvent {\n        let messageWrapper = new MessageWrapper(channel, message);\n        messageWrapper.bubbles = bubbles;\n        return Broker.createCustomEvent(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, messageWrapper);\n    }\n\n    private static createCustomEvent(name: string, wrapper: MessageWrapper): any {\n        if ('function' != typeof _global$().CustomEvent) {\n            let e: any = document.createEvent('HTMLEvents');\n            e.detail = wrapper.detail;\n            e.channel = wrapper.channel;\n            e.initEvent(name, wrapper.bubbles, wrapper.cancelable);\n            return e;\n\n        } else {\n            let customEvent = new (_global$()).CustomEvent(name, wrapper);\n            (<any>customEvent).channel = wrapper.channel;\n            return customEvent;\n        }\n\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a dom broker\n */\nexport class BrokerBuilder {\n    private scopeElement: HTMLElement | Window | ShadowRoot = window;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withScopeElement(scopeElement: HTMLElement | Window | ShadowRoot): BrokerBuilder {\n        this.scopeElement = scopeElement;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n\n    withChannelGroup(channelGroup: string): BrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): Broker {\n        let broker = new Broker(this.scopeElement, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}"],"names":["Es2019Array","Array","constructor","another","super","prototype","flatMap","flatmapFun","flatMap_","this","mapperFunction","noFallback","res","remap","item","opRes","isArray","length","push","forEach","newItem","concat","items","reverse","slice","start","end","splice","deleteCount","filter","predicate","thisArg","_global$","globalThis","window","g","Lang","trim","str","ws","i","replace","test","charAt","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","e","saveResolveLazy","strToArray","splitter","ret","split","element","objToArray","obj","offset","pack","call","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","target","theArgs","TypeError","to","Object","assign","nextSource","keys","nextKey","hasOwnProperty","Monad","value","_value","map","fn","inVal","mapped","static","isAbsent","isPresent","presentRunnable","absent","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","fromNullable","getIf","key","preprocessKeys","currentPos","cnt","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","get","defaultVal","toJson","JSON","stringify","indexOf","parseInt","substring","resolve","resolver","ValueEmbedder","rootElem","valueKey","newVal","alternative","ConfigEntry","ITERATION_STATUS","Stream","_limits","pos","data","of","dataSource","hasNext","next","asArray","current","limits","toAppend","toConcat","onElem","each","reset","inval","strmR","reduce","startVal","val1","first","last","Math","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collect","collector","finalValue","isLimitsReached","isEndOfArray","lookAhead","Symbol","iterator","done","LazyStream","parent","values","ArrayStreamDataSource","isOverLimits","ofStreamDataSource","MultiStreamDatasource","nextFilter","max","t","MappedStreamDataSource","el","stop","FilteredStreamDatasource","FlatMapStreamDataSource","value1","value2","el1","el2","arr","ArrayCollector","module","exports","__WEBPACK_EXTERNAL_MODULE__177__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","prop","r","toStringTag","NoCrypto","decode","encode","noEncryption","Message","message","targetOrigin","encoded","creationDate","Date","getMilliseconds","identifier","random","MessageWrapper","channel","detail","bubbles","cancelable","composed","BaseBroker","messageListeners","subjects","processedMessages","cleanupCnt","TIMEOUT_IN_MS","MSG_EVENT","crypto","registerListener","listener","reserveListenerNS","msg","asSubject","reserveSubjectNS","subject","oldNext","broadcast","asObservable","Subject","unregisterListener","answer","request","isAnswer","getAnswerId","messageId","Promise","reject","timeout","message2","clearTimeout","setTimeout","gcProcessedMessages","newProcessedMessages","messageStillActive","markMessageAsProcessed","EVENT_TYPE","broadCastChannelBrokerGenerator","name","BroadcastChannel","Error","DEFAULT_CHANNEL_GROUP","BroadcastChannelBroker","brokerFactory","channelGroup","openChannels","msgListener","messageData","coreMessage","register","includeOrigin","msgString","parse","messageWrapper","postMessage","addEventListener","unregister","close","BroadcastChannelBrokerBuilder","broadCastChannelGenerator","listeners","withGeneratorFunc","generatorFunc","withListener","withChannelGroup","withCrypto","build","broker","listenerItem","Broker","scopeElement","brokerGroup","evtHandler","event","details","msgHandler","evt","host","setAttribute","capture","removeEventListener","dispatchUp","dispatchDown","ignoreListeners","callBrokerListeners","msgCallListeners","dispatchSameLevel","transformToEvent","dispatchEvent","document","querySelectorAll","contentWindow","callElement","createCustomEvent","wrapper","CustomEvent","createEvent","initEvent","customEvent","BrokerBuilder","withScopeElement"],"sourceRoot":""}