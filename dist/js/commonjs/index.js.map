{"version":3,"file":"index.js","mappings":"0IAmBA,aACA,SAkBA,0BAaA,QAZI,YAAAA,OAAA,SAAOC,GACH,OAAIA,aAAI,EAAJA,EAAMC,eACCC,KAAKC,MAAMH,EAAKC,eAEpBD,CACX,EAEA,YAAAI,OAAA,SAAOJ,GACH,MAAO,CACHC,cAAeC,KAAKG,UAAUL,GAEtC,EACJ,EAbA,GAAa,EAAAM,WAAAA,EA8Bb,iBAYI,WAAoBC,EAAyBC,EAA8BC,GAAvD,KAAAF,QAAAA,EAAyB,KAAAC,aAAAA,EAA8B,KAAAC,QAAAA,EATnE,KAAAC,WAAa,EACb,KAAAC,eAA4C,CAAC,EAC7C,KAAAC,SAAW,CASnB,CAqDJ,OA/CI,YAAAb,OAAA,SAAOC,G,MAGGa,GAAW,IAAIC,MAAOC,UACzBC,KAAKC,eAAeJ,KACnBG,KAAKL,eAAiB,EAAAO,WACjBC,QAAQH,KAAKL,gBACbS,QAAO,SAAApB,GAAQ,OAAAA,EAAK,IAAMa,CAAX,IACfQ,QAAQ,IAAI,EAAAC,sBAErBN,KAAKJ,SAAWC,EAGhB,IAAIU,EAAkBP,KAAKP,QAAQL,OAAOJ,GAC1C,KAAwB,QAAnB,EAAAgB,KAAKL,sBAAc,eAAGY,EAAgBC,aACvC,MAAMC,MAAM,wEAEhB,OAAOT,KAAKR,aAAaT,OAAOC,EACpC,EAWQ,YAAAiB,eAAR,SAAuBJ,GACnB,OAAQG,KAAKJ,SAAWI,KAAKT,QAAWM,KAAgBG,KAAKN,WAAcgB,EAAeC,eAAiB,CAC/G,EAQA,YAAAvB,OAAA,SAAOJ,GACH,IAAI4B,EAAUZ,KAAKR,aAAaJ,OAAOJ,GAGnCuB,EAAkBP,KAAKP,QAAQL,OAAOwB,GAE1C,OADAZ,KAAKL,eAAeY,EAAgBC,aAAe,IAAIV,MAAOC,UAAaC,KAAKT,QACzEqB,CACX,EAhEe,EAAAD,cAAgB,GAiEnC,C,CAnEA,GAAa,EAAAD,eAAAA,C,4hGCnDb,IAwCKG,EAxCL,SAEA,SACA,SAOA,SACOC,EAAO,EAAAC,KAAKD,KAEZE,EAAW,EAAAD,KAAKC,SAChBC,EAAM,EAAAF,KAAKG,iBAClB,SACOC,EAAa,EAAAJ,KAAKI,WA0CzB,SAASC,EAAaC,EAAgBC,EAA2CC,GAO7E,YAP6E,IAAAA,IAAAA,EAAA,CAC7EC,YAAY,EACZC,WAAW,EACXC,SAAS,EACTnC,QAAS,IACToC,SAAU,MAEH,IAAIC,SAAkB,SAACC,EAASC,GACnC,IAAIC,EAA6B,KAC3BC,EAAY,IAAIvB,MAAM,6BAI5B,SAASwB,EAAYZ,EAAgBC,GAEjC,OAAMA,EAAUD,GACLA,EAEPE,EAAQE,UACCH,EAAUD,GAASA,EAAOA,EAAKa,WAAW9B,QAAO,SAAA+B,GAAQ,OAAAb,EAAUa,EAAV,IAAiBC,QAAQC,MAAMA,MAC1Fd,EAAQG,QACNJ,EAAUD,GAASA,EAAOA,EAAKiB,iBAAiB,OAAOlC,QAAO,SAAA+B,GAAQ,OAAAb,EAAUa,EAAV,IAAiBC,QAAQC,MAAMA,MAErGf,EAAUD,GAASA,EAAO,IAG3C,CAEA,IAAIkB,EAAelB,EACnB,GAAOkB,EAAeN,EAAYM,EAAcjB,GAC5CO,EAAQ,IAAIW,EAASD,SAIzB,GAAI,oBAAsBE,iBAAkB,CACxC,IAAM,EAAaC,YAAW,WAE1B,OADAX,EAASY,aACFb,EAAME,EACjB,GAAGT,EAAQhC,SAUXwC,EAAW,IAAIU,kBARoB,SAACG,GAChC,IAAMC,EAAQ,IAAIL,EAASI,EAAaE,KAAI,SAACC,GAAQ,OAAAA,EAAIC,MAAJ,KAAa5C,QAAO,SAAA+B,GAAQ,OAAAb,EAAUa,EAAV,IAAiBC,QAC9FS,EAAMI,cACNC,aAAa,GACbnB,EAASY,aACTd,EAAQ,IAAIW,EAASK,GAASxB,IAEtC,IAKA,IAAI,EAAiB,EAAH,GAAOE,UAClB,EAAehC,QACtB8B,EAAK8B,UAAS,SAAAhB,GACVJ,EAASqB,QAAQjB,EAAM,EAC3B,G,MAGA,IAAI,EAAWkB,aAAY,WACvB,IAAIR,EAAQZ,EAAYZ,EAAMC,GACxBuB,IACE,IACAK,aAAa,GACbI,cAAc,GACd,EAAW,MAEfzB,EAAQ,IAAIW,EAASK,GAASxB,IAEtC,GAAGE,EAAQI,UACP,EAAUe,YAAW,WACjB,IACAY,cAAc,GACdxB,EAAME,GAEd,GAAGT,EAAQhC,QAGnB,GACJ,EAjGA,SAAKsB,GACD,kBACA,kBACA,kBACA,gBACA,gBACA,gBACA,qBAEH,CATD,CAAKA,IAAAA,EAA4B,KAmGjC,kBAEI,WAAoB0C,EAA2BC,EAAsBC,QAAA,IAAAA,IAAAA,EAAA,MAArE,MACI,YAAMF,EAASC,IAAK,K,OADJ,EAAAD,QAAAA,EAA2B,EAAAC,KAAAA,EAAsB,EAAAC,WAAAA,E,CAErE,CA0BJ,OA9BsC,OAMlC,sBAAI,oBAAK,C,IAAT,W,MACQC,GAAiB,EAAA1D,KAAKuD,QAAQI,IAAI,IAAGC,OAAM,QAAI,IAAIC,OACvD,OAAKH,EAAII,OAGFJ,EAAI,GAAGK,aAAa/D,KAAKwD,MAFrBxD,KAAKyD,UAGpB,E,IAEA,SAAUpB,GAEN,I,MADIqB,GAAiB,EAAA1D,KAAKuD,QAAQI,IAAI,IAAGC,OAAM,QAAI,IAAIC,OAC9CG,EAAM,EAAGA,EAAMN,EAAII,OAAQE,IAChCN,EAAIM,GAAKC,aAAajE,KAAKwD,KAAMnB,GAErCqB,EAAI,GAAGO,aAAajE,KAAKwD,KAAMnB,EACnC,E,gCAEU,YAAA6B,SAAV,WACI,OAAOC,CACX,EAEO,EAAAC,aAAP,SAAyC/B,EAAagC,GAClD,YADkD,IAAAA,IAAAA,EAAA,SACtC,IAAIF,EAAiB9B,EAAOgC,EAC5C,EAEJ,EA9BA,CAAsC,EAAAC,eAAzB,EAAAH,iBAAAA,EAgCb,kBAEI,WAAoBZ,EAA2BC,EAAsBC,QAAA,IAAAA,IAAAA,EAAA,MAArE,MACI,YAAMF,EAASC,IAAK,K,OADJ,EAAAD,QAAAA,EAA2B,EAAAC,KAAAA,EAAsB,EAAAC,WAAAA,E,CAErE,CAyBJ,OA7B2B,OAMvB,sBAAI,oBAAK,C,IAAT,WACI,IAAIC,EAAiB1D,KAAKuD,QAAQM,OAClC,OAAKH,EAAII,OAGDJ,EAAI,GAAmBa,MAAMvE,KAAKwD,MAF/BxD,KAAKyD,UAGpB,E,IAEA,SAAUpB,GAEN,IADA,IAAIqB,EAAqB1D,KAAKuD,QAAQM,OAC7BG,EAAM,EAAGA,EAAMN,EAAII,OAAQE,IAChCN,EAAIM,GAAKO,MAAMvE,KAAKwD,MAAQnB,CAEpC,E,gCAEU,YAAA6B,SAAV,WACI,OAAOC,CACX,EAEO,EAAAC,aAAP,SAAyC/B,EAAagC,GAClD,YADkD,IAAAA,IAAAA,EAAA,SACtC,IAAIF,EAAiB9B,EAAOgC,EAC5C,EAEJ,EA7BA,CAA2B,EAAAC,eAAd,EAAAE,MAAAA,EAmCb,IAAMC,EAAoB,WACtB,OAAO,CACX,EAikBA,aAaI,a,UAAY,kDAER,GANI,KAAAC,SAA2B,GAEnC,KAAAC,KAAO,EA09CP,KAAAC,SAAW,GAt9CH,EAAAC,SAAST,aAAaM,GAAUI,YAAeJ,EAASZ,OAKxD,IAAK,IAAIE,EAAM,EAAGA,EAAMU,EAASZ,OAAQE,IACrC,GAAKU,EAASV,GAGP,GAAIhD,EAAS0D,EAASV,IAAO,CAChC,IAAIzB,EAAeC,EAASF,iBAAyBoC,EAASV,IACzDzB,EAAauC,YACdJ,EAASK,KAAI,MAAbL,EAAQ,OAASnC,EAAasB,SAAM,G,MAEjCa,EAASV,aAAgBxB,GAChC,EAAAxC,KAAK0E,UAASK,KAAI,eAAUL,EAASV,GAAMH,SAAM,IAEjD7D,KAAK0E,SAASK,KAAUL,EAASV,SAIjD,CAu1DJ,OAj1DI,sBAAI,oBAAK,C,IAAT,WACI,OAAOhE,KAAKgF,UAAU,EAC1B,E,gCAEA,sBAAI,qBAAM,C,IAAV,WACI,OAAOhF,KAAKiF,UAChB,E,gCAEA,sBAAI,qBAAM,C,IAAV,WACI,OAAO,EAAAC,QACX,E,gCAKA,sBAAI,iBAAE,C,IAAN,WACI,OAAO,IAAIf,EAAiBnE,KAAK2D,IAAI,GAAI,KAC7C,E,gCAKA,sBAAI,qBAAM,C,IAAV,WACI,OAAO3D,KAAK0E,SAASZ,MACzB,E,gCAKA,sBAAI,sBAAO,C,IAAX,WACI,OAAyB9D,KAAKgF,UAAU,GAAGG,MAAM,UACrD,E,gCAKA,sBAAI,uBAAQ,C,IAAZ,WACI,OAAyBnF,KAAKgF,UAAU,GAAGG,MAAM,WACrD,E,gCAEA,YAAAC,MAAA,SAAMC,GACF,OAAQrF,KAAK8E,aACL9E,KAAKsF,SAAS1B,OAAO,aAChBvB,MAAMkD,eAAiBF,EAAQE,eACjCvF,KAAKqF,QAAQzB,OAAO,aAClBvB,MAAMkD,eAAiBF,EAAQE,cAEhD,EAQA,sBAAI,mBAAI,C,IAAR,WACI,OAAOvF,KAAKgF,UAAU,GAAGG,MAAM,OACnC,E,gCAQA,sBAAI,mBAAI,C,IAAR,WACI,OAAO,IAAI,EAAAb,cAActE,KAAKgF,UAAU,GAAG3C,MAAO,OACtD,E,gCAQA,sBAAI,yBAAU,C,IAAd,WACI,OAAIrC,KAAKgF,UAAU,GAAGG,MAAM,SAASlC,YAC1B,IAAI,EAAAqB,cAAsBtE,KAAKgF,UAAU,GAAG3C,OAEvC,EAAAiC,cAAckB,MAElC,E,gCAEA,sBAAI,kBAAG,C,IAAP,WACI,OAAOxF,KAAKyF,WAAWpD,KAC3B,E,IAEA,SAAQA,GACJrC,KAAKyF,WAAWpD,MAAQA,CAC5B,E,gCAEA,sBAAI,qBAAM,C,IAAV,WACI,OAAOrC,KAAK0F,GAAGrD,KACnB,E,IAEA,SAAWA,GACPrC,KAAK0F,GAAGrD,MAAQA,CACpB,E,gCAEA,sBAAI,sBAAO,C,IAAX,WACI,OAAO,EAAAsD,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAO3F,KAAK6D,SAAM,IAAEgC,UAAS,SAAAC,GAAM,QAAQA,EAAIC,OAAZ,GACpD,E,IAEA,SAAYC,GACRhG,KAAKmD,UAAS,SAAA2C,GAAM,OAAMA,EAAIC,QAAUC,CAApB,GACxB,E,gCAEA,sBAAI,uBAAQ,C,IAAZ,WAEI,OAAOhG,KAAKsC,iBAAiB,8CACjC,E,gCAEA,sBAAI,2BAAY,C,IAAhB,WAEI,OAAOtC,KAAKiG,qBADE,8CAElB,E,gCAOA,YAAAA,qBAAA,SAAqBC,GACjB,IAAIrD,EAAyB,GACzBsD,EAAWnG,KAAKsC,iBAAiB4D,GACjCC,EAASrC,QACTjB,EAAMkC,KAAKoB,GAEf,IAAIC,EAAcpG,KAAKsC,iBAAiB,KAAK+D,WAC7C,GAAID,EAAYtC,OAAQ,CACpB,IAAIwC,EAAYF,EAAYH,qBAAqBC,GAC7CI,EAAUxC,QACVjB,EAAMkC,KAAKuB,E,CAGnB,OAAO,IAAI9D,EAAQ,WAARA,EAAQ,aAAIK,IAAK,IAChC,EAMA,sBAAI,uBAAQ,C,IAAZ,WACI,OAAO7C,KAAKuG,KAAK,YAAYtD,WACjC,E,IAEA,SAAauD,GAEJA,EAGDxG,KAAKuG,KAAK,YAAYlE,MAAQ,WAF9BrC,KAAKyG,gBAAgB,WAK7B,E,gCAEA,YAAAA,gBAAA,SAAgBjD,GACZxD,KAAKmD,UAAS,SAAAhB,GAAQ,OAAAA,EAAKsE,gBAAgBjD,EAArB,GAC1B,EAEA,sBAAI,yBAAU,C,IAAd,WACI,IAAIkD,EAA+B,GAInC,OAHA1G,KAAKmD,UAAS,SAAChB,GACXuE,EAAeA,EAAaC,OAAOxF,EAAWgB,EAAKD,YACvD,IACO,IAAIM,EAAQ,WAARA,EAAQ,aAAIkE,IAAY,IACvC,E,gCAKA,sBAAI,qBAAM,C,IAAV,WACI,OAAO,IAAI,EAAAf,OAAM,WAAN,EAAAA,OAAM,aAAc3F,KAAK4G,UAAO,IAC/C,E,gCAUA,sBAAI,yBAAU,C,IAAd,WACI,OAAO,EAAA1G,WAAW0F,GAAE,MAAb,EAAA1F,WAAU,OAAOF,KAAK4G,UAAO,GACxC,E,gCAEA,sBAAI,sBAAO,C,IAAX,WAEI,MAAO,GAAGD,OAAO,EAAAzG,WAAW0F,GAAE,MAAb,EAAA1F,WAAU,OAAOF,KAAK0E,WAAQ,IAAEtE,QAAO,SAAA+B,GACpD,OAAe,MAARA,CACX,IACKW,KAAI,SAAAX,GACD,OAAOK,EAASqE,KAAK1E,EACzB,IAAG9B,QAAQ,IAAI,EAAAyG,gBACvB,E,gCAEA,sBAAI,0BAAW,C,IAAf,WACI,OAAO,EAAA5G,WAAW0F,GAAE,MAAb,EAAA1F,WAAU,OAAOF,KAAK0E,WAAQ,IAChCtE,QAAO,SAAA+B,GAAQ,OAAQ,MAARA,CAAA,IACfW,KAAI,SAAAiE,GAAQ,OAACA,EAAqBC,WAAtB,IACZC,QAAO,SAACC,EAAYC,GAAa,OAAAD,EAAaC,CAAb,GAAuB,GAAG9E,KACpE,E,gCAEA,sBAAI,2BAAY,C,IAAhB,WACI,OAAO,EAAAnC,WAAW0F,GAAE,MAAb,EAAA1F,WAAU,OAAOF,KAAK0E,WAAQ,IAChCtE,QAAO,SAAA+B,GAAQ,OAAQ,MAARA,CAAA,IACfW,KAAI,SAAAiE,GAAQ,OAACA,EAAqBK,YAAtB,IACZH,QAAO,SAACC,EAAYC,GAAa,OAAAD,EAAaC,CAAb,GAAuB,GAAG9E,KACpE,E,gCAEA,sBAAI,yBAAU,C,IAAd,WACI,OAAO,EAAAnC,WAAW0F,GAAE,MAAb,EAAA1F,WAAU,OAAOF,KAAK0E,WAAQ,IAChCtE,QAAO,SAAA+B,GAAQ,OAAQ,MAARA,CAAA,IACfW,KAAI,SAAAiE,GAAQ,OAACA,EAAqBM,UAAtB,IACZJ,QAAO,SAACC,EAAYC,GAAa,OAAAD,EAAaC,CAAb,GAAuB,GAAG9E,KACpE,E,gCAEA,sBAAI,wBAAS,C,IAAb,WACI,OAAO,EAAAnC,WAAW0F,GAAE,MAAb,EAAA1F,WAAU,OAAOF,KAAK0E,WAAQ,IAChCtE,QAAO,SAAA+B,GAAQ,OAAQ,MAARA,CAAA,IACfW,KAAI,SAAAiE,GAAQ,OAACA,EAAqBO,SAAtB,IACZL,QAAO,SAACC,EAAYC,GAAa,OAAAD,EAAaC,CAAb,GAAuB,GAAG9E,KACpE,E,gCAEA,sBAAI,0BAAW,C,IAAf,WACI,MAAO,GAAGsE,OAAO,EAAAhB,OAAOC,GAAG5F,KAAK0E,UAAUtE,QAAO,SAAA+B,GAAQ,OAAQ,MAARA,CAAA,IAAc9B,QAAQ,IAAI,EAAAyG,gBACvF,E,gCAGO,EAAAb,qBAAP,SAA4BsB,GACxB,OAAO,IAAI/E,EAASgF,UAAUvB,qBAAqBsB,EACvD,EAQO,EAAAjF,iBAAP,SAAwBiF,GACpB,OAAqC,GAAjCA,EAASE,QAAQ,YACV,IAAIjF,EAASgF,UAAUE,sBAAsBH,GAE7C,IAAI/E,EAASgF,UAAUG,kBAAkBJ,EAExD,EASO,EAAAV,KAAP,SAAYU,EAAuCK,GAC/C,YAD+C,IAAAA,IAAAA,GAAA,GAC3C5G,EAASuG,GACAK,EAAwD,IAAIpF,EAASgF,UAAUK,SAAiBN,GAAxF,IAAI/E,EAASgF,UAAUX,KAAaU,GAE9C,IAAI/E,EAAc+E,EAEjC,EAQO,EAAAO,UAAP,SAAiBP,GACb,OAAIvG,EAASuG,GACF,IAAI/E,EAASgF,UAAUM,UAAkBP,GAEzC,IAAI/E,EAAc+E,EAEjC,EAEO,EAAAQ,WAAP,SAAkBC,EAAcC,GAC5B,OAAO,IAAIzF,EAASgF,UAAUO,WAAWC,EAAMC,EACnD,EAEO,EAAAC,iBAAP,SAAwBF,EAAcC,GAClC,OAAO,IAAIzF,EAASgF,UAAUU,iBAAiBF,EAAMC,EACzD,EAOO,EAAAE,WAAP,SAAkBC,GAGd,IAAMC,EAAMb,SAASc,eAAeC,mBAAmB,IAEnDC,GADJJ,EAAStH,EAAKsH,IACW7C,cACzB,IAAoD,GAAhDiD,EAAYC,OAAO,2BACwB,GAA3CD,EAAYC,OAAO,sBACwB,GAA3CD,EAAYC,OAAO,sBACwB,GAA3CD,EAAYC,OAAO,oBAEnB,OADAJ,EAAIK,gBAAgBC,UAAYP,EACzB,IAAI5F,EAAS6F,EAAIK,iBAExB,IAAIE,EAAgB,SAAUC,EAAaxD,GACvC,IAAIyD,EAAO,CAAC,IAAKzD,EAAS,KAAK0D,KAAK,IAChCC,EAAO,CAAC,IAAK3D,EAAS,KAAK0D,KAAK,IACpC,OAA6B,GAArBF,EAAIpB,QAAQqB,IAAqC,GAArBD,EAAIpB,QAAQuB,EACpD,EAEIC,EAAmB,IAAIzG,EAASgF,SAAS0B,cAAc,QAG3D,OAAIN,EAAcJ,EAAa,UAAYI,EAAcJ,EAAa,UAClES,EAAiBE,KAAK,iBAAUf,EAAM,aAC/Ba,EAAiB3G,iBAAiB,SAASqB,IAAI,GAAGzB,WAAWkH,UAC7DR,EAAcJ,EAAa,UAClCS,EAAiBE,KAAK,6CAAsCf,EAAM,aAC3Da,EAAiB3G,iBAAiB,SAASqB,IAAI,GAAGzB,WAAWkH,UAC7DR,EAAcJ,EAAa,OAClCS,EAAiBE,KAAK,wBAAiBf,EAAM,qBACtCa,EAAiB3G,iBAAiB,SAASqB,IAAI,GAAGzB,WAAWkH,UAC7DR,EAAcJ,EAAa,OAClCS,EAAiBE,KAAK,4BAAqBf,EAAM,0BAC1Ca,EAAiB3G,iBAAiB,MAAMqB,IAAI,GAAGzB,WAAWkH,WAGrEH,EAAiBE,KAAKf,GACfa,EAAiB/G,WAAWkH,SAG3C,EAUA,YAAAzF,IAAA,SAAI0F,GACA,OAAQA,EAAQrJ,KAAK0E,SAASZ,OAAU,IAAItB,EAASxC,KAAK0E,SAAS2E,IAAU7G,EAASgD,MAC1F,EAQA,YAAAR,UAAA,SAAUqE,EAAeC,GACrB,YADqB,IAAAA,IAAAA,EAA0B,EAAAzE,SAASW,QAChD6D,EAAQrJ,KAAK0E,SAASZ,OAAU,EAAAe,SAAST,aAAapE,KAAK0E,SAAS2E,IAAUC,CAC1F,EAMA,YAAAC,cAAA,SAAcF,G,MACV,OAAQA,EAAQrJ,KAAK0E,SAASZ,SAAqC,QAA3B,EAAM9D,KAAK0E,SAAS2E,UAAO,eAAEG,OAAcxJ,KAAK0E,SAAS2E,GAAQG,MAAa,EAC1H,EAKA,YAAAvE,SAAA,WACI,OAAOjF,KAAK0E,QAChB,EAKA,YAAAI,SAAA,WACI,OAAsB,GAAf9E,KAAK8D,MAChB,EAOA,YAAAb,UAAA,SAAUwG,GACN,IAAIjE,EAASxF,KAAK8E,WAIlB,OAHKU,GAAUiE,GACXA,EAAgBC,KAAK1J,KAAMA,OAEvBwF,CACZ,EAUA,YAAAmE,cAAA,SAAcF,GAGV,YAHU,IAAAA,IAAAA,EAAA,WACd,GACIzJ,KAAKiD,UAAUyG,KAAK1J,KAAMyJ,GACnBzJ,IACX,EAKA,YAAA4J,OAAA,WACI5J,KAAKmD,UAAS,SAAC0G,GACPA,EAAKC,YACLD,EAAKC,WAAWC,YAAYF,EAEpC,GACJ,EAEA,YAAAvH,iBAAA,SAAiBiF,GAEb,OAAqC,GAAjCA,EAASE,QAAQ,YACVzH,KAAK0H,sBAAsBH,GAE3BvH,KAAK2H,kBAAkBJ,EAEtC,EAEA,YAAAyC,QAAA,SAAQzC,GAEJ,OAAqC,GAAjCA,EAASE,QAAQ,YACVzH,KAAKiK,aAAa1C,GAElBvH,KAAKkK,SAAS3C,EAE7B,EAQA,YAAAV,KAAA,SAAKnB,EAAYyE,GACb,IAAIC,EAAuB,GAc3B,OAbID,IACAC,EAAMA,EAAIzD,OACN,EAAAzG,WAAW0F,GAAE,MAAb,EAAA1F,WAAU,QAAQF,gBAAI,EAAJA,KAAM0E,WAAY,KAAG,IAClCtE,QAAO,SAAA+B,GAAQ,OAAAuD,GAAMvD,EAAKuD,EAAX,IACf5C,KAAI,SAAAX,GAAQ,WAAIK,EAASL,EAAb,IACZ9B,QAAQ,IAAI,EAAAyG,kBAOzBsD,EAAMA,EAAIzD,OAAO3G,KAAKsC,iBAAiB,eAAQoD,EAAE,QAC1C,IAAIlD,EAAQ,WAARA,EAAQ,aAAI4H,IAAG,IAC9B,EAGA,YAAAvC,SAAA,SAASnC,EAAYyE,GACjB,IAAIC,EAAuB,GACvBD,IACAC,EAAMA,EAAIzD,OACN,EAAAzG,WAAW0F,GAAE,MAAb,EAAA1F,WAAU,QAAQF,gBAAI,EAAJA,KAAM0E,WAAY,KAAG,IAClCtE,QAAO,SAAA+B,GAAQ,OAAAuD,GAAMvD,EAAKuD,EAAX,IACf5C,KAAI,SAAAX,GAAQ,WAAIK,EAASL,EAAb,IACZ9B,QAAQ,IAAI,EAAAyG,kBAIzB,IAAIuD,EAAWrK,KAAKiG,qBAAqB,eAAQP,EAAE,OAKnD,OAJI2E,EAASvG,QACTsG,EAAIrF,KAAKsF,GAGN,IAAI7H,EAAQ,WAARA,EAAQ,aAAI4H,IAAG,IAC9B,EAQA,YAAAtC,UAAA,SAAUzC,EAAiB8E,EAAwBvC,G,MAC3CwC,EAAiC,GASrC,OARID,IACAC,EAAW,EAAAlK,WAAW0F,GAAE,MAAb,EAAA1F,WAAU,OAAsB,QAAd,EAAAF,gBAAI,EAAJA,KAAM0E,gBAAQ,QAAI,KAAG,IAC7CtE,QAAO,SAAAmD,GAAW,OAAAA,aAAO,EAAPA,EAAS8B,UAAWA,CAApB,IAClB4B,QAAkC,SAACqD,EAAgBnI,GAAkB,OAAAmI,EAAU3D,OAAO,CAACxE,GAAlB,GAA0BiI,GAC/FxG,OAAOwG,GAAK/H,OAGrB,EAAS+H,EAAIrF,KAAK/E,KAAKiG,qBAAqBZ,IAAY+E,EAAIrF,KAAK/E,KAAKsC,iBAAiB+C,IAChF,IAAI7C,EAAQ,WAARA,EAAQ,aAAI4H,IAAG,IAC9B,EAQA,YAAA7D,KAAA,SAAKA,EAAcgE,GACf,YADe,IAAAA,IAAAA,EAAA,MACR,IAAIpG,EAAiBnE,KAAMuG,EAAMgE,EAC5C,EAEA,YAAAhG,MAAA,SAAMiG,EAAqBD,GACvB,YADuB,IAAAA,IAAAA,EAAA,MAChB,IAAI/F,EAAMxE,KAAMwK,EAAaD,EACxC,EAQA,YAAAE,SAAA,SAASC,GACL,IAAIC,GAAQ,EAOZ,OANA3K,KAAKmD,UAAS,SAAA0G,GAEV,GADAc,EAAQd,EAAKe,UAAUC,SAASH,GAE5B,OAAO,CAEf,IACOC,CACX,EAOA,YAAAG,SAAA,SAASJ,GAEL,OADA1K,KAAKmD,UAAS,SAAAhB,GAAQ,OAAAA,EAAKyI,UAAUG,IAAIL,EAAnB,IACf1K,IACX,EAOA,YAAAgL,YAAA,SAAYN,GAER,OADA1K,KAAKmD,UAAS,SAAAhB,GAAQ,OAAAA,EAAKyI,UAAUK,OAAOP,EAAtB,IACf1K,IACX,EAMA,YAAAkL,qBAAA,SAAqBtD,QAAA,IAAAA,IAAAA,GAAA,GACjB,IAAMuD,EAAa,qBACnB,OAAOnL,KAAKoL,gBAAgBD,KACrBvD,EACC5H,KAAKiG,qBAAqBkF,GADnBnL,KAAKsC,iBAAiB6I,IACU/I,QAAQa,WAC3D,EAWA,YAAAkG,KAAA,SAAKkC,GACD,OAAI,EAAAxG,SAAST,aAAaiH,GAAcvG,WAC7B9E,KAAKiD,YAAc,EAAA4B,SAAST,aAAapE,KAAK2I,WAAa,EAAA9D,SAASW,QAE/ExF,KAAK2I,UAAY0C,EAEVrL,KACX,EAKA,YAAAsL,cAAA,SAAcC,GAEV,OADAvL,KAAKmD,UAAS,SAAA4D,GAAQ,OAAAA,EAAKuE,cAAcC,EAAnB,IACfvL,IACX,EAMA,sBAAI,wBAAS,C,IAOb,WACI,IAAIwL,EAAS,GAEb,OADAxL,KAAKmD,UAAS,SAAA4D,GAAQ,OAAAyE,EAAOzG,KAAKgC,EAAK4B,UAAjB,IACf6C,EAAOzC,KAAK,GACvB,E,IAXA,SAAcsC,GACVrL,KAAKmD,UAAS,SAAA4D,GAAQ,OAAAA,EAAK4B,UAAY0C,CAAjB,GAC1B,E,gCAeA,sBAAI,wBAAS,C,IAOb,WACI,OAAOrL,KAAK2I,SAChB,E,IATA,SAAc8C,GACVzL,KAAK2I,UAAY8C,CACrB,E,gCAeA,YAAAC,eAAA,SAAenE,GAAf,WACQoE,EAAU,GAOd,OALA3L,KAAKmD,UAAS,SAAAhB,GACN,EAAKyJ,oBAAoBzJ,EAAMoF,IAC/BoE,EAAQ5G,KAAK5C,EAErB,IACO,IAAIK,EAAQ,WAARA,EAAQ,aAAImJ,IAAO,IAClC,EAQA,YAAAP,gBAAA,SAAgB7D,GAAhB,WAKI,OAJYvH,KAAK6L,WACZ/I,KAAI,SAAAX,GAAQ,SAAKyJ,oBAAoBzJ,EAAK6C,UAAU,GAAG3C,MAAOkF,EAAlD,IACZnH,QAAO,SAAA0L,GAAS,OAAAA,CAAA,IAChB1J,QACMa,WACf,EAUA,YAAAkC,MAAA,W,IAAM,sDAGF,IADA,IAAI4G,EAA0B/L,KAAKkC,WAC1B8B,EAAM,EAAGA,EAAMgI,EAAalI,OAAQE,IAEzC,IADA+H,EAAgBA,EAAcL,eAAeM,EAAahI,KACxCc,WACd,OAAOiH,EAGf,OAAOA,CACX,EAEA,YAAA5I,SAAA,SAAS8I,GAEL,IAAK,IAAIjI,EAAM,EAAGkI,EAAMlM,KAAK0E,SAASZ,OAAQE,EAAMkI,IACV,IAAlCD,EAAKjM,KAAK0E,SAASV,GAAMA,GADwBA,KAKzD,OAAOhE,IACX,EAEA,YAAAmM,UAAA,SAAUF,GAIN,YAJM,IAAAA,IAAAA,EAAA,SAA6C9J,GAAQ,OAAAA,CAAA,GACvDnC,KAAK0E,SAASZ,OAAS,GACvBmI,EAAKjM,KAAK0E,SAAS,GAAI,GAEpB1E,IACX,EAEA,YAAAoM,SAAA,SAASH,GAIL,YAJK,IAAAA,IAAAA,EAAA,SAA6C9J,GAAQ,OAAAA,CAAA,GACtDnC,KAAK0E,SAASZ,OAAS,GACvBmI,EAAKjM,KAAK0E,SAAS1E,KAAK0E,SAASZ,OAAS,GAAI,GAE3C9D,IACX,EAEA,YAAAqM,KAAA,SAAKJ,GAUD,OATA,EAAAtG,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAO3F,KAAK0E,WAAQ,IACrB2H,MAAK,SAAClK,EAAM6B,GAET,GAAY,MAAR7B,EAGJ,OAAO8J,EAAKzJ,EAASqE,KAAK1E,GAAO6B,EACrC,IAEGhE,IACX,EAOA,YAAAsM,QAAA,SAAQC,GAeJ,OAdAvM,KAAKqM,MAAK,SAAAlK,GACN,IAAIqK,EAASrK,EAAK6C,UAAU,GAAG3C,MAC3BoK,EAASD,EAAOE,cAChBC,EAAcH,EAAOI,mBACrBC,EAAkBL,EAAOM,uBACX,MAAfH,EACC,IAAInK,EAASmK,GAAaI,aAAaR,GACjCM,EACN,IAAIrK,EAASqK,GAAiBG,YAAYT,GAE1C,IAAI/J,EAASiK,GAAQQ,OAAOV,GAEhCpK,EAAKyH,QACT,IACO2C,CACX,EAOA,YAAAnK,MAAA,SAAM6J,GACF,YADE,IAAAA,IAAAA,EAAA,SAA+C9J,GAAS,OAAAA,CAAA,GACtDnC,KAAK0E,SAASZ,QAAU,GACxBmI,EAAKjM,KAAK2D,IAAI,GAAI,GACX3D,KAAK2D,IAAI,IAEb3D,IACX,EAOA,YAAAkN,KAAA,SAAKjB,GACD,QADC,IAAAA,IAAAA,EAAA,SAA+C9J,GAAS,OAAAA,CAAA,GACrDnC,KAAK0E,SAASZ,QAAU,EAAG,CAC3B,IAAIqJ,EAAWnN,KAAK2D,IAAI3D,KAAK0E,SAASZ,OAAS,GAE/C,OADAmI,EAAKkB,EAAU,GACRA,C,CAEX,OAAOnN,IACX,EAOA,YAAAI,OAAA,SAAO6L,GACH,IAAImB,EAAyB,GAI7B,OAHApN,KAAKqM,MAAK,SAAClK,GACP8J,EAAK9J,IAAQiL,EAAMrI,KAAK5C,EAC5B,IACO,IAAIK,EAAQ,WAARA,EAAQ,aAAS4K,IAAK,IACrC,EAQA,YAAArF,WAAA,SAAWC,EAAcC,G,UACfoF,EAAiD,QAA1C,EAAqC,QAArC,EAAA7F,SAAS8F,qBAAqB,eAAO,eAAG,UAAE,QACK,QAArD,EAAA9F,SAASkB,gBAAgB4E,qBAAqB,eAAO,eAAG,GACzDC,EAAS/F,SAAS0B,cAAc,UAClCjB,SACI,KAAsBsF,aAAM,EAANA,EAAQtF,OAC9BsF,EAAOtF,MAAQA,EAEfsF,EAAOtJ,aAAa,QAASgE,IAGrCsF,EAAOC,KAAO,kBACdD,EAAO5E,UAAYX,EACnB,IAAIyF,EAAmBJ,EAAKK,YAAYH,GAExC,OADAF,EAAKtD,YAAY0D,GACVzN,IACX,EAQA,YAAAkI,iBAAA,SAAiBF,EAAcC,GAC3B,IAAIoF,EAAO7F,SAAS8F,qBAAqB,QAAQ,IAAM9F,SAASkB,gBAC5D6E,EAAS/F,SAAS0B,cAAc,UAKpC,OAJAlJ,KAAK2N,WAAW1F,EAAOsF,GACvBA,EAAOC,KAAO,kBACdD,EAAO5E,UAAYX,EACnBqF,EAAKK,YAAYH,GACVvN,IACX,EAOA,YAAAoJ,OAAA,WAII,OAHApJ,KAAKmD,UAAS,SAAChB,GACXA,EAAK2H,WAAWC,YAAY5H,EAChC,IACOnC,IACX,EAOA,YAAA4N,SAAA,SAAS7G,GACL,OAAI,EAAAhG,KAAKC,SAAS+F,IACd/G,KAAK4N,SAASpL,EAASF,iBAAiByE,IACjC/G,OAEXA,KAAKmD,UAAS,SAAChB,GACqB4E,EAAkB/B,UAAU,GAAG6I,YAAW,WACtE,MAAO,CACHH,YAAa,WACb,EAER,IAAGrL,MACIqL,YAAYvL,EACvB,IACOnC,KACX,EASA,YAAA8N,eAAA,SAAeC,EAAaC,EAAoB/F,GAG5C,YAHwB,IAAA+F,IAAAA,EAAA,GACxBhO,KAAKiO,iBAAgB,EAAOF,EAAKC,EAAO/F,GAEjCjI,IACX,EAUA,YAAAkO,qBAAA,SAAqBH,EAAaC,EAAoB/F,GAGlD,YAH8B,IAAA+F,IAAAA,EAAA,GAC9BhO,KAAKiO,iBAAgB,EAAMF,EAAKC,EAAO/F,GAEhCjI,IACX,EAEA,YAAAgN,YAAA,W,IAAY,sDAERhN,KAAKqM,MAAK,SAAA8B,GAGN,IAFA,IAAIC,EAAkBD,EAAanJ,UAAU,GAAG3C,MAC5CqC,EAAW0J,EAAgBtE,W,WACtB9F,GACL,IAAIqK,EAA4BD,EAAgBC,YAChDC,EAAetK,GAAKb,UAAS,SAAAoL,GACrBF,GACA3J,EAASqI,aAAawB,EAAYF,GAClCD,EAAkBC,GAElB3J,EAASgJ,YAAYa,EAE7B,G,EATKvK,EAAM,EAAGA,EAAMsK,EAAexK,OAAQE,I,EAAtCA,EAYb,IAEA,IAAIoG,EAAM,GAGV,OAFAA,EAAIrF,KAAK/E,MACToK,EAAMA,EAAIzD,OAAO2H,GACV,IAAI9L,EAAQ,WAARA,EAAQ,aAAI4H,IAAG,IAC9B,EAEA,YAAA2C,aAAA,W,IAAa,sDACT/M,KAAKqM,MAAK,SAAA8B,GAGN,IAFA,IAAIC,EAAkBD,EAAanJ,UAAU,GAAG3C,MAC5CqC,EAAW0J,EAAgBtE,WACtB9F,EAAM,EAAGA,EAAMsK,EAAexK,OAAQE,IAC3CsK,EAAetK,GAAKb,UAAS,SAAAoL,GACzB7J,EAASqI,aAAawB,EAAYH,EACtC,GAER,IACA,IAAIhE,EAAM,GAGV,OAFAA,EAAIrF,KAAK/E,MACToK,EAAMA,EAAIzD,OAAO2H,GACV,IAAI9L,EAAQ,WAARA,EAAQ,aAAI4H,IAAG,IAC9B,EAEA,YAAAxG,OAAA,W,IAAO,sDACH,OAAI5D,KAAKiD,YACEjD,KAEA,IAAIwC,EAAQ,WAARA,EAAQ,aAAIgM,IAAS,IAExC,EAEA,YAAAX,WAAA,SAAW5B,GACP,OAAIjM,KAAKiD,YACEjD,KAEA,IAAIwC,EAASyJ,IAE5B,EAMA,YAAAwC,WAAA,SAAWlH,GAGP,IAFA,IAAIkF,EAASzM,KAAKyM,SACdiC,EAAM,GACJjC,EAAOxJ,aACNwJ,EAAOrB,gBAAgB7D,IACvBmH,EAAI3J,KAAK0H,GAEZA,EAASA,EAAOA,SAEpB,OAAO,IAAIjK,EAAQ,WAARA,EAAQ,aAAIkM,IAAG,IAC9B,EAMA,YAAAC,YAAA,SAAYpH,GAER,IADA,IAAIkF,EAASzM,KAAKyM,SACZA,EAAOxJ,aAAa,CACtB,GAAGwJ,EAAOrB,gBAAgB7D,GACtB,OAAOkF,EAEXA,EAASA,EAAOA,Q,CAEpB,OAAOjK,EAASgD,MACpB,EAMA,YAAAoJ,kBAAA,SAAkBrH,GAGd,IAFA,IAAMiE,EAA0B,GAC5BiB,EAASzM,KAAKyM,SAASrM,QAAO,SAAA+B,GAAQ,OAAAA,EAAKiJ,gBAAgB7D,EAArB,IACpCkF,EAAOxJ,aACTuI,EAAOzG,KAAK0H,GACZA,EAASA,EAAOA,SAASrM,QAAO,SAAA+B,GAAQ,OAAAA,EAAKiJ,gBAAgB7D,EAArB,IAG5C,OAAO,IAAI/E,EAAQ,WAARA,EAAQ,aAAIgJ,IAAM,IACjC,EAEA,YAAAiB,OAAA,WACI,IAAIiC,EAAM,GAQV,OAPA1O,KAAKmD,UAAS,SAAChB,GACX,IAAIsK,EAAStK,EAAK2H,YAAoB3H,EAAM0M,MAAQ1M,EAAKkE,WACrDoG,IAAkC,GAAxBiC,EAAIjH,QAAQgF,IACtBiC,EAAI3J,KAAK0H,EAEjB,IAEO,IAAIjK,EAAQ,WAARA,EAAQ,aAAIkM,IAAG,IAC9B,EAEA,YAAAI,UAAA,SAAUC,GAAV,WAsBI,OArBAA,EAAW5L,UAAS,SAAC6L,G,QACbC,EAAqB9N,EAAW6N,EAAWxN,Y,IAC/C,IAAiB,QAAAyN,GAAK,8BAAE,CAAnB,IAAI9M,EAAI,QACLE,EAAgBF,EAAKE,MACrB,EAAeF,EAAKqB,KAExB,OAAQ,GACJ,IAAK,KACD,EAAKkC,GAAGrD,MAAQA,EAChB,MACJ,IAAK,WACD,EAAK6M,uBAAuB,YAAY1I,SAAWnE,EACnD,MACJ,IAAK,UACD,EAAK6M,uBAAuB,WAAWnJ,QAAU1D,EACjD,MACJ,QACI,EAAKkE,KAAK,GAAMlE,MAAQA,E,mGAGxC,IACOrC,IACX,EAaA,YAAAmP,UAAA,SAAU/G,EAAgBgH,EAA+BC,EAA2BzH,G,MAChF,QADgF,IAAAA,IAAAA,GAAA,IAC5E5H,KAAK8E,WAAT,CAIA,IAAIwK,EAAwC,QAAvB,EAAQ,OAAR9H,eAAQ,IAARA,cAAQ,EAARA,SAAU+H,qBAAa,eAAE7J,GAC1C8J,EAAgB,EAAmBhN,EAASiN,iBAAiBjI,SAAS+H,eAAiB,KACvFG,EAAQlN,EAAS2F,WAAWC,GAC5BgC,EAAM,GACNmC,EAAYvM,KAAKgF,UAAU,GAAG3C,MAC9BsN,EAAcD,EAAM/L,IAAI,GACxBmG,EAAayC,EAAUzC,WACvB8F,EAAWD,EAAY3K,UAAU,GAAG3C,MAIxC,GAHAyH,EAAW+F,aAAaD,EAAUrD,GAClCnC,EAAIrF,KAAK,IAAIvC,EAASoN,IAElB5P,KAAK8E,WACL,OAAO9E,KAGX,IAAI8P,EAAwB,GAExBJ,EAAM5L,OAAS,IACfgM,EAAwBA,EAAsBnJ,OAAM,MAA5BmJ,EAAqB,OAAWJ,EAAM7L,OAAOkM,MAAM,KAAE,IAC7E3F,EAAIrF,KAAKvC,EAASqE,KAAK+I,GAAU5C,YAAY,IAAIxK,EAAQ,WAARA,EAAQ,aAAIsN,IAAqB,QAGlFV,GACApP,KAAKgQ,aAELX,GACArP,KAAKiQ,SAGT,IAAIC,EAAe1N,EAASqE,KAAKyI,GAMjC,OALIA,GAAkBY,EAAajN,aACd,MAAjBuM,QAAyB,IAAsBA,GAC/CU,EAAa/M,UAAS,SAAAhB,GAAQ,OAAAK,EAAS2N,iBAAiBhO,EAAMqN,EAAhC,IAG3BE,C,CACX,EAQA,YAAAM,WAAA,SAAWI,EAAgBC,GAA3B,gBAAW,IAAAD,IAAAA,GAAA,QAAgB,IAAAC,IAAAA,EAAA,GACvB,IAAMC,EAAuB,SAACC,GAC1B,GAAIA,EAAiBzM,OAAQ,CAIzB,IAAI,EAAgB,GACpB,EAAA6B,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAO4K,IAAgB,IAAElE,MAAK,SAAAlK,GAC3BA,EAAK8F,OAGF,EAAcnE,SACd,EAAKiE,WAAW,EAAcgB,KAAK,OACnC,EAAcjF,OAAS,GAGzBsM,EAEE,EAAKlI,iBAAiB/F,EAAKqO,SAAUrO,EAAK8F,OAD1C,EAAKF,WAAW5F,EAAKqO,SAAUrO,EAAK8F,QARxC,EAAclD,KAAK5C,EAAKqO,SAWhC,IACI,EAAc1M,SACZsM,EACE,EAAKlI,iBAAiB,EAAca,KAAK,OADjC,EAAKhB,WAAW,EAAcgB,KAAK,OAE/C,EAAcjF,OAAS,GAG3ByM,EAAmB,E,CAEvB,OAAOA,CACX,EAEIE,EAAe,GACfC,EAAmB,CAAC,GAAI,SAAU,kBAAmB,kBAAmB,cACxEC,EAAa,SAACxO,G,YACNkD,EAAUlD,EAAKkD,QACfuL,GAAsB,QAAV,EAAAzO,aAAI,EAAJA,EAAMqL,YAAI,QAAI,IAAIjI,cAClC,GAAIF,GACApE,EAAIoE,EAAS,YAC0B,GAAvCqL,EAAiBjJ,QAAQmJ,GAAiB,CAC1C,IAAI7C,EAAM5L,EAAK4B,aAAa,OAC5B,QAAI,IAAsBgK,GACnB,MAAQA,GACRA,EAAIjK,OAAS,EAClB,CACE,IAAImE,EAAmB,QAAX,EAAA9F,aAAI,EAAJA,EAAM8F,aAAK,QAAI9F,EAAK4B,aAAa,SAAS1B,MAIlDgO,EAAYtC,KAEZ0C,EAAeH,EAAqBG,GAC/BL,EAKEnI,EAAS,EAAKiG,qBAAqBH,EAAK,EAAI9F,GAE3C,EAAKiG,qBAAqBH,EAAK,GANhC9F,EAAS,EAAK6F,eAAeC,EAAK,EAAI9F,GAErC,EAAK6F,eAAeC,EAAK,G,KAQlC,CAMH,IAHA,IAAIyC,EAAW1P,EAAKqB,EAAK0O,MAAQ1O,EAAK2O,WAAa3O,EAAKwG,WACpDoI,GAAK,EAEFA,GACHA,GAAK,EAC2B,WAA5BP,EAASQ,UAAU,EAAG,KACtBR,EAAWA,EAASQ,UAAU,GAC9BD,GAAK,GAEuB,aAA5BP,EAASQ,UAAU,EAAG,KACtBR,EAAWA,EAASQ,UAAU,GAC9BD,GAAK,GAEwB,eAA7BP,EAASQ,UAAU,EAAG,MACtBR,EAAWA,EAASQ,UAAU,IAC9BD,GAAK,GAGT9I,EAAuD,QAA/C,EAAW,QAAX,EAAA9F,aAAI,EAAJA,EAAM8F,aAAK,QAAI9F,EAAK4B,aAAa,SAAS1B,aAAK,QAAI,GAG/DoO,EAAa1L,KAAK,CACdkD,MAAK,EACLuI,SAAQ,G,EAIxB,EACJ,IACyB,IAAIhO,EAASxC,KAAK0L,eAAe,UAAW1L,KAAKsC,iBAAiB,WAExE2O,OACVC,SAAQ,SAAA/O,GAAQ,SAAAwD,OAAOC,GAAGzD,EAAK0B,OAAf,IAChBsN,MAAK,SAACC,EAAOC,GAAU,OAAAD,EAAME,wBAAwBD,GAAS,CAAvC,IACvBhF,MAAK,SAAAlK,GAAQ,OAAAwO,EAAWxO,EAAX,IAElBmO,EAAqBG,E,CACvB,MAAOc,GACDC,SAAWA,QAAQ1P,OAOnB0P,QAAQ1P,MAAMyP,EAAEE,SAAWF,EAAEG,Y,SAQjCf,EAAa,I,CAEjB,OAAO3Q,IACX,EAEA,YAAAiQ,OAAA,WAoCI,OAPiC,IAAIzN,EAASxC,KAAK0L,eAAe,eAAgB1L,KAAKsC,iBAAiB,gBAEzF2O,OACVC,SAAQ,SAAA/O,GAAQ,SAAAwD,OAAOC,GAAGzD,EAAK0B,OAAf,IAChBsN,MAAK,SAACC,EAAOC,GAAU,OAAAD,EAAME,wBAAwBD,GAAS,CAAvC,IACvBhF,MAAK,SAAAlK,GAAQ,OAhCF,SAACoK,GACT,IAAMoF,EAAanP,EAASqE,KAAK0F,GAC3BlH,EAAUsM,EAAWtM,QAAQzB,OAAO,IAAIvB,MACxCgL,EAAO7K,EAASsF,UAAU,QAEhC,GAAIzC,GAAWpE,EAAIoE,EAAS,SAAWpE,EAAIsL,EAAUxI,aAAa,OAAQ,cAAe,CACrF,IAAM6N,EAAMrF,EAAUxI,aAAa,OAE7B8N,EAAUxE,EAAK/K,iBAAiB,uCAAgCsP,EAAG,OAEtEC,EAAQ/N,OACP+N,EAAQvF,QAAQqF,GAEhBtE,EAAKJ,OAAO0E,E,MAEb,GAAItM,GAAWpE,EAAIoE,EAAS,SAAU,CACzC,IAAI,EAAYsM,EAAWhJ,UAAU2D,QAAQ,QAAS,IAClDwF,EAASzE,EAAK/K,iBAAiB,UACnCwP,EAASA,EAAOb,OAAO7Q,QAAO,SAAAmE,GAC1B,OAAOA,EAAMoE,UAAU2D,QAAQ,QAAS,KAAO,CACnD,IAAGjM,QAAQ,IAAI0R,IACJjO,QACPuJ,EAAKJ,OAAO0E,E,CAGxB,CAOcK,CAAQ7P,EAAR,IAEXnC,IACX,EAKA,YAAAiS,MAAA,WAEI,OADAjS,KAAKkS,UAAU,SACRlS,IACX,EAEA,YAAAmS,iBAAA,SAAiB3E,EAAc4E,EAAgC7Q,GAE3D,OADAvB,KAAKmD,UAAS,SAAC0G,GAAkB,OAAAA,EAAKsI,iBAAiB3E,EAAM4E,EAAU7Q,EAAtC,IAC1BvB,IACX,EAEA,YAAAqS,oBAAA,SAAoB7E,EAAc4E,EAAgC7Q,GAE9D,OADAvB,KAAKmD,UAAS,SAAC0G,GAAkB,OAAAA,EAAKwI,oBAAoB7E,EAAM4E,EAAU7Q,EAAzC,IAC1BvB,IACX,EAKA,YAAAkS,UAAA,SAAUI,EAAmB/Q,GAA7B,gBAA6B,IAAAA,IAAAA,EAAA,IAEzB,IAAIgR,EAAe,EAAA5M,OAAOxF,QAAQ,CAC9BqS,SAAS,EAAMC,YAAY,IAC5B9L,OAAO,EAAAhB,OAAOxF,QAAQoB,IAAUlB,QAAQ,IAAI,EAAAC,qBAE/CN,KAAKmD,UAAS,SAAC0G,GACX,IAAIxB,EACJ,GAAIwB,EAAK6I,cACLrK,EAAMwB,EAAK6I,kBACR,IAAqB,GAAjB7I,EAAK8I,SAIZ,MAAM,IAAIlS,MAAM,qCAAuCoJ,EAAKnE,IAF5D2C,EAAMwB,C,CAKV,GAAIA,EAAKyB,cAAe,CAEpB,IAAIsH,EAAaC,MAMjB,OAAQP,GACJ,IAAK,QACL,IAAK,YACL,IAAK,UACL,IAAK,YACDM,EAAa,EAAKE,SAASC,WAC3B,MACJ,IAAK,QACL,IAAK,UACL,IAAK,WACDH,EAAa,EAAKE,SAASE,cAC3B,MACJ,IAAK,QACL,IAAK,SACL,IAAK,OACL,IAAK,SACD,MACJ,QACI,KAAM,sDAAwDV,EAAY,KAGlF,IAAI,EAAQ,IAAIM,EAAWN,EAAWC,GAGrC,EAAcU,WAAY,EAE3BpJ,EAAKyB,cAAc,E,MAChB,GAAUzB,EAAMqI,UAAW,CAE9B,IAAI,EAAQ7J,EAAI6K,oBAChB,EAAMD,WAAY,EAClB,EAAAtN,OAAOxF,QAAQoS,GAAclG,MAAK,SAAC,G,IAAA,SAAC8G,EAAG,KAAE9Q,EAAK,KAC1C,EAAM8Q,GAAO9Q,CACjB,IACMwH,EAAMqI,UAAU,KAAOI,EAAW,E,CAEhD,GACJ,EAEA,YAAAc,YAAA,SAAYC,GACR,YADQ,IAAAA,IAAAA,EAAA,IACDrT,KAAKiR,OACPnO,KAAI,SAACT,GAMF,OALWA,EAAM2C,UAAU,GAAG6I,YAAW,WACrC,MAAY,CACRuF,YAAa,GAErB,IAAG/Q,MACgB+Q,aAAe,EACtC,IACCnM,QAAO,SAACqM,EAAOC,GAAU,OAACD,EAAMD,EAAWE,GAAOxK,KAAK,GAA9B,GAAmC,IAAI1G,KACzE,EAEA,YAAAyO,UAAA,SAAUuC,GACN,YADM,IAAAA,IAAAA,EAAA,IACCrT,KAAKiR,OACPnO,KAAI,SAACT,GAMF,OALWA,EAAM2C,UAAU,GAAG6I,YAAW,WACrC,MAAY,CACRiD,UAAW,GAEnB,IAAGzO,MACgByO,WAAa,EACpC,IACC7J,QAAO,SAACqM,EAAOC,GAAU,OAACD,EAAOC,GAAOxK,KAAKsK,EAApB,GAAiC,IAAIhR,KAEvE,EAWA,YAAAmR,kBAAA,SAAkBC,GAId,QAJc,IAAAA,IAAAA,EAAA,IAAc,EAAAC,OAAO,CAAC,KAIhC1T,KAAKwD,KAAKsB,WAAd,CAKA,IAAI9B,EAASyQ,EAAQE,YA+ErB,OA7EA3T,KAAKqM,MAAK,SAAC9I,G,QACP,IAAIA,EAAQC,KAAKsB,WAAjB,CAGA,IAAItB,EAAOD,EAAQC,KAAKnB,MACpBgD,EAAU9B,EAAQ8B,QAAQzB,OAAO,YAAYvB,MAAMkD,cACnDqO,EAAWrQ,EAAQiK,KAAK5J,OAAO,YAAYvB,MAAMkD,cASrD,GAPAqO,EAAWA,EAASrO,eAOH,SAAXF,GAAiC,YAAXA,GAAoC,UAAXA,IACxC,MAAR7B,GAAwB,IAARA,IAAiBD,EAAQiD,SAAU,CAUpD,GAAe,UAAXnB,EAAqB,CAErB,IAAIwO,EAAmDtQ,EAAQyB,UAAU,GAAG3C,MAC5E,GAAIwR,EAAWC,eAAiB,EAE5B,IADA,IAAIC,EAAOF,EAAWtS,QAAQuC,OACrBkQ,EAAI,EAAGA,EAAID,EAAMC,IAGtB,GAAIH,EAAWtS,QAAQyS,GAAGC,SAAU,CAChC,IAAIC,EAAgBL,EAAWtS,QAAQyS,GACvChR,EAAOiK,OAAOzJ,GAAMnB,MAAgD,MAAvC6R,EAAcnQ,aAAa,SACpDmQ,EAAc7R,MAAQ6R,EAAcrD,I,EAUxD,GAEQxL,GAAWxE,EAA6BsT,QACxCP,GAAY/S,EAA6BuT,QACzCR,GAAY/S,EAA6BwT,OACzCT,GAAY/S,EAA6ByT,QACzCV,GAAY/S,EAA6B0T,QAGrCX,GAAY/S,EAA6B2T,UAAYZ,GAAY/S,EAA6B4T,OAClGlR,EAAQwC,SAEd,CACE,IAAI2O,EAA2C,QAA1B,EAAmB,QAApB,EAAMnR,EAAQlB,aAAM,eAAEA,aAAK,eAAEmH,MAC7CmL,EAAgBD,QAAAA,EAAiB,GACrC,GAAIC,aAAQ,EAARA,EAAU7Q,OAEVd,EAAO4R,OAAOpR,GAAMnB,MAAQwS,MAAMC,KAAKH,OACpC,CACH,GAAKD,EACD,OAGJ1R,EAAOiK,OAAOzJ,GAAMnB,MAAQkB,EAAQkC,WAAWpD,K,IAK/D,IAEOW,C,CACX,EAEA,sBAAI,4BAAa,C,IAAjB,WAaI,OAVehD,KAAK6L,WAAWqF,SAAQ,SAAA/O,GACnC,OAAOA,EAAKD,WAAW+O,MAC3B,IAAG7Q,QAAO,SAAA+B,G,QACN,OALmB,IAKM,QAAlB,EAAW,QAAX,EAAAA,aAAI,EAAJA,EAAME,aAAK,eAAEA,aAAK,eAAEsQ,SAC/B,IAAG1L,QAAO,SAAC8N,EAAqB5S,G,UAE5B,OADA4S,EAAQhQ,KAAoC,QAA9B,EAAwB,QAAzB,EAAiB,QAAX,EAAA5C,aAAI,EAAJA,EAAME,aAAK,eAAEA,aAAM,eAAErD,YAAI,QAAI,IACzC+V,CACX,GAAG,IAAI1S,MAGI0G,KAAK,GACpB,E,gCAEA,YAAAiM,SAAA,SAASF,EAAcG,GAInB,OAHI,EAAApQ,SAAST,aAAa6Q,GAAInQ,aAC1BmQ,EAAKjV,KAAK8D,QAEP,IAAItB,EAAQ,WAARA,EAAQ,aAAIxC,KAAK0E,SAASqL,MAAM+E,EAAMI,KAAKC,IAAIF,EAAIjV,KAAK8D,WAAQ,IAC/E,EAMA,YAAAsR,OAAA,SAAOC,GAEH,OADArV,KAAK4E,QAAUyQ,EACHrV,IAChB,EAGA,YAAAsV,QAAA,WACI,IAAIC,GAAmC,GAAjBvV,KAAK4E,SAAiB5E,KAAK2E,KAAO3E,KAAK4E,QAAU,EACnE4Q,EAAexV,KAAK2E,KAAO3E,KAAK6D,OAAOC,OAAS,EACpD,QAASyR,GACLC,EACR,EAEA,YAAAC,KAAA,WACI,OAAKzV,KAAKsV,WAGVtV,KAAK2E,MACE,IAAInC,EAASxC,KAAK6D,OAAO7D,KAAK2E,OAH1B,IAIf,EAGA,YAAA+Q,UAAA,SAAU1R,GACN,YADM,IAAAA,IAAAA,EAAA,GACDhE,KAAK6D,OAAOC,OAAS,EAAM9D,KAAK2E,IAAMX,EAChC,EAAA2R,iBAAiBC,QAErB,IAAIpT,EAASxC,KAAK6D,OAAO7D,KAAK2E,IAAMX,GAC/C,EAGA,YAAA6R,QAAA,WACI,OAAiB,GAAb7V,KAAK2E,IACE,EAAAgR,iBAAiBG,SAErB,IAAItT,EAASxC,KAAK6D,OAAO7D,KAAK2E,KACzC,EAGA,YAAAoR,MAAA,WACI/V,KAAK2E,KAAO,CAChB,EAEA,YAAAqR,aAAA,SAAaC,QAAA,IAAAA,IAAAA,EAAA,CAAqCC,KAAM,SACpD,IAAI9P,EAA0B,GAU9B,OATApG,KAAKmD,UAAS,SAAChB,GACX,IAAIgU,EACJ,KAAUhU,aAAI,EAAJA,EAAO6T,cAIb,MAAM,IAAIvV,MAAM,mGAHhB0V,EAAgB3T,EAASqE,KAAW1E,EAAM6T,aAAaC,IACvD7P,EAAYrB,KAAKoR,EAIzB,IACO,IAAI3T,EAAQ,WAARA,EAAQ,aAAI4D,IAAW,IACtC,EAQM,YAAAhF,aAAN,SAAmBE,EAA2CC,G,YAAA,IAAAA,IAAAA,EAAA,CAC1DC,YAAY,EACZC,WAAW,EACXC,SAAS,EACTnC,QAAS,IACToC,SAAU,M,4DAEV,MAAO,CAAP,EAAOP,EAAapB,KAAMsB,EAAWC,G,QAMzC,sBAAI,6BAAc,C,IAAlB,WACI,IAII6U,GAJiBpW,KAAKsC,iBAAiB,KACtClC,QAAO,SAAA+B,GAAQ,OAAAA,EAAKkU,SAAL,IAG4BpR,YAAc,IAAInC,KAAI,SAAAS,GAAW,OAAAA,EAAQ8C,UAAR,IACjF,OAAO,IAAI7D,EAAQ,WAARA,EAAQ,aAAI4T,IAAM,IACjC,E,gCAEA,sBAAI,yBAAU,C,IAAd,WAEI,IADA,IAAIhQ,EAAc,GACTpC,EAAM,EAAGA,EAAMhE,KAAK0E,SAASZ,OAAQE,IACtChE,KAAK0E,SAASV,GAAKqC,YACnBD,EAAYrB,KAAK/E,KAAK0E,SAASV,GAAKqC,YAG5C,OAAO,IAAI7D,EAAQ,WAARA,EAAQ,aAAI4D,IAAW,IACtC,E,gCAEA,sBAAI,wBAAS,C,IAAb,WACI,IAAK,IAAIpC,EAAM,EAAGA,EAAMhE,KAAK0E,SAASZ,OAAQE,IAC1C,GAAIhE,KAAK0E,SAASV,GAAKqC,WACnB,OAAO,EAGf,OAAO,CACX,E,gCAIO,EAAAoJ,iBAAP,SAAwB6G,GACpB,IAAIC,EAAW,EAEf,IACI,GAAmB,OAAT/O,eAAQ,IAARA,cAAQ,EAARA,SAAWgP,UAAW,CAC5BF,EAAKG,QACL,IAAID,EAAkBhP,SAAUgP,UAAUE,cAE1CF,EAAUG,UAAU,aAAcL,EAAKjU,MAAMyB,QAE7CyS,EAAWC,EAAU3F,KAAK/M,M,EAEhC,MAAOyN,G,CAIT,OAAOgF,CACX,EAYO,EAAApG,iBAAP,SAAwBmG,EAAW3R,IAC/B2R,aAAI,EAAJA,EAAMG,SAAQH,SAAAA,EAAMG,UAGpBH,aAAI,EAAJA,EAAMM,sBAAqBN,SAAAA,EAAMM,mBAAmBjS,EAAKA,GAC7D,EAMA,YAACkS,OAAOC,UAAR,sBACI,MAAO,CACHrB,KAAM,WAGF,MAAO,CACHsB,MAHQ,EAAKzB,UAIbjT,MAHM,EAAKoT,OAKnB,EAER,EAOA,YAAA9O,OAAA,SAAOqQ,EAAoBC,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAMvI,EAAM1O,KAAK6L,WAAWlF,OAAOqQ,EAASnL,YAAYxL,QAAQ,IAAI0R,GAEpE,IAAKkF,EACD,OAAOvI,EAEX,IAAIwI,EAAM,CAAC,EACX,OAAOxI,EAAI7C,WAAWzL,QAAO,SAAAyJ,GACzB,IAAMsN,IAAaD,aAAG,EAAHA,EAAMrN,EAAKxH,MAAMA,MAAM8M,YAE1C,OADA+H,EAAIrN,EAAKxH,MAAMA,MAAM8M,YAAoB,EAClCgI,CACX,IAAG9W,QAAQ,IAAI0R,EACnB,EAEA,YAAA9E,OAAA,SAAOlG,GAEH,OADA/G,KAAKqM,MAAK,SAAAlK,GAAQ,OAAA4E,EAAK6G,SAASzL,EAAd,IACXnC,IACX,EAEA,YAAAoX,UAAA,SAAUrQ,GAAV,WAII,OAHAA,EAAK5D,UAAS,SAAAhB,GACVA,EAAKkV,QAAO,MAAZlV,EAAI,OAAY,EAAK8C,aAAU,GACnC,IACOjF,IACX,EAEA,YAAAqX,QAAA,SAAQtQ,GAIJ,OAHA/G,KAAKmD,UAAS,SAAAhB,GACVA,EAAKkV,QAAO,MAAZlV,EAAI,OAAY4E,EAAK9B,aAAU,GACnC,IACOjF,IACX,EAQQ,YAAA2H,kBAAR,SAA0BJ,G,QACtB,KAAmB,QAAd,EAAAvH,gBAAI,EAAJA,KAAM0E,gBAAQ,eAAEZ,QACjB,OAAO9D,KAGX,IADA,IAAI0P,EAAQ,GACH1L,EAAM,EAAGA,EAAMhE,KAAK0E,SAASZ,OAAQE,IAC1C,GAAuB,QAAlB,EAAAhE,KAAK0E,SAASV,UAAI,eAAE1B,iBAAzB,CAGA,IAAI8H,EAAMpK,KAAK0E,SAASV,GAAK1B,iBAAiBiF,GAC9CmI,EAAQA,EAAM/I,OAAOxF,EAAWiJ,G,CAGpC,OAAO,IAAI5H,EAAQ,WAARA,EAAQ,aAAIkN,IAAK,IAChC,EAGQ,YAAAhI,sBAAR,SAA8BH,G,MAC1B,KAAmB,QAAd,EAAAvH,gBAAI,EAAJA,KAAM0E,gBAAQ,eAAEZ,QACjB,OAAO9D,KAMX,IAHA,IAAIsX,EAAU,IAAiB9U,EAAQ,WAARA,EAAQ,aAAIxC,KAAK0E,WAAQ,KACpD6S,EAAYhQ,EAASiQ,MAAM,cAEtBC,EAAO,EAAGA,EAAOF,EAAUzT,OAAQ2T,IACxC,GAAuB,IAAnBF,EAAUE,GAAd,CAGA,IAAIC,EAAgBH,EAAUE,GAC9BH,EAAaA,EAAWhV,iBAAiBoV,GACrCD,EAAOF,EAAUzT,OAAS,IAC1BwT,EAAaA,EAAWjR,W,CAIhC,OAAOiR,CACX,EASQ,YAAApN,SAAR,SAAiB3C,G,QACb,KAAmB,QAAd,EAAAvH,gBAAI,EAAJA,KAAM0E,gBAAQ,eAAEZ,QACjB,OAAO9D,KAGX,IADA,IAAI0P,EAAQ,GACH1L,EAAM,EAAGA,EAAMhE,KAAK0E,SAASZ,OAAQE,IAC1C,GAAuB,QAAlB,EAAAhE,KAAK0E,SAASV,UAAI,eAAEgG,QAAzB,CAGA,IAAII,EAAM,CAACpK,KAAK0E,SAASV,GAAKgG,QAAQzC,IACtCmI,EAAQA,EAAM/I,OAAM,MAAZ+I,EAAK,OAAWtF,IAAG,G,CAG/B,OAAO,IAAI5H,EAAQ,WAARA,EAAQ,aAAIkN,IAAK,IAChC,EAGQ,YAAAzF,aAAR,SAAqB1C,G,MACjB,KAAmB,QAAd,EAAAvH,gBAAI,EAAJA,KAAM0E,gBAAQ,eAAEZ,QACjB,OAAO9D,KAMX,IAHA,IAAIsX,EAAU,IAAiB9U,EAAQ,WAARA,EAAQ,aAAIxC,KAAK0E,WAAQ,KACpD6S,EAAYhQ,EAASiQ,MAAM,cAEtBC,EAAO,EAAGA,EAAOF,EAAUzT,OAAQ2T,IACxC,GAAuB,IAAnBF,EAAUE,GAAd,CAGA,IAAIC,EAAgBH,EAAUE,GAC9BH,EAAaA,EAAWtN,QAAQ0N,GAC5BD,EAAOF,EAAUzT,OAAS,IAC1BwT,EAAaA,EAAWjR,W,CAIhC,OAAOiR,CACX,EAWQ,YAAA1L,oBAAR,SAA4B+L,EAAkBpQ,GAC1C,IAAIqQ,EAAoDD,EACpDvM,EAA4BwM,EAAe/F,SAC3C+F,EAAexM,iBACfwM,EAAeC,oBACfD,EAAeE,mBACfF,EAAeG,kBACfH,EAAeI,uBACf,SAAUC,GAGN,IAFA,IAAIpG,GAAoCrK,UAAYkL,eAAepQ,iBAAiB2V,GAChFC,EAAIrG,EAAQ/N,SACPoU,GAAK,GAAKrG,EAAQ1P,KAAK+V,KAAOP,IAEvC,OAAOO,GAAK,CAChB,EACJ,OAAO9M,EAAgB1B,KAAKiO,EAASpQ,EACzC,EAaQ,YAAA0G,gBAAR,SAAwBmC,EAAiBrC,EAAaC,EAAmB/F,QAAnB,IAAA+F,IAAAA,EAAA,GAClD,IAAImK,EAAUnY,KAAKoY,iBAAiBrK,EAAK9F,GACrCoQ,EAAarY,KAAKoY,iBAAiB,KAAMnQ,GACzCqQ,EAAS,gBAASxY,KAAKyY,MAAK,YAAIrD,KAAKsD,UACzCH,EAAW1P,UAAY,yBAAkB2P,EAAM,aAE/C,IAAIjL,EAAO7F,SAAS6F,KAUpB,GAFAA,EAAKK,YAAY2K,GACjBhL,EAAKtD,YAAYsO,GACbhL,EAAKiL,GAAT,CAGA,IACStK,EAMDtL,YAAW,WACP2K,EAAKK,YAAYyK,GACb/H,GACA/C,EAAKtD,YAAYoO,EAEzB,GAAGnK,IAVHX,EAAKK,YAAYyK,GACb/H,GACA/C,EAAKtD,YAAYoO,G,gBAWlB9K,EAAKiL,E,CAGhB,OAAOtY,I,CACX,EAMQ,YAAAkP,uBAAR,SAA+BuJ,QAAA,IAAAA,IAAAA,EAAA,SAC3B,IAAI/J,EAAM,GAEV,OADAA,EAAI+J,GAAY,KACRA,KAAYzY,KAAKgF,UAAU,GAAG3C,MAClCrC,KAAKgF,UAAU,GAAG3C,MAClBqM,CACR,EAEQ,YAAA0J,iBAAR,SAAyBrK,EAAoB9F,GACzC,IAAIkQ,EAA6B3Q,SAAS0B,cAAc,UAaxD,OAZAiP,EAAQ3K,KAAO,kBACTvF,SACE,KAAsBkQ,aAAO,EAAPA,EAASlQ,OAC/BkQ,EAAQlQ,MAAQA,EAEhBkQ,EAAQlU,aAAa,QAASgE,IAGjC8F,IACDoK,EAAQpK,IAAMA,GAGXoK,CACX,EAEQ,YAAAxK,WAAR,SAAmB1F,EAAesF,GAC1BtF,SACI,KAAsBsF,aAAM,EAANA,EAAQtF,OAC9BsF,EAAOtF,MAAQA,EAEfsF,EAAOtJ,aAAa,QAASgE,GAGzC,EAv3DO,EAAAzC,OAAS,IAAIhD,EAKb,EAAAsQ,OAAS,EAAA5N,SAo3DpB,C,CA33DA,GAAa,EAAA1C,SAAAA,EAw4Db,8BAEI,KAAAxD,KAAmB,EASvB,QAPI,YAAAqB,QAAA,SAAQkD,GACJvD,KAAKhB,KAAK+F,KAAKxB,EACnB,EAEA,sBAAI,yBAAU,C,IAAd,WACI,OAAO,IAAIf,EAAQ,WAARA,EAAQ,aAAIxC,KAAKhB,OAAI,IACpC,E,gCACJ,EAXA,GAAa,EAAA+S,kBAAAA,EAgBA,EAAA2G,GAAKlW,EAML,EAAAmW,IAAMnW,EAASF,gB,yFC1qF5B,sB,MACQ4C,EAAkB,oBAAsB0T,YAAcA,WAAWC,OAAUD,WAAWC,OACrF,oBAAsBA,OAAUA,OAC5B,oBAAsBD,WAAcA,gBAChC,IAAsB,EAAAE,IAAgB,OAAN,EAAAA,QAAM,IAAN,EAAAA,OAAM,EAAN,EAAAA,EAAQD,QAAU,EAAAC,EAAOD,YACrD,IAAsB,EAAAC,EAAU,EAAAA,EAAS,KAG1D,OAAuB,QAAhB,EAAA5T,aAAQ,EAARA,EAAU2T,cAAM,QAAI3T,CAC/B,C,qFCdA,cAKA,SAAcnE,GA2DV,SAAgBD,EAAK+H,GAIjB,IAFA,IAAIkQ,EAAK,KAAMb,GADfrP,EAAMA,EAAIyD,QAAQ,SAAU,KACLxI,OAEhBiV,EAAGC,KAAKnQ,EAAIoQ,SAASf,MAG5B,OAAOrP,EAAIkH,MAAM,EAAGmI,EAAI,EAC5B,CAqDA,SAAgBlX,EAASkY,GAGrB,QAASC,UAAUrV,QAAgB,MAANoV,IAA4B,iBAANA,GAAkBA,aAAcE,OACvF,CAvGgB,EAAAC,YAAhB,SAA+BC,EAA2B/O,QAAA,IAAAA,IAAAA,EAAA,MACtD,IACI,IAAIgP,EAASD,IACb,OAAO,EAAAzU,SAAST,aAAamV,QAAAA,EAAUhP,E,CACzC,MAAOgH,GACL,OAAO,EAAA1M,SAASW,M,CAExB,EAEgB,EAAAgU,gBAAhB,SAAmCF,EAA2B/O,QAAA,IAAAA,IAAAA,EAAA,MAC1D,IACI,IAAIgP,EAASD,IACb,OAAO,EAAAzU,SAAST,aAAamV,QAAAA,EAAUhP,I,CACzC,MAAOgH,GACL,OAAO,EAAA1M,SAASW,M,CAExB,EAQgB,EAAAiU,WAAhB,SAA2BP,EAAYQ,QAAA,IAAAA,IAAAA,EAAA,QAEnC,IAAIhL,EAAM,GAIV,OAHAwK,EAAG1B,MAAMkC,GAAUC,SAAQ,SAACpW,GACxBmL,EAAI3J,KAAKjE,EAAKyC,GACjB,IACMmL,CACX,EAOgB,EAAA5N,KAAI,EAkBJ,EAAAK,WAAhB,SAA8ByY,EAAUC,EAAoBC,GACxD,YADoC,IAAAD,IAAAA,EAAA,QAAoB,IAAAC,IAAAA,EAAA,IACxB,kBAA3BF,QAAAA,EAAO,iBACDE,QAAAA,EAAQ,KAITF,aAAgB/E,QAAUgF,IAAWC,EAAaF,EAErDE,EAAKnT,OAAOkO,MAAMkF,UAAUhK,MAAMrG,KAAKkQ,EAAKC,GACvD,EAQgB,EAAA3Y,iBAAhB,SAAiC8Y,EAAiBC,GAC9C,IACIC,EAAYD,QAAAA,EAAe,gBAG/B,OAJkBD,QAAAA,EAAU,iBAITzU,gBAAkB2U,EAAU3U,aACnD,EASgB,EAAA4U,WAAhB,SAA2BC,EAAYC,GACnC,OAAOrZ,EAASqZ,UAAkBD,GAASC,EAAUD,aAAiBC,CAC1E,EASgB,EAAArZ,SAAQ,EAMR,EAAAsZ,OAAhB,SAAuBpB,GACnB,OAAOA,aAAcqB,UAA0B,mBAAPrB,CAC5C,EAIgB,EAAAsB,UAAhB,SAA0BxX,G,IAAa,wDACnC,GAAc,MAAVA,EACA,MAAM,IAAIyX,UAAU,8CAGxB,IAAIxF,EAAKyF,OAAO1X,GAChB,OAAS0X,OAAQ9F,QACb+F,EAAQhB,SAAQ,SAAAxX,GAAQ,OAAMuY,OAAQ9F,OAAOK,EAAI9S,EAAzB,IACjB8S,IAGX0F,EAAQva,QAAO,SAAA+B,GAAQ,OAAQ,MAARA,CAAA,IAAcwX,SAAQ,SAAAxX,GACzC,IAAIyY,EAAazY,EACjBuY,OAAOG,KAAKD,GACPxa,QAAO,SAAA0a,GAAW,OAAAJ,OAAOX,UAAUgB,eAAerR,KAAKkR,EAAYE,EAAjD,IAClBnB,SAAQ,SAAAmB,GAAW,OAAA7F,EAAG6F,GAAWF,EAAWE,EAAzB,GAC5B,IACO7F,EACX,CAGH,CAzJD,CAAc,EAAAlU,OAAA,EAAAA,KAAI,I,6pCCDlB,aACA,SACA,SAuCA,0BAQA,QAPI,YAAAhC,OAAA,SAAOC,GACH,OAAOA,CACX,EAEA,YAAAI,OAAA,SAAOJ,GACH,OAAOA,CACX,EACJ,EARA,GAAa,EAAAgc,SAAAA,EAab,IAAIC,EAAe,IAAID,EAEvB,EAOI,SAAmBvJ,EAAmByJ,QAAnB,IAAAzJ,IAAAA,EAAA,SAAmB,IAAAyJ,IAAAA,EAAA,KAAnB,KAAAzJ,QAAAA,EAFnB,KAAA7Q,SAAmB,EAGfZ,KAAKkb,aAAeA,EACpBlb,KAAKmb,cAAe,IAAIrb,MAAOsb,kBAC/Bpb,KAAKqb,YAAa,IAAIvb,MAAOsb,kBAAoB,IAAMlG,KAAKsD,SAAW,IAAMtD,KAAKsD,QACtF,EAXS,EAAA8C,QAAAA,EAiBb,MAQI,SAAYC,EAAiB9J,GACzBzR,KAAKwb,OAAS/J,EACdzR,KAAKwS,SAAU,EACfxS,KAAKyS,YAAa,EAClBzS,KAAKyb,UAAW,EAChBzb,KAAKub,QAAUA,CACnB,EAIJ,0BAOc,KAAAG,iBAAwB,CAAC,EACzB,KAAAC,SAAgB,CAAC,EACjB,KAAAC,kBAAyB,CAAC,EAE1B,KAAAC,WAAa,EAIJ,KAAAC,cAAgB,IAChB,KAAAC,UAAY,UAI/B,KAAAC,OAASf,CA2Mb,QA5LI,YAAAgB,iBAAA,SAAiBV,EAAiBnJ,GAAlC,WAqBI,OApBApS,KAAKkc,kBAAkBX,GAIvBvb,KAAK0b,iBAAiBH,GAASxW,MAAK,SAACoX,G,MAC7BA,EAAId,cAAc,EAAKO,sBAGvBO,aAAG,EAAHA,EAAKvb,WAA0B,QAAf,EAAAub,aAAG,EAAHA,EAAc,cAAC,eAAEvb,aAC7Bub,aAAG,EAAHA,EAAc,SACdA,EAAY,OAAE1K,QAAU,EAAKuK,OAAOjd,OAAOod,EAAY,OAAE1K,SACzD0K,EAAY,OAAEvb,SAAU,IAExBub,EAAI1K,QAAU,EAAKuK,OAAOjd,OAAOod,EAAI1K,SACrC0K,EAAIvb,SAAU,IAItBwR,EAAS+J,GACb,IACOnc,IACX,EAQA,YAAAoc,UAAA,SAAUb,GAAV,WACIvb,KAAKqc,iBAAiBd,GACtB,IAAIe,EAAUtc,KAAK2b,SAASJ,GACxBgB,EAAUD,EAAQ7G,KAatB,OAXA6G,EAAQ7G,KAAO,SAAC0G,IAKSA,aAAG,EAAHA,EAAMX,QACvBe,EAAQ7S,KAAK4S,EAA0BH,aAAG,EAAHA,EAAMX,QAE7C,EAAKgB,UAAUjB,EAAkBY,EAEzC,EACOG,CACX,EAOA,YAAAG,aAAA,SAAalB,GACT,OAAOvb,KAAKoc,UAAUb,GAASkB,cACnC,EAOQ,YAAAP,kBAAR,SAA0Bb,GACjBrb,KAAK0b,iBAAiBL,KACvBrb,KAAK0b,iBAAiBL,GAAc,IAEnCrb,KAAK0b,iBAAiB,OACvB1b,KAAK0b,iBAAiB,KAAO,GAErC,EAEQ,YAAAW,iBAAR,SAAyBhB,GAChBrb,KAAK2b,SAASN,KACfrb,KAAK2b,SAASN,GAAc,IAAI,EAAAqB,SAE/B1c,KAAK2b,SAAS,OACf3b,KAAK2b,SAAS,KAAO,IAAI,EAAAe,QAEjC,EAQA,YAAAC,mBAAA,SAAmBpB,EAAiBnJ,GAEhC,OADApS,KAAK0b,iBAAiBH,IAAYvb,KAAK0b,iBAAiBH,IAAY,IAAInb,QAAO,SAAC+B,GAAc,OAAAA,IAASiQ,CAAT,IACvFpS,IACX,EAaA,YAAA4c,OAAA,SAAOrB,EAAiBsB,EAA2BD,GAK/C,GAJI,iBAAmBC,IACnBA,EAAU,IAAIvB,EAAQuB,KAGtBC,EAAWC,SAASF,GAKxB,OAFAD,EAAOvB,WAAayB,EAAWE,YAAYH,GAC3C7c,KAAKwc,UAAUjB,EAASqB,GACjB5c,IACX,EAEe,EAAAgd,YAAf,SAA2BH,GACvB,MAAO,MAAQA,EAAQxB,UAC3B,EAEe,EAAA0B,SAAf,SAAwBF,GACpB,OAA4C,GAArCA,EAAQxB,WAAW5T,QAAQ,MACtC,EAUA,YAAAoV,QAAA,SAAQtB,EAAiB9J,GAAzB,WACQ,iBAAmBA,IACnBA,EAAU,IAAI6J,EAAQ7J,IAE1B,IAAIwL,EAAYxL,EAAQ4J,WAEpB3M,EAAM,IAAI9M,SAAiB,SAACsb,EAASC,GACrC,IAAI5d,EAAU,KACV6S,EAAW,SAACgL,GACRA,EAAS/B,YAAc4B,GAMvBG,EAAS/B,YAAc,MAAQ4B,IAC/B/Z,aAAa3D,GACb,EAAKod,mBAAmBpB,EAASnJ,GACjC8K,EAAQE,GAEhB,EACA7d,EAAUmD,YAAW,WACjB,EAAKia,mBAAmBpB,EAASnJ,GACjC+K,EAAO,sDACX,GAAG,KACH,EAAKlB,iBAAiBV,EAASnJ,EAEnC,IAEA,OADApS,KAAKwc,UAAUjB,EAAS9J,GACjB/C,CACX,EAOU,YAAA2O,oBAAV,sBACI,KAAOrd,KAAK6b,WAAc,IAAM,EAAhC,CAGA,IAAIyB,EAA4B,CAAC,EACjC5C,OAAOG,KAAK7a,KAAK4b,mBAAmBjC,SAAQ,SAAAxG,GACpC,EAAKoK,mBAAmBpK,KAC5BmK,EAAqBnK,GAAO,EAAKyI,kBAAkBzI,GACvD,IACAnT,KAAK4b,kBAAoB0B,C,CAC7B,EAEQ,YAAAC,mBAAR,SAA2BpK,GACvB,OAAOnT,KAAK4b,kBAAkBzI,IAAQ,IAAKrT,MAAQsb,kBAAoBpb,KAAK8b,aAChF,EAEU,YAAA0B,uBAAV,SAAiC/L,GAC7BzR,KAAK4b,kBAAkBnK,EAAQ4J,YAAc5J,EAAQ0J,YACzD,EA5NgB,EAAAsC,WAAa,cA6NjC,C,CA/NA,GAiOIC,EAAkC,SAACla,G,MACnC,GAAc,QAAV,OAAA0B,mBAAU,eAAEyY,iBACZ,OAAO,KAAK,IAAAzY,YAAYyY,kBAAiBna,GAE7C,MAAM/C,MAAM,iGAEhB,EAEMmd,EAAwB,QAM9B,cAUI,WAAoBC,EAAmEC,EAA6C9B,QAAhH,IAAA6B,IAAAA,EAAA,QAAmE,IAAAC,IAAAA,EAAA,QAA6C,IAAA9B,IAAAA,EAAA,GAApI,MACI,cAAO,K,OADS,EAAA6B,cAAAA,EAAmE,EAAAC,aAAAA,EAA6C,EAAA9B,OAAAA,EAT5H,EAAA+B,aAAyD,CAAC,EAW9D,EAAKC,YAAc,SAACC,G,QACZA,EAAYzC,OAAO5a,UACnBqd,EAAYzC,OAAO/J,QAAe,EAAKuK,OAAOjd,OAAOkf,EAAYzC,OAAO/J,SACxEwM,EAAYzC,OAAO5a,SAAU,GAEjC,IAAIsd,EAAcD,EAAYzC,OAC1BD,EAAkB0C,EAAY1C,QAQlC,OANyB,QAArB,IAAKG,wBAAgB,eAAGH,MACH,QAArB,IAAKG,wBAAgB,SAAGH,GAAS5B,SAAQ,SAAAvH,GACrCA,EAAS8L,EACb,KAEJ,EAAKV,uBAAuBU,IACrB,CACX,EACA,EAAKlC,OAASA,EACd,EAAKmC,W,CACT,CA+CJ,OA7E4C,OAgCxC,YAAA3B,UAAA,SAAUjB,EAAiB9J,EAA2B2M,QAAA,IAAAA,IAAAA,GAAA,GAClD,IACQ,iBAAmB3M,IACnBA,EAAU,IAAI6J,EAAQ7J,IAI1B,IAAI4M,EAAYnf,KAAKG,UAAmBoS,GACxCA,EAAmBvS,KAAKC,MAAMkf,GAE9B,IAAIC,EAAiB,IAAIC,EAAehD,EAAS9J,GACjD6M,EAAe9C,OAAO/J,QAAUzR,KAAKgc,OAAO5c,OAAOkf,EAAe9C,OAAO/J,SACzE6M,EAAe9C,OAAO5a,SAAU,GAE5BZ,gBAAI,EAAJA,KAAM2b,SAASJ,KACfvb,KAAK2b,SAASJ,GAAS9F,KAAK6I,GAGhCte,KAAK+d,aAAa/d,KAAK8d,cAAcU,YAAYF,GAC7CF,GACApe,KAAKge,YAAYM,E,SAGrBte,KAAKqd,qB,CAET,OAAOrd,IACX,EAEA,YAAAic,iBAAA,SAAiBV,EAAiBnJ,GAE9B,OADA,YAAM6J,iBAAgB,UAACV,EAASnJ,GACbpS,IACvB,EAEA,YAAAme,SAAA,WAKI,OAJKne,KAAK+d,aAAa/d,KAAK8d,gBACxB9d,KAAK+d,aAAa/d,KAAK8d,cAAgB9d,KAAK6d,cAAc7d,KAAK8d,eAEnE9d,KAAK+d,aAAa/d,KAAK8d,cAAc3L,iBAAiB,UAAWnS,KAAKge,aACnDhe,IACvB,EAEA,YAAAye,WAAA,WAEI,OADAze,KAAK+d,aAAa/d,KAAK8d,cAAcY,QAClB1e,IACvB,EACJ,EA7EA,CAA4C8c,GAA/B,EAAA6B,uBAAAA,EAmFb,8BACY,KAAAC,0BAAsClB,EACtC,KAAAI,aAAeF,EACf,KAAA5B,OAASf,EACT,KAAA4D,UAAwB,EAkCpC,QAhCI,YAAAC,kBAAA,SAAkBC,GAEd,OADA/e,KAAK4e,0BAA4BG,EAC1B/e,IACX,EAEA,YAAAgf,aAAA,SAAazD,G,IAAb,WAA8B,oDAO1B,OANA,EAAA5V,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAOkZ,IAAS,IAAExS,MAAK,SAAA+F,GACzB,EAAKyM,UAAU9Z,KAAK,CAChBwW,QAASA,EACTnJ,SAAUA,GAElB,IACOpS,IACX,EAEA,YAAAif,iBAAA,SAAiBnB,GAEb,OADA9d,KAAK8d,aAAeA,EACb9d,IACX,EAEA,YAAAkf,WAAA,SAAWlD,GAEP,OADAhc,KAAKgc,OAASA,EACPhc,IACX,EAEA,YAAAmf,MAAA,WACI,IAAIC,EAAS,IAAIT,EAAuB3e,KAAK4e,0BAA2B5e,KAAK8d,aAAc9d,KAAKgc,QAIhG,OAHA,EAAArW,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAO3F,KAAK6e,YAAS,IAAExS,MAAK,SAAAgT,GAC9BD,EAAOnD,iBAAiBoD,EAAa9D,QAAS8D,EAAajN,SAC/D,IACOgN,CACX,EACJ,EAtCA,GAAa,EAAAE,8BAAAA,EAqFb,kBAUI,WAAYC,EAAiEC,EAAuBxD,QAAxF,IAAAuD,IAAAA,EAAA,aAAiE,IAAAC,IAAAA,EAAA,cAAuB,IAAAxD,IAAAA,EAAA,GAApG,MAEI,cAAO,KAFkE,EAAAwD,YAAAA,E,OA6BzE,EAAKC,WAAa,SAAClU,GAAsB,OArBxB,SAACmU,G,YACVC,EAA8B,QAAnB,EAAKD,aAAK,EAALA,EAAQlE,cAAM,QAA+B,QAA1B,EAAckE,aAAK,EAALA,EAAQ1gB,YAAI,eAAEwc,OAE/DD,EAAuC,QAA5B,EAAkB,QAAjB,EAAKmE,aAAK,EAALA,EAAQ1gB,YAAI,eAAEuc,eAAQ,QAAWmE,aAAK,EAALA,EAAQnE,QAG9D,IAAIoE,aAAO,EAAPA,EAAStE,cAAcsE,aAAO,EAAPA,EAASlO,SAAS,CACzC,IAAI0K,EAAewD,EACnB,GAAIxD,EAAId,cAAc,EAAKO,kBACvB,OAIM8D,SAAAA,EAAQlE,OACd,EAAKgB,UAAUjB,EAASY,E,CAMpC,CACyCyD,CAAWrU,EAAX,EACzC,EAAKyQ,OAASA,EACd,EAAKmC,SAASoB,G,CAClB,CA+IJ,OAzL4B,OAgDxB,YAAApB,SAAA,SAASoB,IACLvf,KAAK6f,SAAiBN,EAAc1Q,KAAa0Q,EAAc1Q,KAAO0Q,EAC5DA,EAAc1Q,MACI0Q,EAAc1Q,KACjC5K,aAAa,cAAe,MAE7Bsb,aAAY,EAAZA,EAA6B,eACvBA,EAActb,aAAa,cAAe,KAMxD,OAHAjE,KAAK6f,SAAS1N,iBAAiBnS,KAAKwf,YAAc,SAAWM,EAAOrC,WAAYzd,KAAKyf,WAAY,CAACM,SAAS,IAE3G/f,KAAK6f,SAAS1N,iBAAiBnS,KAAKwf,YAAc,SAAWM,EAAOrC,WAAazd,KAAK+b,UAAW/b,KAAKyf,WAAY,CAACM,SAAS,IAChH/f,IAChB,EAMA,YAAAye,WAAA,WAGI,OAFAze,KAAK6f,SAASxN,oBAAoBrS,KAAKwf,YAAc,SAAWM,EAAOrC,WAAYzd,KAAKyf,YACxFzf,KAAK6f,SAASxN,oBAAoBrS,KAAKwf,YAAc,SAAWxf,KAAK+b,UAAW/b,KAAKyf,YACzEzf,IAChB,EAWA,YAAAwc,UAAA,SAAUjB,EAAiB9J,GAOvB,GANI,iBAAmBA,IACnBA,EAAU,IAAI6J,EAAQ7J,IAKtBzR,gBAAI,EAAJA,KAAM2b,SAASJ,GAAU,CACzB,IAAI+C,EAAiB,IAAIC,EAAehD,EAAS9J,GAC5C6M,EAAe9C,OAAO5a,UACvB0d,EAAe9C,OAAO/J,QAAUzR,KAAKgc,OAAO5c,OAAOkf,EAAe9C,OAAO/J,SACzE6M,EAAe9C,OAAO5a,SAAU,GAEpCZ,KAAK2b,SAASJ,GAAS9F,KAAK6I,E,CAGhC,IACIte,KAAKggB,WAAWzE,EAAS9J,GAAS,GAAO,GAEzCzR,KAAKigB,aAAa1E,EAAS9J,GAAS,GAAM,E,SAE1CzR,KAAKqd,qB,CAET,OAAOrd,IACX,EAGQ,YAAAggB,WAAR,SAAmBzE,EAAiB9J,EAAkByO,EAAwBC,GAK1E,QALkD,IAAAD,IAAAA,GAAA,QAAwB,IAAAC,IAAAA,GAAA,GACrED,GACDlgB,KAAKogB,iBAAiB7E,EAAS9J,GAEnCzR,KAAKwd,uBAAuB/L,GACH,OAArB,IAAAvM,YAAWuH,OAAgB,CAE3B,IAAI6R,EAAiB,IAAIC,EAAehD,EAAS9J,IACjD,IAAAvM,YAAWuH,OAAO+R,YAAYtf,KAAKC,MAAMD,KAAKG,UAAUif,IAAkB7M,EAAQyJ,a,CAElFiF,GACAngB,KAAKqgB,kBAAkB9E,EAAS9J,EAExC,EAEQ,YAAA4O,kBAAR,SAA0B9E,EAAiB9J,GACvC,IAAIiO,EAAQ1f,KAAKsgB,iBAAiB/E,EAAS9J,GAAS,IAEpD,IAAAvM,YAAWoG,cAAcoU,EAC7B,EAGQ,YAAAO,aAAR,SAAqB1E,EAAiB9J,EAAkByO,EAAwBC,QAAxB,IAAAD,IAAAA,GAAA,QAAwB,IAAAC,IAAAA,GAAA,GACvED,GACDlgB,KAAKogB,iBAAiB7E,EAAS9J,GAEnCzR,KAAK4b,kBAAkBnK,EAAQ4J,YAAc5J,EAAQ0J,aACrD,IAAI5P,EAAMvL,KAAKsgB,iBAAiB/E,EAAS9J,GAGzCoD,MAAMkF,UAAUhK,MAAMrG,KAAKlC,SAASlF,iBAAiB,WAAWqX,SAAQ,SAACpW,GACrE,IAAI+a,EAAiB,IAAIC,EAAehD,EAAS9J,GACjDlO,EAAQgd,cAAc/B,YAAYtf,KAAKC,MAAMD,KAAKG,UAAUif,IAAkB7M,EAAQyJ,aAC1F,IAEArG,MAAMkF,UAAUhK,MAAMrG,KAAKlC,SAASlF,iBAAiB,sBAAsBqX,SAAQ,SAACpW,GAAyB,OAAAA,EAAQ+H,cAAcC,EAAtB,IAEzG4U,GACAngB,KAAKqgB,kBAAkB9E,EAAS9J,EAExC,EAGQ,YAAA2O,iBAAR,SAAyB7E,EAAiB9J,GACtC,IAAIoN,EAAY7e,KAAK0b,iBAAiBH,GACtC,GAAIsD,aAAS,EAATA,EAAW/a,OAAQ,CAKnB+a,EAAUlF,SAJQ,SAACpW,GACfA,EAAQkO,EACZ,G,CAIR,EAEQ,YAAA6O,iBAAR,SAAyB/E,EAAiB9J,EAAkBe,QAAA,IAAAA,IAAAA,GAAA,GACxD,IAAI8L,EAAiB,IAAIC,EAAehD,EAAS9J,GAEjD,OADA6M,EAAe9L,QAAUA,EAClBsN,EAAOU,kBAAkBxgB,KAAKwf,YAAc,SAAWM,EAAOrC,WAAYa,EACrF,EAEe,EAAAkC,kBAAf,SAAiChd,EAAcid,GAC3C,GAAI,mBAAqB,IAAAvb,YAAWwb,YAAa,CAC7C,IAAInP,EAAS/J,SAASmZ,YAAY,cAIlC,OAHApP,EAAEiK,OAASiF,EAAQjF,OACnBjK,EAAEgK,QAAUkF,EAAQlF,QACpBhK,EAAEqP,UAAUpd,EAAMid,EAAQjO,QAASiO,EAAQhO,YACpClB,C,CAGP,IAAIsP,EAAc,KAAK,IAAA3b,YAAYwb,aAAYld,EAAMid,GAErD,OADMI,EAAatF,QAAUkF,EAAQlF,QAC9BsF,CAGf,EACJ,EAzLA,CAA4B/D,GAAf,EAAAgD,OAAAA,EA+Lb,8BACY,KAAAP,aAAkD1G,OAClD,KAAAiF,aAAeF,EACf,KAAA5B,OAASf,EACT,KAAA4D,UAAwB,EAmCpC,QAjCI,YAAAiC,iBAAA,SAAiBvB,GAEb,OADAvf,KAAKuf,aAAeA,EACbvf,IACX,EAEA,YAAAgf,aAAA,SAAazD,G,IAAb,WAA8B,oDAO1B,OANA,EAAA5V,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAOkZ,IAAS,IAAExS,MAAK,SAAA+F,GACzB,EAAKyM,UAAU9Z,KAAK,CAChBwW,QAASA,EACTnJ,SAAUA,GAElB,IACOpS,IACX,EAGA,YAAAif,iBAAA,SAAiBnB,GAEb,OADA9d,KAAK8d,aAAeA,EACb9d,IACX,EAEA,YAAAkf,WAAA,SAAWlD,GAEP,OADAhc,KAAKgc,OAASA,EACPhc,IACX,EAEA,YAAAmf,MAAA,WACI,IAAIC,EAAS,IAAIU,EAAO9f,KAAKuf,aAAcvf,KAAK8d,aAAc9d,KAAKgc,QAInE,OAHA,EAAArW,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAO3F,KAAK6e,YAAS,IAAExS,MAAK,SAAAgT,GAC9BD,EAAOnD,iBAAiBoD,EAAa9D,QAAS8D,EAAajN,SAC/D,IACOgN,CACX,EACJ,EAvCA,GAAa,EAAA2B,cAAAA,C,8nCC9qBb,aACA,SACA,SACOvG,EAAY,EAAAzZ,KAAKyZ,UA8CxB,aACI,WAAYnY,GACRrC,KAAKghB,OAAS3e,CAClB,CAwBJ,OApBI,sBAAI,oBAAK,C,IAAT,WACI,OAAOrC,KAAKghB,MAChB,E,gCAEA,YAAAle,IAAA,SAAOme,GAKH,OAJKA,IACDA,EAAK,SAACC,GAAe,OAAGA,CAAH,GAGlB,IAAIC,EADKF,EAAGjhB,KAAKqC,OAE5B,EAEA,YAAA6O,QAAA,SAAW+P,GAEP,IADA,IAAI7K,EAAqBpW,KAAK8C,IAAIme,IAC3B7K,aAAM,EAANA,EAAQ/T,iBAAiB8e,GAC5B/K,EAASA,EAAO/T,MAEpB,OAAO+T,CACX,EAEJ,EA3BA,GAAa,EAAA+K,MAAAA,EAkCb,kBAKI,WAAY9e,G,OACR,YAAMA,IAAM,IAChB,CA4OJ,OAnPiC,OAS7B,sBAAI,oBAAK,C,IAAT,WACI,OAAIrC,KAAKghB,kBAAkBG,EAChBnhB,KAAKghB,OAAO9P,UAAU7O,MAE1BrC,KAAKghB,MAChB,E,gCAEO,EAAA5c,aAAP,SAA8C/B,GAC1C,OAAW,IAAIwC,EAASxC,EAC5B,EAGA,YAAAyC,SAAA,WACI,YAAO,IAAsB9E,KAAKqC,OAAS,MAAQrC,KAAKqC,KAC5D,EAKA,YAAAY,UAAA,SAAUwG,GACN,IAAIjE,EAASxF,KAAK8E,WAIlB,OAHKU,GAAUiE,GACXA,EAAgBC,KAAK1J,KAAMA,OAEvBwF,CACZ,EAEA,YAAAmE,cAAA,SAAcF,GAGV,YAHU,IAAAA,IAAAA,EAAA,WACd,GACIzJ,KAAKiD,UAAUyG,KAAK1J,KAAMyJ,GACnBzJ,IACX,EAEA,YAAA4D,OAAA,SAAO4K,GACH,OAAIxO,KAAKiD,YACEjD,KAGU,MAAbwO,EACO3J,EAASW,OAEbxF,KAAKkR,SAAQ,WAAM,OAAA1C,CAAA,GAElC,EAOA,YAAAX,WAAA,SAAW5B,GACP,OAAIjM,KAAKiD,YACEjD,KAEAA,KAAKkR,QAAQjF,EAE5B,EAMA,YAAAiF,QAAA,SAAW+P,GACP,IAAIvd,EAAM,YAAMwN,QAAO,UAAC+P,GACxB,OAAMvd,aAAemB,EAICnB,EAAIwN,UAHfrM,EAAST,aAAaV,EAAIrB,MAIzC,EAMA,YAAA8C,MAAA,W,IAAS,sDAELgO,EAAMnT,KAAKohB,eAAc,MAAnBphB,KAAI,OAAmBmT,IAAG,IAGhC,IADA,IAAIkO,EAA4BrhB,KACvBgE,EAAM,EAAGA,EAAMmP,EAAIrP,OAAQE,IAAO,CACvC,IAAIsd,EAAUthB,KAAKuhB,OAAOpO,EAAInP,IAC1Bwd,EAASxhB,KAAKyhB,WAAWtO,EAAInP,IAEjC,GAAgB,KAAZsd,GAAkBE,GAAU,GAE5B,IADAH,EAAarhB,KAAKkE,WAAWE,aAAeid,EAAWhf,iBAAiBwS,MAAiBwM,EAAWhf,MAAMyB,OAAS0d,EAAS,KAAOH,EAAWhf,MAAMmf,GAAnE,OAClE1c,WACX,OAAOuc,OAGR,GAAIC,GAAWE,GAAU,EAAzB,CACH,GAAIH,EAAWK,aAAaJ,GAASxc,WACjC,OAAOuc,EAGX,IADAA,EAAcA,EAAWK,aAAaJ,GAASjf,iBAAiBwS,MAAS7U,KAAKkE,WAAWE,aAAaid,EAAWK,aAAaJ,GAASjf,MAAMmf,IAAWxhB,KAAKkE,WAAWsB,QACzJV,WACX,OAAOuc,C,KANR,CAaP,IAFIA,EAAaA,EAAWK,aAAaJ,IAE1Bxc,WACX,OAAOuc,EACAG,GAAU,IACjBH,EAAarhB,KAAKkE,WAAWE,aAAaid,EAAWhf,MAAMmf,I,EAKnE,OAFaH,CAGjB,EASA,YAAAvV,MAAA,SAAMmV,GACF,OAAIjhB,KAAK8E,YAGFmc,EAAGjhB,KAAKqC,MACnB,EASA,YAAAsB,IAAA,SAAOF,GACH,YADG,IAAAA,IAAAA,EAAkBoB,EAASW,QAC1BxF,KAAK8E,WACE9E,KAAKkE,WAAWE,aAAaX,GAAYyN,UAG7ClR,KAAKkE,WAAWE,aAAapE,KAAKqC,OAAO6O,SACpD,EAEA,YAAAyQ,OAAA,WACI,OAAOziB,KAAKG,UAAUW,KAAKqC,MAC/B,EASU,YAAA6B,SAAV,WACI,OAAOW,CACX,EAGU,YAAA4c,WAAV,SAAqBtO,GACjB,IAAIyO,EAAQzO,EAAI1L,QAAQ,KACpB4N,EAAMlC,EAAI1L,QAAQ,KACtB,OAAIma,GAAS,GAAKvM,EAAM,GAAKuM,EAAQvM,EAC1BwM,SAAS1O,EAAInC,UAAU4Q,EAAQ,EAAGvM,KAEjC,CAEhB,EAGU,YAAAkM,OAAV,SAAiBpO,GACb,IAAIyO,EAAQzO,EAAI1L,QAAQ,KAExB,OAAIma,GAAS,EACFzO,EAAInC,UAAU,EAAG4Q,GAEjBzO,CAEf,EAOA,YAAAuO,aAAA,SAAgBvO,GACZ,OAAInT,KAAK8E,WACE9E,KAAKkE,WAAWsB,OAEpBxF,KAAKkE,WAAWE,aAAapE,KAAKqC,MAAM8Q,IAAMjC,SACzD,EAcA,YAAAgM,QAAA,SAAW4E,GACP,GAAI9hB,KAAK8E,WACL,OAAOD,EAASW,OAEpB,IACI,OAAOX,EAAST,aAAa0d,EAAS9hB,KAAKqC,O,CAC7C,MAAOkP,GACL,OAAO1M,EAASW,M,CAExB,EAGU,YAAA4b,eAAV,W,IAAyB,sDACrB,OAAO,EAAAzb,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAOkV,IAAI,IACnB3J,SAAQ,SAAA/O,GACL,OAAO,EAAAwD,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAOxD,EAAKqV,MAAM,eAAY,IACtC1U,KAAI,SAAAX,GAQD,OANyB,IADzBA,EAAOA,EAAKmK,QAAQ,aAAc,KAC1B7E,QAAQ,OAAoC,GAAtBtF,EAAKsF,QAAQ,OACvCtF,EAAO,IAAMA,IAEQ,GAAtBA,EAAKsF,QAAQ,OAAoC,GAAtBtF,EAAKsF,QAAQ,OACvCtF,GAAc,KAEXA,CACX,GACR,IAEC9B,QAAQ,IAAI,EAAAyG,eACrB,EA/OO,EAAAtB,OAASX,EAAST,aAAa,MAgP1C,C,CAnPA,CAAiC+c,GAApB,EAAAtc,SAAAA,EA+Pb,kBAOI,WAAYgb,EAAexb,QAAA,IAAAA,IAAAA,EAAA,SAA3B,MACI,YAAMwb,IAAS,K,OAEf,EAAK1M,IAAM9O,E,CACf,CA4CJ,OAvDsC,OAalC,sBAAI,oBAAK,C,IAAT,WACI,OAAOrE,KAAKghB,OAAYhhB,KAAKghB,OAAOhhB,KAAKmT,KAAO,IACpD,E,IAEA,SAAU4O,GACD/hB,KAAKghB,SAGVhhB,KAAKghB,OAAOhhB,KAAKmT,KAAO4O,EAC5B,E,gCAEA,YAAAne,OAAA,SAAO4K,GACH,IAAIwT,EAAc,CAAC,EAEnB,OADAA,EAAYhiB,KAAKmT,KAAO3E,EACjBxO,KAAKiD,YAAcjD,KAAO,IAAIsE,EAAc0d,EAAahiB,KAAKmT,IACzE,EAEA,YAAAtF,WAAA,SAAW5B,GACP,GAAIjM,KAAKiD,YACL,OAAOjD,KAEP,IAAIgiB,EAAc,CAAC,EAEnB,OADAA,EAAYhiB,KAAKmT,KAAOlH,IACjB,IAAI3H,EAAc0d,EAAahiB,KAAKmT,IAEnD,EASU,YAAAjP,SAAV,WACI,OAAOI,CACX,EAEO,EAAAF,aAAP,SAA6C/B,EAAagC,GACtD,YADsD,IAAAA,IAAAA,EAAA,SACzC,IAAIC,EAAiBjC,EAAOgC,EAC7C,EAlDO,EAAAmB,OAASlB,EAAcF,aAAa,MAoD/C,C,CAvDA,CAAsCS,GAAzB,EAAAP,cAAAA,EA6Db,kBAUI,WAAYub,EAAe1M,EAAUqO,GAArC,MACI,YAAM3B,EAAU1M,IAAI,K,OAEpB,EAAKqO,OAASA,QAAAA,GAAW,E,CAC7B,CAqBJ,OAnC6B,OAgBzB,sBAAI,oBAAK,C,IAAT,WACI,MAAgB,IAAZxhB,KAAKmT,KAAanT,KAAKwhB,QAAU,EAC1BxhB,KAAKghB,OAAOhhB,KAAKwhB,QACjBxhB,KAAKmT,KAAOnT,KAAKwhB,QAAU,EAC3BxhB,KAAKghB,OAAOhhB,KAAKmT,KAAKnT,KAAKwhB,QAE/BxhB,KAAKghB,OAAOhhB,KAAKmT,IAC5B,E,IAEA,SAAUzP,GACU,IAAZ1D,KAAKmT,KAAanT,KAAKwhB,QAAU,EACjCxhB,KAAKghB,OAAOhhB,KAAKwhB,QAAU9d,EAEpB1D,KAAKmT,KAAOnT,KAAKwhB,QAAU,EAClCxhB,KAAKghB,OAAOhhB,KAAKmT,KAAKnT,KAAKwhB,QAAU9d,EAGzC1D,KAAKghB,OAAOhhB,KAAKmT,KAAOzP,CAC5B,E,gCA/BO,EAAA8B,OAASyc,EAAY7d,aAAa,MAgC7C,C,CAnCA,CAA6BE,GAsChB,EAAA4d,aAAe,gBACf,EAAAC,WAAa,gBAC1B,IAaA,cACI,WAAY9gB,EAAmB+gB,GAA/B,MACI,YAAM/gB,IAAK,K,OADgB,EAAA+gB,UAAAA,E,CAE/B,CAqUJ,OAxU4B,OASxB,sBAAI,0BAAW,C,IAAf,WACI,OAAOpiB,KAAKqiB,cAChB,E,gCAEU,YAAAA,aAAV,WACI,OAAO,IAAI3O,EAAO,EAAA/N,OAAOxF,QAAQH,KAAKqC,OAAOhC,QAAQ,IAAI,EAAAC,qBAC7D,EAKA,sBAAI,uBAAQ,C,IAAZ,WACI,OAAON,KAAKsiB,WAChB,E,gCAEU,YAAAA,UAAV,WACI,OAAO,IAAI5O,EAAO8G,EAAU,CAAC,EAAGxa,KAAKqC,OACzC,EAMO,EAAA+B,aAAP,SAAuB/B,GACnB,OAAO,IAAIqR,EAAOrR,EACtB,EAKA,YAAAkgB,aAAA,SAAaC,EAAeC,EAAkBC,GAA9C,gBAA4B,IAAAD,IAAAA,GAAA,QAAkB,IAAAC,IAAAA,GAAA,G,eACjCvP,GACL,QAAG,IAAsBA,GAAO,MAAQA,E,kBAGpCsP,GAAetP,KAAO,EAAK9Q,QACtBqgB,EAGG7N,MAAM8N,QAAQH,EAAMrd,MAAMgO,GAAK9Q,OAC/B,EAAAsD,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAO6c,EAAMrd,MAAMgO,GAAK9Q,QAAK,IAAEgK,MAAK,SAAAlK,GAAQ,SAAK8K,OAAOkG,GAAK9Q,MAAQF,CAAzB,IAElD,EAAK8K,OAAOkG,GAAK9Q,MAAQmgB,EAAMrd,MAAMgO,GAAK9Q,MAL9C,EAAKuS,OAAOzB,GAAK9Q,MAAQmgB,EAAMrd,MAAMgO,GAAK9Q,M,SANtD,IAAK,IAAI8Q,KAAOqP,EAAMngB,M,EAAb8Q,EAgBb,EAcA,YAAAlG,OAAA,W,IAAO,sDACH,IAAI2V,EAASC,EAAW/e,OAAS,EACjC,IAAI8e,EAAJ,CAGA5iB,KAAK8iB,iBAAgB,MAArB9iB,KAAI,OAAqB6iB,IAAU,IAEnC,IAAIE,EAAUF,EAAWA,EAAW/e,OAAS,GAGzCkf,GAFoBhjB,KAAKuhB,OAAOwB,GAEnB/iB,KAAKmF,MAAK,MAAVnF,KAAI,OAAU6iB,IAAU,IAAE5f,aAC3CjD,KAAKijB,UAAS,MAAdjjB,KAAI,OAAc6iB,IAAU,IAE5B,IAAIK,EAAiBljB,KAAKyhB,WAAWsB,GACrC,GAAIG,GAAkB,EAClB,MAAMziB,MAAM,4EAEhB,IAAI4B,EAAarC,KAAKmF,MAAK,MAAVnF,KAAI,OAAU6iB,IAAU,IAAExgB,MACtCwS,MAAM8N,QAAQtgB,KACfA,EAAQrC,KAAK4U,OAAM,MAAX5U,KAAI,OAAW6iB,IAAU,IAAExgB,MAAQ,CAACA,IAE5C2gB,GACA3gB,EAAM0C,KAAK,CAAC,GAEhBme,EAAiB7gB,EAAMyB,OAAS,EAEhC,IAAIqf,EAAS,IAAIlB,EAAiC,GAArBY,EAAW/e,OAAc9D,KAAKqC,MAAQrC,KAAKmF,MAAMie,MAAMpjB,KAAM6iB,EAAW9S,MAAM,EAAG8S,EAAW/e,OAAS,IAAIzB,MAClI0gB,EAASG,GAGb,OAAOC,C,CACX,EAQA,YAAAE,SAAA,SAAS/hB,G,IAAoB,wDACzB,OAAKA,EAGEtB,KAAKiN,OAAM,MAAXjN,KAAI,OAAW6iB,IAAU,IAFrB,CAACxgB,MAAO,KAGvB,EAMA,YAAAuS,OAAA,W,IAAO,sDACH,KAAIiO,EAAW/e,OAAS,GAAxB,CAGA9D,KAAK8iB,iBAAgB,MAArB9iB,KAAI,OAAqB6iB,IAAU,IAEnC7iB,KAAKijB,UAAS,MAAdjjB,KAAI,OAAc6iB,IAAU,IAE5B,IAAIvB,EAAUthB,KAAKuhB,OAAOsB,EAAWA,EAAW/e,OAAS,IACrD0d,EAASxhB,KAAKyhB,WAAWoB,EAAWA,EAAW/e,OAAS,IACxDqf,EAAS,IAAIlB,EAAiC,GAArBY,EAAW/e,OAAc9D,KAAKqC,MAAQrC,KAAKmF,MAAMie,MAAMpjB,KAAM6iB,EAAW9S,MAAM,EAAG8S,EAAW/e,OAAS,IAAIzB,MAClIif,EAASE,GAGb,OAAO2B,C,CACX,EASA,YAAAG,SAAA,SAAShiB,G,IAAoB,wDACzB,OAAOA,EAAYtB,KAAK4U,OAAM,MAAX5U,KAAI,OAAW6iB,IAAU,IAAI,CAACxgB,MAAO,KAC5D,EAOA,YAAA8C,MAAA,W,IAAM,sDAEF,OADAnF,KAAK8iB,iBAAgB,MAArB9iB,KAAI,OAAqB6iB,IAAU,IAC5B7iB,KAAKkE,WAAWE,aAAa,YAAMe,MAAMie,MAAMpjB,KAAM6iB,GAAYxgB,MAC5E,EAQA,YAAAsB,IAAA,SAAIF,GACA,OAAOzD,KAAKkE,WAAWE,aAAa,YAAMT,IAAG,UAACF,GAAYpB,MAC9D,EAGA,YAAAuH,OAAA,SAAOuJ,GAIH,OAHIA,KAAOnT,KAAKqC,cACLrC,KAAKqC,MAAM8Q,GAEfnT,IACX,EAKA,YAAA2hB,OAAA,WACI,OAAOziB,KAAKG,UAAUW,KAAKqC,MAC/B,EAKA,sBAAI,qBAAM,C,IAAV,sBACI,OAAO,EAAAsD,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAQ+U,OAAOG,KAAK7a,KAAKqC,SAAM,IAAES,KAAI,SAAAqQ,GAAO,OAACA,EAAK,EAAK9Q,MAAM8Q,GAAjB,GAC7D,E,gCAEU,YAAAjP,SAAV,WACI,OAAOwP,CACX,EAEQ,YAAA6P,OAAR,SAAe7f,GACX1D,KAAKghB,OAAStd,CAClB,EAQQ,YAAAof,iBAAR,W,YAAyB,kDAErB,GADAD,EAAa7iB,KAAKohB,eAAc,MAAnBphB,KAAI,OAAmB6iB,IAAU,IAC1C7iB,KAAKoiB,UAAT,CAKA,IAAIoB,EAAgB,KAEdC,EAAkB,gCAExBD,EAAgBxjB,KAAKoiB,UAIrB,I,eAASpe,GACL,IAAIsd,EAAU,EAAKC,OAAOsB,EAAW7e,IACjCwd,EAAS,EAAKC,WAAWoB,EAAW7e,IAyBxC,GApBQwf,EAFL,EAAKb,QAAQnB,GACE,IAAXF,EACkBzM,MAAM8N,QAAQa,GAC3B,EAAA7d,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAO6d,IAAa,IACrBpjB,QAAO,SAAA+B,GAAI,MAAI,QAAkB,QAAf,EAAAA,aAAI,EAAJA,EAAOmf,UAAQ,UAAU,IAC3Cxe,KAAI,SAAAX,GAAQ,OAAAA,aAAI,EAAJA,EAAOmf,EAAP,IAAiBlf,QAClCyC,EAAST,aAAqC,QAAxB,EAAAof,aAAa,EAAbA,EAAgBlC,UAAQ,QAAI,MAErCzM,MAAM8N,QAAQa,GAC3B,EAAA7d,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAO6d,IAAa,IACrBpjB,QAAO,SAAA+B,GAAQ,OAAA0S,MAAM8N,QAAQxgB,EAAd,IACf+O,SAAQ,SAAA/O,GAAQ,SAAAwD,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAOxD,IAAI,GAAjB,IAAoBC,QAAUyC,EAASW,OAKnDqP,MAAM8N,QAAQa,GAAkB,EAAA7d,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAO6d,IAAa,IAClEpjB,QAAO,SAAA+B,GAAI,MAAI,QAAmB,QAAf,EAAAA,aAAI,EAAJA,EAAOmf,UAAQ,UAAU,IAC5Cxe,KAAI,SAAAX,GAAQ,OAAAA,aAAI,EAAJA,EAAOmf,EAAP,IACZlf,QACTyC,EAAST,aAAqC,QAAxB,EAAAof,aAAa,EAAbA,EAAgBlC,UAAQ,QAAI,OAElDkC,EAAcvgB,YACd,MAAMxC,MAAMgjB,GAKhB,IAHAD,EAAgBA,EAAcnhB,QAGV,EAAA8f,W,6BAjCfne,EAAM,EAAGA,EAAM6e,EAAW/e,OAAQE,IAAO,C,QAAzCA,G,sCAsCb,EAQQ,YAAAif,UAAR,W,IAAkB,sDACdJ,EAAa7iB,KAAKohB,eAAc,MAAnBphB,KAAI,OAAmB6iB,IAAU,IAY9C,IAXA,IAAInf,EAAM1D,KACN0jB,EAAY1jB,KAAKkE,WAAWE,aAAa,MACzCuf,GAAa,EACbC,EAAQ,SAAUC,EAAiB/f,GAGnC,IAFA,IAAIggB,EAAUD,EAAI/f,OACdigB,EAAUD,EAAUhgB,EACfE,EAAM8f,EAAS9f,EAAM+f,EAAS/f,IACnC6f,EAAI9e,KAAK,CAAC,EAElB,EAESf,EAAM,EAAGA,EAAM6e,EAAW/e,OAAQE,IAAO,CAC9C,IAAIsd,EAAUthB,KAAKuhB,OAAOsB,EAAW7e,IACjCwd,EAASxhB,KAAKyhB,WAAWoB,EAAW7e,IAExC,GAAIhE,KAAKgkB,WAAW1C,EAASE,GAEzB9d,EAAI6f,OAAQ7f,EAAIrB,iBAAiBwS,MAASnR,EAAIrB,MAAQ,IACtDuhB,EAAMlgB,EAAIrB,MAAOmf,EAAS,GACtBmC,GAAa,IACbD,EAAUrhB,MAAMshB,GAAajgB,EAAIrB,OAErCqhB,EAAYhgB,EACZigB,EAAYnC,EACZ9d,EAAM1D,KAAKkE,WAAWE,aAAaV,EAAIrB,MAAMmf,QATjD,CAaA,IAAIyC,EAAkBvgB,EAAIyB,MAAMmc,GAChC,GAAIthB,KAAKkkB,UAAU1C,GACXyC,EAAQnf,WACRmf,EAAkBjkB,KAAKkE,WAAWE,aAAaV,EAAIrB,MAAMif,GAAW,CAAC,GAErE5d,EAAWugB,MAEZ,CACH,IAAIJ,EAAOI,EAAQ5hB,iBAAiBwS,MAASoP,EAAQ5hB,MAAQ,GAC7DuhB,EAAMC,EAAKrC,EAAS,GACpB9d,EAAIrB,MAAMif,GAAWuC,EACrBI,EAAUjkB,KAAKkE,WAAWE,aAAayf,EAAIrC,G,CAE/CkC,EAAYhgB,EACZigB,EAAYnC,EACZ9d,EAAWugB,C,EAGf,OAAOjkB,IACX,EAEQ,YAAAkkB,UAAR,SAAkB1C,GACd,OAAkB,GAAXA,CACX,EAEQ,YAAAmB,QAAR,SAAgBnB,GACZ,OAAQxhB,KAAKkkB,UAAU1C,EAC3B,EAEQ,YAAAwC,WAAR,SAAmB1C,EAAiBE,GAC5B,MAAmB,KAAZF,GAAkBE,GAAU,CAC3C,EAEJ,EAxUA,CAA4B3c,GAAf,EAAA6O,OAAAA,C,inBC1cb,IAEYyQ,EAFZ,UAEA,SAAYA,GACR,yBAAS,+BAAY,0BACxB,CAFD,CAAYA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KAgBzB,mBAAwB5kB,GACpB,IAAI6kB,EAAe,KACnB,OAAO,IAAIC,GAAmB,SAACjB,EAAiBjG,GAC5CiH,EAAU1hB,YAAW,WAAM,OAAA0gB,GAAA,GAAS7jB,EACxC,IAAG,WACK6kB,IACAlhB,aAAakhB,GACbA,EAAU,KAElB,GACJ,EAEA,oBAAyB7kB,GACrB,IAAI6kB,EAAe,KACnB,OAAO,IAAIC,GAAmB,SAACjB,EAAiBjG,GAC5CiH,EAAU/gB,aAAY,WAClB+f,GACJ,GAAG7jB,EACP,IAAG,WACK6kB,IACA9gB,cAAc8gB,GACdA,EAAU,KAElB,GACJ,EASA,iBAMI,WAAYE,GAAZ,WAJA,KAAAC,OAASJ,EAAcK,QACb,KAAAC,SAAuB,GAK7BzkB,KAAKqC,MAAQiiB,EACbtkB,KAAKqC,OAAM,SAACrD,GAAc,SAAKke,QAAQle,EAAb,IAAoB,SAACA,GAAc,SAAKme,OAAOne,EAAZ,GACjE,CAmNJ,OAjNW,EAAA0lB,IAAP,W,IAAW,sDAEP,IACIC,EADAC,EAAa,EAGbC,EAAY,IAAIjjB,GAAQ,SAACwhB,EAAiBjG,GAC1CwH,EAAUvB,CACd,IACIkB,EAAW,WACXM,IAEIE,EAAShhB,QAAU8gB,GACnBD,GAER,EACML,EAAUS,UAAW,EAE3B,IAAK,IAAI/gB,EAAM,EAAGA,EAAM8gB,EAAShhB,OAAQE,IACrC8gB,EAAS9gB,GAAKghB,QAAQV,GAE1B,OAAOO,CACX,EAEO,EAAAI,KAAP,W,IAAY,sDAER,IACIN,EACAO,EAEAL,EAAY,IAAIjjB,GAAQ,SAACwhB,EAAiBjG,GAC1CwH,EAAUvB,EACV8B,EAAW/H,CACf,IAEIgI,EAAe,WAMf,OALMR,GACFA,IAEJA,EAAU,KACVO,EAAW,KACJ,IACX,EACMC,EAAcJ,UAAW,EAE/B,IAAIK,EAAe,WAMf,OALMF,GACFA,IAEJA,EAAW,KACXP,EAAU,KACH,IACX,EACMS,EAAcL,UAAW,EAE/B,IAAK,IAAI/gB,EAAM,EAAGA,EAAM8gB,EAAShhB,OAAQE,IACrC8gB,EAAS9gB,GAAKqhB,KAAKF,GACnBL,EAAS9gB,GAAKshB,MAAMF,GAExB,OAAOP,CACX,EAEO,EAAA1H,OAAP,SAAcoI,GAcV,OAba,IAAI3jB,GAAQ,SAACsb,EAAcC,GAEhCoI,aAAkB3jB,EAClB2jB,EAAOF,MAAK,SAAC3hB,GACTyZ,EAAOzZ,EACX,IAEAhB,YAAW,WACPya,EAAOoI,EACX,GAAG,EAEX,GAGJ,EAEO,EAAArI,QAAP,SAAeqI,GAYX,OAXa,IAAI3jB,GAAQ,SAACsb,EAAcC,GAEhCoI,aAAkB3jB,EAClB2jB,EAAOF,MAAK,SAAC3hB,GAAQ,OAAAwZ,EAAQxZ,EAAR,IAErBhB,YAAW,WACPwa,EAAQqI,EACZ,GAAG,EAEX,GAGJ,EAEA,YAAAF,KAAA,SAAKG,EAAkCC,GAMnC,OALAzlB,KAAKykB,SAAS1f,KAAK,CAAC,KAAQygB,IACxBC,GACAzlB,KAAKykB,SAAS1f,KAAK,CAAC,MAAS0gB,IAEjCzlB,KAAK0lB,kBACE1lB,IACX,EAEA,YAAAslB,MAAA,SAAME,GAGF,OAFAxlB,KAAKykB,SAAS1f,KAAK,CAAC,MAASygB,IAC7BxlB,KAAK0lB,kBACE1lB,IACX,EAEA,YAAAglB,QAAA,SAAQQ,GACJ,IAAUxlB,KAAM2lB,WAOhB,OAFA3lB,KAAKykB,SAAS1f,KAAK,CAAC,QAAWygB,IAC/BxlB,KAAK0lB,kBACE1lB,KANGA,KAAM2lB,WAAWX,QAAQQ,EAOvC,EAEU,YAAAtI,QAAV,SAAkBxZ,GAEd,KAAO1D,KAAKykB,SAAS3gB,QACZ9D,KAAKykB,SAAS,GAAGY,MADG,CAIzB,IAAIpE,EAAKjhB,KAAKykB,SAASmB,QAEnBC,EAAa,EAAAhhB,SAAST,aAAa6c,EAAGoE,KAAK3hB,IAE/C,IAAImiB,EAAW5iB,YAYX,MATA,IADAS,GADAmiB,EAAaA,EAAW3U,WACP7O,iBACET,EAMf,YAFA5B,KAAK8lB,uBAAuBpiB,E,CASxC1D,KAAK+lB,cACL/lB,KAAKukB,OAASJ,EAAc6B,UAChC,EAEU,YAAA7I,OAAV,SAAiBzZ,GAEb,KAAO1D,KAAKykB,SAAS3gB,SACb9D,KAAKykB,SAAS,GAAGO,SADI,CAIzB,IAAI/D,EAAKjhB,KAAKykB,SAASmB,QACvB,GAAI3E,EAAGqE,MAAO,CACV,IAAIO,EAAa,EAAAhhB,SAAST,aAAa6c,EAAGqE,MAAM5hB,IAChD,GAAImiB,EAAW5iB,YAAa,CAGxB,IADAS,GADAmiB,EAAaA,EAAW3U,WACP7O,iBACET,EAGf,YADA5B,KAAK8lB,uBAAuBpiB,GAGhC1D,KAAKukB,OAASJ,EAAc8B,SAC5B,K,CAEA,K,EAKZjmB,KAAKukB,OAASJ,EAAc8B,SAC5BjmB,KAAK+lB,aACT,EAEU,YAAAA,YAAV,WACI,KAAO/lB,KAAKykB,SAAS3gB,QAAQ,CACzB,IAAImd,EAAKjhB,KAAKykB,SAASmB,QACnB3E,EAAG+D,SACH/D,EAAG+D,S,CAGf,EAEQ,YAAAU,gBAAR,WAGI,IAFA,IAAIQ,EAAY,GACZC,EAAO,GACFniB,EAAM,EAAGA,EAAMhE,KAAKykB,SAAS3gB,OAAQE,IAC1C,IAAK,IAAImP,KAAOnT,KAAKykB,SAASzgB,GACtBhE,KAAKykB,SAASzgB,GAAKmP,GAAK4R,SACxBmB,EAAUnhB,KAAK/E,KAAKykB,SAASzgB,IAE7BmiB,EAAKphB,KAAK/E,KAAKykB,SAASzgB,IAIpChE,KAAKykB,SAAW0B,EAAKxf,OAAOuf,EAChC,EAEQ,YAAAJ,uBAAR,SAA+BpiB,GAC3B,IAAK,IAAIM,EAAM,EAAGA,EAAMhE,KAAKykB,SAAS3gB,OAAQE,IAC1C,IAAK,IAAImP,KAAOnT,KAAKykB,SAASzgB,GAC1BN,EAAIyP,GAAKnT,KAAKykB,SAASzgB,GAAKmP,GAGxC,EACJ,EA7NA,GAAa,EAAAvR,QAAAA,EAwOb,kBAMI,WAAY0iB,EAA+E8B,GAA3F,MACI,YAAM9B,IAAS,K,OAuBX,EAAA8B,YAAc,WACtB,EAvBI,EAAKA,YAAcA,E,CACvB,CAuBJ,OAhCwC,OAWpC,YAAAC,OAAA,WACIrmB,KAAKukB,OAASJ,EAAc8B,SAC5BjmB,KAAK+lB,cAEL/lB,KAAKykB,SAAW,EACpB,EAEA,YAAAY,KAAA,SAAKG,EAAkCC,GACnC,OAA2B,YAAMJ,KAAI,UAACG,EAAcC,EACxD,EAEA,YAAAH,MAAA,SAAME,GACF,OAA2B,YAAMF,MAAK,UAACE,EAC3C,EAEA,YAAAR,QAAA,SAAQQ,GACJ,OAA2B,YAAMR,QAAO,UAACQ,EAC7C,EAIJ,EAhCA,CAAwC5jB,GAA3B,EAAAyiB,mBAAAA,C,i5BC5Rb,IAeY1O,EAfZ,UAeA,SAAYA,GACR,wBACA,0BACH,CAHD,CAAYA,EAAA,EAAAA,mBAAA,EAAAA,iBAAgB,KAoE5B,iBAMI,WAAYiM,EAAe0E,GACvBtmB,KAAKsmB,MAAQA,EACbtmB,KAAK4hB,MAAQA,EACb5hB,KAAKqC,MAAQuf,EAAQ,CACzB,CA4BJ,OAzBI,YAAAtM,QAAA,WACI,OAAOtV,KAAKqC,MAASrC,KAAKsmB,MAAQ,CACtC,EAEA,YAAA7Q,KAAA,WAEI,OADAzV,KAAKqC,QACErC,KAAKqC,OAAUrC,KAAKsmB,MAAQ,EAAKtmB,KAAKqC,MAAQsT,EAAiBC,OAC1E,EAEA,YAAAF,UAAA,SAAU1R,GACN,YADM,IAAAA,IAAAA,EAAA,GACDhE,KAAKqC,MAAQ2B,EAAOhE,KAAKsmB,MAAQ,EAC3B3Q,EAAiBC,QAEjB5V,KAAKqC,MAAQ2B,CAE5B,EAEA,YAAA+R,MAAA,WACI/V,KAAKqC,MAAQrC,KAAK4hB,MAAQ,CAC9B,EAEA,YAAA/L,QAAA,WAEI,OAAQ7V,KAAK4hB,MAAQ,EAAKjM,EAAiBG,SAAW9V,KAAKqC,KAC/D,EACJ,EAtCA,GAAa,EAAAkkB,mBAAAA,EA4Cb,iBAII,a,IAAY,sDAFZ,KAAAC,SAAW,EAGPxmB,KAAKqC,MAAQA,CACjB,CAyBJ,OAvBI,YAAAqT,UAAA,SAAU1R,GACN,YADM,IAAAA,IAAAA,EAAA,GACDhE,KAAKwmB,QAAUxiB,EAAOhE,KAAKqC,MAAMyB,OAAS,EACpC6R,EAAiBC,QAErB5V,KAAKqC,MAAMrC,KAAKwmB,QAAUxiB,EACrC,EAEA,YAAAsR,QAAA,WACI,OAAOtV,KAAKqC,MAAMyB,OAAS,EAAI9D,KAAKwmB,OACxC,EAEA,YAAA/Q,KAAA,W,MAEI,OADAzV,KAAKwmB,UAC2B,QAAzB,EAAAxmB,gBAAI,EAAJA,KAAMqC,MAAMrC,KAAKwmB,gBAAQ,QAAI7Q,EAAiBC,OACzD,EAEA,YAAAG,MAAA,WACI/V,KAAKwmB,SAAW,CACpB,EAEA,YAAA3Q,QAAA,WACI,OAAO7V,KAAKqC,MAAM6S,KAAKuR,IAAI,EAAGzmB,KAAKwmB,SACvC,EACJ,EA/BA,GAAa,EAAAE,sBAAAA,EAuCb,iBAWI,WAAYC,EAA4Bla,GANxC,KAAAma,SAAiCjR,EAAiBG,SAGlD,KAAA+Q,WAAa,CAAC,EACd,KAAAC,eAAiB,EAGb9mB,KAAK2mB,WAAaA,EAClB3mB,KAAK+mB,gBAAkBta,CAC3B,CAoEJ,OA5DI,YAAA6I,QAAA,WAKI,IAJA,IAEIG,EAFAuR,EAAQ,EACRnkB,GAAQ,GAGJA,IAAU4S,EAAOzV,KAAK+mB,gBAAgBrR,UAAUsR,KAAWrR,EAAiBC,SAC5E5V,KAAK2mB,WAAWlR,IAChBzV,KAAK6mB,WAAW7mB,KAAK8mB,eAAiBE,IAAS,EAC/CnkB,GAAQ,GAERmkB,IAGR,OAAOnkB,CACX,EAKA,YAAA4S,KAAA,WAEI,I,QADI5S,EAA8B8S,EAAiBC,QAC5C5V,KAAK+mB,gBAAgBzR,WAAW,CACnCtV,KAAK8mB,iBACL,IAAIrR,EAAazV,KAAK+mB,gBAAgBtR,OAGtC,GAAIA,GAAQE,EAAiBC,UACe,QAAtC,EAAe,QAAf,EAAA5V,KAAK6mB,kBAAU,eAAG7mB,KAAK8mB,uBAAe,UAAc9mB,KAAK2mB,WAAWlR,IAAQ,CAC9EzV,KAAK6mB,WAAW7mB,KAAK8mB,iBAAkB,EACvCjkB,EAAQ4S,EACR,K,EAIR,OADAzV,KAAK4mB,SAAW/jB,EACTA,CACX,EAEA,YAAA6S,UAAA,SAAU1R,G,MACFijB,OADE,IAAAjjB,IAAAA,EAAA,GAGN,IAAK,IAAIkjB,EAAO,EAAGljB,EAAM,IAAMijB,EAAYjnB,KAAK+mB,gBAAgBrR,UAAUwR,KAAUvR,EAAiBC,QAASsR,IAAQ,GACrF,QAAf,EAAAlnB,KAAK6mB,kBAAU,eAAG7mB,KAAK8mB,eAAiBI,KACvClnB,KAAK2mB,WAAWM,MAC3BjjB,IACAhE,KAAK6mB,WAAW7mB,KAAK8mB,eAAiBI,IAAQ,E,CAGtD,OAAOD,CACX,EAEA,YAAApR,QAAA,WACI,OAAO7V,KAAK4mB,QAChB,EAEA,YAAA7Q,MAAA,WACI/V,KAAK4mB,SAAWjR,EAAiBG,SACjC9V,KAAK6mB,WAAa,CAAC,EACnB7mB,KAAK8mB,eAAiB,EACtB9mB,KAAK+mB,gBAAgBhR,OACzB,EACJ,EAlFA,GAAa,EAAAoR,yBAAAA,EAwFb,iBAKI,WAAYC,EAAmB3a,GAC3BzM,KAAKonB,QAAUA,EACfpnB,KAAK+mB,gBAAkBta,CAC3B,CAsBJ,OApBI,YAAA6I,QAAA,WACI,OAAOtV,KAAK+mB,gBAAgBzR,SAChC,EAEA,YAAAG,KAAA,WACI,OAAOzV,KAAKonB,QAAQpnB,KAAK+mB,gBAAgBtR,OAC7C,EAEA,YAAAM,MAAA,WACI/V,KAAK+mB,gBAAgBhR,OACzB,EAEA,YAAAF,QAAA,WACI,OAAO7V,KAAKonB,QAAQpnB,KAAK+mB,gBAAgBlR,UAC7C,EAEA,YAAAH,UAAA,SAAU1R,QAAA,IAAAA,IAAAA,EAAA,GACN,IAAMqjB,EAAernB,KAAK+mB,gBAAgBrR,UAAU1R,GACpD,OAAQqjB,GAAgB1R,EAAiBC,QAAWyR,EAAmCrnB,KAAKonB,QAAQC,EACxG,EACJ,EA9BA,GAAa,EAAAC,uBAAAA,EAmCb,iBAiBI,WAAYrb,EAAuBQ,GAHnC,KAAA8a,kBAAoB,GACpB,KAAAC,SAAW,EAGPxnB,KAAKonB,QAAUnb,EACfjM,KAAK+mB,gBAAkBta,CAC3B,CAwGJ,OAtGI,YAAA6I,QAAA,WACI,OAAOtV,KAAKynB,wBAA0BznB,KAAK0nB,oBAC/C,EAEQ,YAAAD,qBAAR,WACI,IAAIhS,GAAO,EAIX,OAHIzV,KAAK2nB,mBACLlS,EAAOzV,KAAK2nB,iBAAiBrS,WAE1BG,CACX,EAGA,YAAAC,UAAA,SAAU1R,G,MAEN,QAFM,IAAAA,IAAAA,EAAA,IAEFhE,gBAAI,EAAJA,KAAM2nB,oBAA0C,QAAtB,EAAA3nB,gBAAI,EAAJA,KAAM2nB,wBAAgB,eAAEjS,UAAU1R,KAAQ2R,EAAiBC,QAErF,OAAO5V,gBAAI,EAAJA,KAAM2nB,iBAAiBjS,UAAU1R,GAgB5C,SAAS4jB,EAAaC,GAClB,IAAIC,EAAe,EATvB,SAAsBC,GAElB,IADA,IAAI/jB,EAAM,EACH+jB,EAAWrS,UAAU1R,KAAS2R,EAAiBC,SAClD5R,IAEJ,OAAOA,EAAM,CACjB,CAGsCgkB,CAAaH,GAAc,EAC7D7jB,GAAY8jB,CAChB,CAEI9nB,KAAK2nB,kBACLC,EAAa5nB,KAAK2nB,kBAOtB,IAAK,IAAIM,EAAS,GAASA,IAAU,CACjC,IAAIC,EAAiBloB,KAAK+mB,gBAAgBrR,UAAUuS,GAEpD,GAAIC,IAAmBvS,EAAiBC,QACpC,OAAOD,EAAiBC,QAE5B,IAAIQ,EAASpW,KAAKonB,QAAQc,GAGtBxZ,EADoB1O,KAAKmoB,aAAa/R,GACdV,UAAU1R,GACtC,GAAI0K,GAAOiH,EAAiBC,QACxB,OAAOlH,EAEXkZ,EAAaM,E,CAGrB,EAEQ,YAAAC,aAAR,SAAqB/R,GACjB,IAAIgS,EAAKvT,MAAM8N,QAAQvM,GAAU,IAAIsQ,EAAqB,WAArBA,EAAqB,aAAItQ,IAAM,KAAIA,EAExE,OADApW,KAAKunB,kBAAkBxiB,KAAKqjB,GACrBA,CACX,EAEQ,YAAAV,mBAAR,WAEI,IADA,IAAIjS,GAAO,GACHA,GAAQzV,KAAK+mB,gBAAgBzR,WAAW,CAC5C,IAAIc,EAASpW,KAAKonB,QAAQpnB,KAAK+mB,gBAAgBtR,QAC/CzV,KAAK2nB,iBAAmB3nB,KAAKmoB,aAAa/R,GAE1CX,EAAOzV,KAAK2nB,iBAAiBrS,S,CAEjC,OAAOG,CACX,EAEA,YAAAA,KAAA,WACI,GAAIzV,KAAKsV,UAEL,OADAtV,KAAKwnB,WACExnB,KAAK2nB,iBAAiBlS,MAErC,EAEA,YAAAM,MAAA,WACI/V,KAAK+mB,gBAAgBhR,QACrB/V,KAAKunB,kBAAkB5N,SAAQ,SAAAyO,GAAM,OAAAA,EAAGrS,OAAH,IACrC/V,KAAKunB,kBAAoB,GACzBvnB,KAAKwnB,SAAW,EAChBxnB,KAAK2nB,iBAAmB,IAC5B,EAEA,YAAA9R,QAAA,WAII,OAHK7V,KAAK2nB,kBACN3nB,KAAKsV,UAEFtV,KAAK2nB,iBAAiB9R,SACjC,EACJ,EA5HA,GAAa,EAAAwS,wBAAAA,EAkIb,8BACY,KAAArpB,KAAiB,EAS7B,QAPI,YAAAqB,QAAA,SAAQkD,GACJvD,KAAKhB,KAAK+F,KAAKxB,EACnB,EAEA,sBAAI,yBAAU,C,IAAd,WACI,OAAOvD,KAAKhB,IAChB,E,gCACJ,EAVA,GAAa,EAAA8H,eAAAA,EAeb,8BACY,KAAA9H,KAAiB,EAS7B,QAPI,YAAAqB,QAAA,SAAQkD,GACJvD,KAAKhB,KAAKspB,QAAQ/kB,EACtB,EAEA,sBAAI,yBAAU,C,IAAd,WACI,OAAOvD,KAAKhB,IAChB,E,gCACJ,EAVA,GAAa,EAAAupB,sBAAAA,EAiBb,8BACI,KAAAC,WAAqC,CAAC,CAO1C,QALI,YAAAnoB,QAAA,SAAQkD,G,YACA4P,EAAkB,QAAZ,EAAA5P,aAAO,EAAPA,EAAU,UAAE,QAAYA,EAClCvD,KAAKwoB,WAAWrV,GAA6B,QAAtB,EAAe,QAAf,EAAAnT,KAAKwoB,kBAAU,eAAGrV,UAAI,QAAI,GACjDnT,KAAKwoB,WAAWrV,GAAKpO,KAAiB,QAAZ,EAAAxB,aAAO,EAAPA,EAAU,UAAE,SAC1C,EACJ,EARA,GAAa,EAAAklB,yBAAAA,EAcb,8BAQA,QAPI,YAAApoB,QAAA,SAAQkD,GAER,EAEA,sBAAI,yBAAU,C,IAAd,WACI,OAAO,IACX,E,gCACJ,EARA,GAAa,EAAAmlB,IAAAA,EAab,8BAEI,KAAAF,WAAqC,CAAC,CAK1C,QAHI,YAAAnoB,QAAA,SAAQkD,G,QACJvD,KAAKwoB,WAAqB,QAAV,EAAAjlB,EAAQ,UAAE,QAAYA,GAAqB,QAAV,EAAAA,EAAQ,UAAE,QAC/D,EACJ,EAPA,GAAa,EAAAjD,oBAAAA,EAYb,8BACI,KAAAkoB,WAAuB,IAAIG,QAK/B,QAHI,YAAAtoB,QAAA,SAAQkD,GACJvD,KAAKwoB,WAAWvb,OAAO1J,EAAQ4P,IAAK5P,EAAQlB,MAChD,EACJ,EANA,GAAa,EAAAumB,kBAAAA,EAWb,8BACI,KAAAJ,WAAuB,IAAIG,QAQ/B,QANI,YAAAtoB,QAAA,SAAQkD,GACJ,IAAIkQ,EAAUlQ,EAAQiQ,oBAClBC,EAAQxQ,aACRjD,KAAKwoB,WAAWvb,OAAO1J,EAAQC,KAAKnB,MAAOoR,EAAQ9P,IAAIJ,EAAQC,MAAMnB,MAE7E,EACJ,EATA,GAAa,EAAAwmB,uBAAAA,EAcb,8BAEI,KAAAC,SAAoC,EAexC,QAbI,YAAAzoB,QAAA,SAAQkD,GACJ,IAAIkQ,EAAUlQ,EAAQiQ,oBAClBC,EAAQxQ,aACRjD,KAAK8oB,SAAS/jB,KAAK,CAACxB,EAAQC,KAAKnB,MAAOoR,EAAQ9P,IAAIJ,EAAQC,MAAMnB,OAE1E,EAEA,sBAAI,yBAAU,C,IAAd,WACI,OAAO,EAAAsD,OAAOC,GAAE,MAAT,EAAAD,OAAM,OAAO3F,KAAK8oB,WAAQ,IAC5BhmB,KAAY,SAAAye,GAAU,OAAAA,EAAOxY,KAAK,IAAZ,IACtB9B,QAAO,SAAC8hB,EAAOC,GAAU,OAACD,EAAOC,GAAOjgB,KAAK,IAApB,IACzBnF,OAAO,IAAIvB,KACpB,E,gCACJ,EAjBA,GAAa,EAAA4mB,yBAAAA,C,inBChgBb,aACA,SAoKA,aAOI,a,IAAY,sDAJZ,KAAArkB,SAAW,EAEH,KAAAD,KAAO,EAGX3E,KAAKqC,MAAQA,CACjB,CAsMJ,OApMW,EAAAuD,GAAP,W,IAAa,sDACT,OAAO,IAAID,EAAM,WAANA,EAAM,aAAO3G,IAAI,IAChC,EAEO,EAAAmB,QAAP,SAAkBnB,GACd,OAAOgB,KAAK4F,GAAE,MAAP5F,KAAI,OAAO0a,OAAOG,KAAK7b,KAAK,IAAE8D,KAAI,SAAAqQ,GAAO,OAACA,EAAKnU,EAAKmU,GAAX,GACpD,EAEO,EAAA+V,aAAP,SAAuBrB,GAEnB,IADA,IAAIxlB,EAAa,GACVwlB,EAAWvS,WACdjT,EAAM0C,KAAK8iB,EAAWpS,QAG1B,OAAO,IAAI9P,EAAM,WAANA,EAAM,aAAItD,IAAK,IAC9B,EAEA,YAAA+S,OAAA,SAAOC,GAEH,OADArV,KAAK4E,QAAUyQ,EACRrV,IACX,EAMA,YAAA2G,OAAA,W,IAAO,sDACH,IAAIwiB,EAAW,CAACnpB,MAAM2G,OAAOyiB,GAC7B,OAAOzjB,EAAOC,GAAE,MAATD,EAAM,OAAOwjB,IAAQ,IAAEjY,SAAQ,SAAA/O,GAAQ,OAAAA,CAAA,GAClD,EAGA,YAAAknB,OAAA,SAAOpI,GACH,IAAK,IAAIjd,EAAM,EAAGA,EAAMhE,KAAKqC,MAAMyB,UAA4B,GAAjB9D,KAAK4E,SAAiBZ,EAAMhE,KAAK4E,WAC1C,IAA7Bqc,EAAGjhB,KAAKqC,MAAM2B,GAAMA,GAD6DA,KAKzF,OAAOhE,IACX,EAGA,YAAAqM,KAAA,SAAK4U,GACDjhB,KAAKqpB,OAAOpI,GACZjhB,KAAK+V,OACT,EAEA,YAAAjT,IAAA,SAAOme,GACEA,IACDA,EAAK,SAACC,GAAe,OAAGA,CAAH,GAEzB,IAAI9W,EAAW,GAKf,OAJApK,KAAKqM,MAAK,SAAClK,GACPiI,EAAIrF,KAAKkc,EAAG9e,GAChB,IAEO,IAAIwD,EAAM,WAANA,EAAM,aAAOyE,IAAG,IAC/B,EAOA,YAAA8G,QAAA,SAA2B+P,GACvB,IAAIvS,EAAM,GAKV,OAJA1O,KAAKqM,MAAK,SAAAlK,GACN,IAAImnB,EAAarI,EAAG9e,GACpBuM,EAAMmG,MAAM8N,QAAQ2G,GAAS5a,EAAI/H,OAAO2iB,GAAS5a,EAAI/H,OAAM,MAAV+H,EAAG,OAAW4a,EAAMjnB,QAAK,GAC9E,IACoBsD,EAAOC,GAAE,MAATD,EAAM,OAAO+I,IAAG,GACxC,EAEA,YAAAtO,OAAA,SAAO6gB,GACH,IAAI7W,EAAgB,GAMpB,OALApK,KAAKqM,MAAK,SAACrN,GACHiiB,EAAGjiB,IACHoL,EAAIrF,KAAK/F,EAEjB,IACO,IAAI2G,EAAM,WAANA,EAAM,aAAOyE,IAAG,IAC/B,EAEA,YAAAnD,OAAA,SAAUga,EAAyBsI,QAAA,IAAAA,IAAAA,EAAA,MAI/B,IAHA,IAAI1P,EAAqB,MAAZ0P,EAAmB,EAAI,EAChCC,EAA0B,MAAZD,EAAmBA,EAAWvpB,KAAKqC,MAAMyB,OAAS9D,KAAKqC,MAAM,GAAK,KAE3E2B,EAAM6V,EAAQ7V,EAAMhE,KAAKqC,MAAMyB,UAA4B,GAAjB9D,KAAK4E,SAAiBZ,EAAMhE,KAAK4E,SAAUZ,IAC1FwlB,EAAOvI,EAAGuI,EAAMxpB,KAAKqC,MAAM2B,IAG/B,OADAhE,KAAK+V,QACE,EAAAlR,SAAST,aAAmColB,EACvD,EAEA,YAAApnB,MAAA,WAEI,OADApC,KAAK+V,QACE/V,KAAKqC,OAASrC,KAAKqC,MAAMyB,OAAS,EAAAe,SAAST,aAAapE,KAAKqC,MAAM,IAAM,EAAAwC,SAASW,MAC7F,EAEA,YAAA0H,KAAA,WAEI,IAAIpJ,EAAS9D,KAAK4E,QAAU,EAAIsQ,KAAKC,IAAInV,KAAK4E,QAAS5E,KAAKqC,MAAMyB,QAAU9D,KAAKqC,MAAMyB,OAEvF,OADA9D,KAAK+V,QACE,EAAAlR,SAAST,aAAaN,EAAS9D,KAAKqC,MAAMyB,EAAS,GAAK,KACnE,EAEA,YAAA2lB,SAAA,SAASxI,GACL,IAAK,IAAIjd,EAAM,EAAGA,EAAMhE,KAAKqC,MAAMyB,UAA4B,GAAjB9D,KAAK4E,SAAiBZ,EAAMhE,KAAK4E,SAAUZ,IACrF,GAAIid,EAAGjhB,KAAKqC,MAAM2B,IACd,OAAO,EAIf,OADAhE,KAAK+V,SACE,CACX,EAEA,YAAAlQ,SAAA,SAASob,GACL,IAAKjhB,KAAKqC,MAAMyB,OACZ,OAAO,EAGX,IADA,IAAI+N,EAAU,EACL7N,EAAM,EAAGA,EAAMhE,KAAKqC,MAAMyB,OAAQE,IACnCid,EAAGjhB,KAAKqC,MAAM2B,KACd6N,IAIR,OADA7R,KAAK+V,QACElE,GAAW7R,KAAKqC,MAAMyB,MACjC,EAEA,YAAA4lB,UAAA,SAAUzI,GAEN,IADA,IAAIpP,EAAU,EACL7N,EAAM,EAAGA,EAAMhE,KAAKqC,MAAMyB,OAAQE,IAClCid,EAAGjhB,KAAKqC,MAAM2B,KACf6N,IAIR,OADA7R,KAAK+V,QACElE,GAAW7R,KAAKqC,MAAMyB,MACjC,EAEA,YAAAqN,KAAA,SAAKwY,GACD,IAAIC,EAAS5pB,KAAKqC,MAAM0N,QAAQoB,KAAKwY,GACrC,OAAOhkB,EAAOC,GAAE,MAATD,EAAM,OAAOikB,IAAM,GAC9B,EAGA,YAAAvpB,QAAA,SAAQwpB,GAGJ,OAFA7pB,KAAKqM,MAAK,SAAArN,GAAQ,OAAA6qB,EAAUxpB,QAAQrB,EAAlB,IAClBgB,KAAK+V,QACE8T,EAAUrB,UACrB,EAGA,YAAAlT,QAAA,WACI,IAAIC,GAAmC,GAAjBvV,KAAK4E,SAAiB5E,KAAK2E,KAAO3E,KAAK4E,QAAU,EACnE4Q,EAAexV,KAAK2E,KAAO3E,KAAKqC,MAAMyB,OAAS,EACnD,QAASyR,GAAmBC,EAChC,EAEA,YAAAC,KAAA,WACI,OAAKzV,KAAKsV,WAGVtV,KAAK2E,MACE3E,KAAKqC,MAAMrC,KAAK2E,MAHZ,IAIf,EAEA,YAAA+Q,UAAA,SAAU1R,GACN,YADM,IAAAA,IAAAA,EAAA,GACFhE,KAAK2E,IAAMX,GAAQhE,KAAKqC,MAAMyB,OACvB,EAAA6R,iBAAiBC,QAErB5V,KAAKqC,MAAMrC,KAAK2E,IAAMX,EACjC,EAGA,YAAC6S,OAAOC,UAAR,sBACI,MAAO,CACHrB,KAAM,WAGF,MAAO,CACHsB,MAHQ,EAAKzB,UAIbjT,MAHM,EAAKoT,OAKnB,EAER,EAMA,YAAAM,MAAA,WACI/V,KAAK2E,KAAO,CAChB,EACJ,EA/MA,GAAa,EAAAgB,OAAAA,EA6Ob,iBAwBI,WAAY8G,GArBZ,KAAA7H,SAAW,EAOX,KAAAD,KAAO,EAeH3E,KAAK6nB,WAAapb,CAEtB,CA2MJ,OA1NW,EAAA7G,GAAP,W,IAAa,sDACT,OAAO,IAAI1F,EAAU,IAAQ,EAAAwmB,sBAAqB,WAArB,EAAAA,sBAAqB,aAAI7iB,IAAM,KAChE,EAEO,EAAA1D,QAAP,SAAkBnB,GACd,OAAOgB,KAAK4F,GAAE,MAAP5F,KAAI,OAAO0a,OAAOG,KAAK7b,KAAK,IAAE8D,KAAI,SAAAqQ,GAAO,OAACA,EAAKnU,EAAKmU,GAAX,GACpD,EAEO,EAAA2W,mBAAP,SAA6BznB,GACzB,OAAO,IAAInC,EAAWmC,EAC1B,EAOA,YAAAiT,QAAA,WACI,OAAItV,KAAK+pB,gBAIF/pB,KAAK6nB,WAAWvS,SAC3B,EAEA,YAAAG,KAAA,WACI,IAAIA,EAAOzV,KAAK6nB,WAAWpS,OAG3B,OADAzV,KAAK2E,MACE8Q,CACX,EAEA,YAAAC,UAAA,SAAU1R,GACN,YADM,IAAAA,IAAAA,EAAA,GACChE,KAAK6nB,WAAWnS,UAAU1R,EACrC,EAIA,YAAA6R,QAAA,WACI,OAAO7V,KAAK6nB,WAAWhS,SAC3B,EAEA,YAAAE,MAAA,WACI/V,KAAK6nB,WAAW9R,QAChB/V,KAAK2E,KAAO,EACZ3E,KAAK4E,SAAW,CACpB,EAMA,YAAA+B,OAAA,W,IAAO,sDAGH,OAAOzG,EAAW0F,GAAE,MAAb1F,EAAU,GAAgBF,MAAI,EAAKopB,IAAQ,IAAElY,SAAQ,SAAA/O,GAAQ,OAAAA,CAAA,GACxE,EAEA,YAAA6nB,WAAA,SAAW/I,GACP,GAAIjhB,KAAKsV,UAAW,CAChB,IAAIyM,EAAY/hB,KAAKyV,OACrB,OAAKwL,EAAGc,GAGEA,EAFC/hB,KAAKgqB,WAAW/I,E,CAI/B,OAAO,IACX,EAEA,YAAA7L,OAAA,SAAOqR,GAEH,OADAzmB,KAAK4E,QAAU6hB,EACRzmB,IACX,EAGA,YAAAK,QAAA,SAAQwpB,GACJ,KAAO7pB,KAAKsV,WAAW,CACnB,IAAI2U,EAAIjqB,KAAKyV,OACboU,EAAUxpB,QAAW4pB,E,CAGzB,OADAjqB,KAAK+V,QACE8T,EAAUrB,UACrB,EAEA,YAAAa,OAAA,SAAOpI,GAAP,WACI,OAAO,IAAI/gB,EAAW,IAAI,EAAAonB,wBAAuB,SAACxhB,GAI9C,OAHyB,IAArBmb,EAAGnb,EAAI,EAAKnB,MACZ,EAAKulB,OAEFpkB,CACX,GAAG9F,MACP,EAEA,YAAAI,OAAA,SAAO6gB,GACH,OAAsB,IAAI/gB,EAAc,IAAI,EAAAinB,yBAA8BlG,EAAIjhB,MAClF,EAEA,YAAA8C,IAAA,SAAOme,GACH,OAAO,IAAI/gB,EAAW,IAAI,EAAAonB,uBAAuBrG,EAAIjhB,MACzD,EAEA,YAAAkR,QAAA,SAAsB+P,GAClB,OAAO,IAAI/gB,EAAgB,IAAI,EAAAmoB,wBAA6BpH,EAAIjhB,MACpE,EAGA,YAAAqM,KAAA,SAAK4U,GACD,KAAOjhB,KAAKsV,YACqB,IAAzB2L,EAAGjhB,KAAKyV,SACRzV,KAAKkqB,OAGblqB,KAAK+V,OACT,EAEA,YAAA9O,OAAA,SAAUga,EAAqBsI,GAC3B,QAD2B,IAAAA,IAAAA,EAAA,OACtBvpB,KAAKsV,UACN,OAAO,EAAAzQ,SAASW,OAEpB,IAAI2kB,EACAC,EAAS,KACb,GAAgB,MAAZb,EACAY,EAASZ,EACTa,EAASpqB,KAAKyV,WACX,CAEH,GADA0U,EAASnqB,KAAKyV,QACTzV,KAAKsV,UACN,OAAO,EAAAzQ,SAAST,aAAa+lB,GAEjCC,EAASpqB,KAAKyV,M,CAGlB,IADA0U,EAASlJ,EAAGkJ,EAAQC,GACbpqB,KAAKsV,WAER6U,EAASlJ,EAAGkJ,EADZC,EAASpqB,KAAKyV,QAIlB,OADAzV,KAAK+V,QACE,EAAAlR,SAAST,aAAa+lB,EACjC,EAEA,YAAAjd,KAAA,WACI,OAAKlN,KAAKsV,UAGHtV,KAAKiH,QAAO,SAACojB,EAAKC,GAAQ,OAAAA,CAAA,IAFtB,EAAAzlB,SAASW,MAGxB,EAEA,YAAApD,MAAA,WAEI,OADApC,KAAK+V,QACA/V,KAAKsV,UAGH,EAAAzQ,SAAST,aAAapE,KAAKyV,QAFvB,EAAA5Q,SAASW,MAGxB,EAEA,YAAAikB,SAAA,SAASxI,GACL,KAAOjhB,KAAKsV,WACR,GAAI2L,EAAGjhB,KAAKyV,QACR,OAAO,EAGf,OAAO,CACX,EAEA,YAAA5P,SAAA,SAASob,GACL,KAAOjhB,KAAKsV,WACR,IAAK2L,EAAGjhB,KAAKyV,QACT,OAAO,EAGf,OAAO,CACX,EAEA,YAAAiU,UAAA,SAAUzI,GACN,KAAOjhB,KAAKsV,WACR,GAAI2L,EAAGjhB,KAAKyV,QACR,OAAO,EAGf,OAAO,CACX,EAEA,YAAAtE,KAAA,SAAKwY,GACD,IAAI9F,EAAM7jB,KAAKK,QAAQ,IAAI,EAAAyG,gBAE3B,OADA+c,EAAMA,EAAI1S,KAAKwY,GACRzpB,EAAW0F,GAAE,MAAb1F,EAAU,OAAO2jB,IAAG,GAC/B,EAEA,sBAAI,oBAAK,C,IAAT,WACI,OAAO7jB,KAAKK,QAAQ,IAAI,EAAAyG,eAC5B,E,gCAEA,YAAC+P,OAAOC,UAAR,sBACI,MAAO,CACHrB,KAAM,WAGF,MAAO,CACHsB,MAHQ,EAAKzB,UAIbjT,MAHM,EAAKoT,OAKnB,EAER,EAMQ,YAAAyU,KAAR,WACIlqB,KAAK2E,IAAM3E,KAAK4E,QAAU,IAC1B5E,KAAK4E,QAAU,CACnB,EAEQ,YAAAmlB,aAAR,WACI,OAAwB,GAAjB/pB,KAAK4E,SAAiB5E,KAAK2E,KAAO3E,KAAK4E,QAAU,CAC5D,EAEJ,EAtOA,GAAa,EAAA1E,WAAAA,C,0jBCpZb,aACA,cAGI,IAAsB,EAAAgF,UACtB,WACI,QAAI,KAAW,IAAAA,YAAWqlB,cAAW,KAAW,IAAArlB,YAAWslB,kBAAwB,IAAAtlB,YAAWslB,eAAgBC,0BAA9G,CACA,IAAMC,EAAIC,aACV,IAAAzlB,YAAWylB,YAAc,CACrBA,YAAa,WACT,OAAOJ,QAAQK,UAAUF,EAAG,GAAI1qB,KAAK6qB,YACzC,GACFF,YAAaA,YAAY5Q,UAAY2Q,EAAE3Q,UAAW4Q,YAAY5Q,UAAU8Q,YAAcF,YAAajQ,OAAOoQ,eAAeH,YAAaD,EANO,CAOlJ,CARD,GAqBJ,iBAkBI,WAAYrlB,GAdZ,KAAA0lB,YAAwCJ,YAMxC,KAAAK,cAA0B,GAStBhrB,KAAKqF,QAAUA,CACnB,CA4IJ,OAnJW,EAAA4lB,YAAP,SAAmB5lB,GACf,OAAO,IAAI6lB,EAAW7lB,EAC1B,EAQA,YAAA8lB,uBAAA,W,IAAuB,sDACnBnrB,KAAKgrB,cAAgBI,CACzB,EAGA,YAAAC,sBAAA,SAAsBC,GAElB,OADAtrB,KAAKurB,kBAAoBD,EAClBtrB,IACX,EAGA,YAAAwrB,yBAAA,SAAyBF,GAErB,OADAtrB,KAAKyrB,qBAAuBH,EACrBtrB,IACX,EAGA,YAAA0rB,oBAAA,SAAoBJ,GAEhB,OADAtrB,KAAK2rB,gBAAkBL,EAChBtrB,IACX,EAGA,YAAA4rB,6BAAA,SAA6BN,GAEzB,OADAtrB,KAAK6rB,yBAA2BP,EACzBtrB,IACX,EAGA,YAAA8rB,gBAAA,SAAgBf,GAEZ,OADA/qB,KAAK+qB,YAAcA,EACZ/qB,IACX,EAGA,YAAA+rB,YAAA,SAAYC,GAER,OADAhsB,KAAKgsB,WAAaA,EACXhsB,IACX,EAGA,YAAAisB,UAAA,SAAUvhB,GACN,GAAI1K,KAAKoI,OACL,MAAM3H,MAAM,2DAGhB,OADAT,KAAK0K,MAAQA,EACN1K,IACX,EAGA,YAAAksB,WAAA,SAAW9jB,GACP,GAAIpI,KAAK0K,MACL,MAAMjK,MAAM,0DAGhB,OADAT,KAAKoI,OAASA,EACPpI,IACX,EAGA,YAAAme,SAAA,sBACI,IAAKne,KAAK0K,QAAU1K,KAAKoI,OACrB,MAAM3H,MAAM,mCAEhB,GAAIT,KAAK0K,MAAO,CAEZ,IAAIyhB,EAAgB,SAAC3oB,GACjB,IAAI4oB,EAAgB,EAAK5oB,GACrB6oB,EAAsB,EAAK3hB,MAAMqP,UAAWvW,GAC5C8oB,EAAgBF,GAAiBC,EACjCC,IACM,EAAK5hB,MAAMqP,UAAWvW,GAAQ,WAC7B4oB,EACCE,EAAclJ,MAAM,EAAA5gB,SAASqE,KAAK7G,OAElCqsB,EAAcjJ,MAAWpjB,KAEjC,EAER,EAEAmsB,EAAc,qBACdA,EAAc,wBACdA,EAAc,mBACdA,EAAc,4BAGVnsB,KAAKgrB,cAAclnB,QACnB4W,OAAO6R,eAAevsB,KAAK0K,MAAMqP,UAAW,qBAAsB,CAC9DpW,IAAG,WACC,OAAO3D,KAAKgrB,aAChB,KAIR,IAAA9lB,YAAWslB,eAAegC,OAAOxsB,KAAKqF,QAASrF,KAAK0K,MAAO1K,KAAKgsB,YAAc,K,KAC3E,CACH,IAAI,EAAMhsB,KACN,EAAgB,SAACwD,EAAcipB,GAC3B,EAAIjpB,IACJ,EAAIA,GAAM4f,MAAM,EAAA5gB,SAASqE,KAAU4lB,GAE3C,GAEA,IAAAvnB,YAAWslB,eAAegC,OAAOxsB,KAAKqF,QAAO,YACzC,mBACI,cAAO,K,OACP,EAAKsD,UAAY,EAAIP,O,CACzB,CA2BJ,OA/B6D,OAOzD,sBAAW,uBAAkB,C,IAA7B,WACI,OAAO,EAAI4iB,aACf,E,gCAGA,YAAAO,kBAAA,WACI,EAAc,oBAAqBvrB,KACvC,EAGA,YAAAyrB,qBAAA,WACI,EAAc,uBAAwBzrB,KAC1C,EAGA,YAAA2rB,gBAAA,WACI,EAAc,kBAAmB3rB,KACrC,EAGA,YAAA6rB,yBAAA,WACI,EAAc,2BAA4B7rB,KAC9C,EAEJ,EA/B6C,CAAgBA,KAAK+qB,aA+B/D/qB,KAAKgsB,YAAc,K,CAE9B,EACJ,EAhKA,GAAa,EAAAd,WAAAA,C,6jBC3Bb,aACA,SACOlqB,EAAW,EAAAD,KAAKC,SACvB,SAOA,cAEI,WAAY0D,EAAwCgoB,QAAA,IAAAA,IAAAA,EAAA,YAApD,IAeoBC,E,OAWZ3rB,EAAS0D,GACT,YAXW,OADCioB,EAYWjoB,GAVZ,KAEgB,EAAA3D,KAAKyY,iBAC5B,WAAM,YAAK,IAAAtU,YAAY0nB,UAAjB,IACN,WAAiB,OAhBjBC,EAAS,IAAIC,cAAc,qBACxBC,OAAQ,EAEH,CACRC,gBAAiB,SAACnc,EAAcoc,GAC5B,OAAOJ,EAAOK,QAAQrc,EAC1B,GATqB,IAGrBgc,CAgBiB,IACnBxqB,MACe2qB,gBAAgBL,EAAWD,KAIX,KAEjC,YAAMhoB,IAAS,IAEvB,CAgCJ,OAjE8B,OAmC1B,YAAAyoB,iBAAA,WACI,OAAOntB,KAAKsC,iBAAiB,eAAeW,WAChD,EAEA,YAAAzC,SAAA,WACI,IAAIkO,EAAM,GAOV,OANA1O,KAAKmD,UAAS,SAAC0G,G,YACPujB,EAAgF,QAAlE,EAAyC,QAA1C,EAA2B,QAA3B,EAAY,QAAZ,GAAC,IAAAloB,mBAAW,eAAEmoB,qBAAa,eAAExC,qBAAa,eAAEyC,kBAAkBzjB,UAAK,QAAIA,aAAI,EAAJA,EAAM8iB,IACxFS,GACF1e,EAAI3J,KAAKqoB,EAEjB,IACO1e,EAAI3F,KAAK,GACpB,EAEA,YAAAwkB,gBAAA,SAAgBC,GACZ,OAAOxtB,KAAKsC,iBAAiB,eAAe8Q,YAAYoa,EAC5D,EAEO,EAAAC,SAAP,SAAgBC,GACZ,OAAO,IAAIC,EAASD,EACxB,EAEO,EAAAE,UAAP,SAAiBF,GACb,OAAO,IAAIC,EAASD,EAAK,YAC7B,EAEO,EAAAG,WAAP,SAAkBH,EAAaI,GAC3B,YAD2B,IAAAA,IAAAA,EAAA,YACpB,IAAIH,EAASD,EAAKI,EAC7B,EACJ,EAjEA,CAA8B,EAAAtrB,UAAjB,EAAAmrB,SAAAA,EAmEA,EAAAI,GAAKJ,C,kBC9FlBK,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAU3kB,KAAKskB,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,OACf,CCtBAG,EAAoBtV,EAAI,WACvB,GAA0B,iBAAfF,WAAyB,OAAOA,WAC3C,IACC,OAAO5Y,MAAQ,IAAIua,SAAS,cAAb,EAGhB,CAFE,MAAOhJ,GACR,GAAsB,iBAAXsH,OAAqB,OAAOA,MACxC,CACA,CAPuB,G,wnBCkBxB,aAAQ,0EAAArW,QAAQ,IAAE,kFAAA2B,gBAAgB,IAAE,mFAAA4N,iBAAiB,IAAE,oEAAA2G,EAAE,IAAE,qEAAAC,GAAG,IAC9D,aAAQ,sEAAA5X,IAAI,IACZ,aAAQ,wEAAA2S,MAAM,IAAE,8EAAAwO,YAAY,IAAE,4EAAAC,UAAU,IAAa,uEAAAhB,KAAK,IAA6C,0EAAAtc,QAAQ,IAAE,+EAAAP,aAAa,IAC9H,aAAQ,oFAAA+f,kBAAkB,IAAY,+EAAAF,aAAa,IACnD,aAAQ,0EAAAwJ,QAAQ,IAAE,oEAAAI,EAAE,IACpB,aAAQ,wEAAApoB,MAAM,IAAE,4EAAAzF,UAAU,IAC1B,aACI,uFAAAwmB,qBAAqB,IACrB,wFAAAY,sBAAsB,IACtB,0FAAAH,wBAAwB,IACxB,yFAAAkB,uBAAuB,IACvB,oFAAA9B,kBAAkB,IAClB,0FAAA0C,wBAAwB,IAGxB,gFAAAniB,cAAc,IACd,qFAAAxG,mBAAmB,IACnB,mFAAAsoB,iBAAiB,IACjB,wFAAAC,sBAAsB,IAI1B,aAAQ,4EAAAqC,UAAU,IAElB,aAAQ,yEAAA5P,OAAO,IAAE,wEAAAwE,MAAM,IAAE,wFAAAnB,sBAAsB,IAAU,0EAAA3D,QAAQ,IACjE,aAAQ,4EAAA1b,UAAU,IAAE,gFAAAoB,cAAc,G","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/CryptoExtensions.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Messaging.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Promise.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/TagBuilder.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///external commonjs \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/global","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/index.ts"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {Crypto, Hash} from \"./Messaging\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {LazyStream} from \"./Stream\";\n\n/*\n * Some crypto implementations which might come in handy\n */\n\n\n/**\n * basic json stringify encryption impl\n * this does not really full encryption except for a standard json stringyfywith an encapsulation json\n *\n * the return value resembles:\n * <pre>\n *     {\n *         encryptedData: <data as string>\n *     }\n * </pre>\n */\nexport class JSONCrypto implements Crypto {\n    decode(data: any): any {\n        if (data?.encryptedData) {\n            return JSON.parse(data.encryptedData);\n        }\n        return data;\n    }\n\n    encode(data: any) {\n        return {\n            encryptedData: JSON.stringify(data)\n        }\n    }\n}\n\n\n/**\n * a class with  timeout functionality which blocks decodes after a certain period of time\n * if the message is not decoded by then\n * We use hash as identifier generation after encryption to make sure\n * a trace was possible\n *\n * The idea behind this is to have a generic wrapper which allows messages with dynamic encryption\n * where keys/salts only exist for a certain period of time before expiring!\n * That way someone who implements such a scheme does not have to take care about the bookeeping mechanisms!\n * Or you can use crypto mechanisms which do not have expiring keys and still expire them automatically\n *\n * I will leave it up to the system integrator to provide a rotating crypto class, because this is highly\n * implementation dependent. But it helps to have a wrapper!\n */\nexport class ExpiringCrypto implements Crypto {\n\n    private static MAX_GC_CYCLES = 10;\n    private gcCycleCnt = 0;\n    private storedMessages: { [key: string]: number } = {};\n    private lastCall = 0;\n\n    /**\n     * @param timeout timeout in miliseconds until a message is expired\n     * @param parentCrypto the embedded decorated crypto algorithm\n     * @param hashSum hashshum implementation to generate a hash\n     */\n    constructor(private timeout: number, private parentCrypto: Crypto, private hashSum: Hash) {\n\n    }\n\n    /**\n     * decode implementation with a timeout hook install\n     * @param data\n     */\n    decode(data: any): any {\n        //if ((this.gcCycleCnt++ % ExpiringCrypto.MAX_GC_CYCLES) === 0) {\n\n        const currTime = new Date().getTime();\n        if(this.gcLimitReached(currTime)) {\n            this.storedMessages = LazyStream\n                .ofAssoc(this.storedMessages)\n                .filter(data => data[1] >= currTime)\n                .collect(new AssocArrayCollector());\n        }\n        this.lastCall = currTime;\n\n\n        let rotatingEncoded = this.hashSum.encode(data);\n        if (!this.storedMessages?.[rotatingEncoded.toString()]) {\n            throw Error(\"An item was tried to be decryted which either was expired or invalid\");\n        }\n        return this.parentCrypto.decode(data);\n    }\n\n    /**\n     * trigger function to determine whether the gc needs to cycle again, this is either time or call based\n     * the gc itself collects only on expiration dates\n     * The idea is to run this operation only occasionally because it is costly\n     * We also could have used timeouts etc.. but those would need shutdown/destroy cleanups\n     *\n     * @param currTime\n     * @private\n     */\n    private gcLimitReached(currTime: number) {\n        return (this.lastCall + this.timeout) < currTime || ((++this.gcCycleCnt) % ExpiringCrypto.MAX_GC_CYCLES == 0);\n    }\n\n    /**\n     * encode with a timeout hook installed\n     * calls the encode of the delegated object\n     *\n     * @param data\n     */\n    encode(data: any): any {\n        let encoded = this.parentCrypto.encode(data);\n        //ok use the hashsum really only to store expirations, theoretically there could be a second message which does not invalidate the first one\n        //but this is very unlikely unless a message is sent over and over again, in this case we have a timeout extension anyway!\n        let rotatingEncoded = this.hashSum.encode(encoded);\n        this.storedMessages[rotatingEncoded.toString()] = (new Date().getTime()) + this.timeout;\n        return encoded;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {\n    ArrayCollector,\n    AssocArrayCollector,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS\n} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport {_global$} from \"./Global\";\nimport objToArray = Lang.objToArray;\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\ninterface IDomQuery {\n    /**\n     * reference to the systems global object\n     * (globalThis, window, global, depending on the environment)\n     */\n    readonly global: any;\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n\n    /**\n     * accumulated top element offsetWidth\n     */\n    readonly offsetWidth: number;\n    /**\n     * accumulated top element offsetHeight\n     */\n    readonly offsetHeight: number;\n    /**\n     * accumulated top element offsetLeft\n     */\n    readonly offsetLeft: number;\n    /**\n     * accumulated top element offsetTop\n     */\n    readonly offsetTop: number;\n\n\n    /**\n     * abbreviation for inputValue\\.value to make\n     * the code terser\n     */\n    val: string | boolean;\n\n    /**\n     * the underlying form elements as DomQuery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * inner html property\n     * setter and getter which works directly on strings\n     */\n    innerHTML: string;\n\n    /**\n     * same as innerHTML\n     * will be removed once\n     * my code is transitioned\n     * @deprecated do not use anymore, user innerHTML instead\n     */\n    innerHtml: string;\n\n    /**\n     * convenience for dq.id.value to make the code a little bit tighter\n     */\n    nodeId: string;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded ( highest level )\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n\n    /**\n     * closest, walks up the dom tree to fid the closest element to match\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchEvent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    lastElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * Runs an eval and keeps the evaluated code in the head\n     * This is a corner condition, where we want to update the head with custom\n     * code and leave the code in (instead of deleting ig)\n     *\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {DomQuery} DomQuery of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    append(elem: DomQuery): DomQuery;\n\n    /**\n     * replace convenience function replaces the domquery elements with the\n     * elements passed as parameter\n     * @param toReplace the replacement elements\n     * @return a reference on the replacement elements\n     */\n    replace(toReplace: DomQuery): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    prepend(elem: DomQuery): DomQuery;\n\n    /**\n     * prepend equivalent to appendTo\n     *\n     * @param elem the element to prepend to\n     */\n    prependTo(elem: DomQuery): DomQuery;\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param charSet\n     */\n    loadScriptEval(src: string, delay: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the DomQuery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery;\n\n    /**\n     * first parents with a matching selector\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery;\n\n    /**\n     * all parents until the selector match stops\n     * @param tagName\n     */\n    parentsWhileMatch(selector: string): DomQuery;\n\n\n    /**\n     * the parent of the elements\n     */\n    parent(): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another DomQuery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the element must be left in the head after eval default === false\n     * @param whiteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky?: boolean, whiteListed?: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinString?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinString?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the sub-nodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    // observable: Observable<DomQuery>;\n\n    // observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc.\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        // filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => {\n            return item != null\n        })\n            .map(item => {\n                return DomQuery.byId(item)\n            }).collect(new ArrayCollector()));\n    }\n\n    get offsetWidth(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get offsetHeight(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get offsetLeft(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get offsetTop(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/\\<\\!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any>LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        const ret = this.lazyStream\n            .map(item => this._mozMatchesSelector(item.getAsElem(0).value, selector))\n            .filter(match => match)\n            .first();\n        return ret.isPresent();\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n               ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                Stream.of(...scriptsToProcess).each(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) // preceding 2, following == 4)\n                .each(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n                const _toReplace = DomQuery.byId(toReplace);\n                const tagName = _toReplace.tagName.orElse(\"\").value;\n                const head = DomQuery.byTagName(\"head\");\n\n                if (tagName && eqi(tagName, \"link\") && eqi(toReplace.getAttribute(\"rel\"), \"stylesheet\")) {\n                    const rel = toReplace.getAttribute(\"rel\");\n                    //if possible we are now replacing the existing elements where we reference this stylesheet\n                    const matches = head.querySelectorAll(`link[rel='stylesheet'][href='${rel}']`);\n\n                    if(matches.length) {\n                        matches.replace(_toReplace);\n                    } else {\n                        head.append(_toReplace);\n                    }\n                } else if (tagName && eqi(tagName, \"style\")) {\n                    let innerText = _toReplace.innerHTML.replace(/\\s+/gi, \"\");\n                    let styles = head.querySelectorAll(\"style\");\n                    styles = styles.stream.filter(style => {\n                        return style.innerHTML.replace(/\\s+/gi, \"\") == innerText;\n                    }).collect(new DomQueryCollector())\n                    if(!styles.length) { //already present\n                        head.append(_toReplace);\n                    }\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n        let finalOptions = Stream.ofAssoc({\n            bubbles: true, cancelable: true\n        }).concat(Stream.ofAssoc(options)).collect(new AssocArrayCollector());\n        \n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Stream.ofAssoc(finalOptions).each(([key, value]): void => {\n                    event[key] = value;\n                });\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\").value;\n    }\n\n    innerText(joinString: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinString), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        target.assign(name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): any {\n        const ret = this.lazyStream.concat(toAttach.lazyStream).collect(new DomQueryCollector());\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return ret.lazyStream.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }).collect(new DomQueryCollector());\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * a standardized message to be sent over the message bus\n */\nimport {Observable, Subject} from \"rxjs\";\nimport {Stream} from \"./Stream\";\nimport {_global$} from \"./Global\";\n\n\n/**\n * generic crypto interface\n * to encrypt messages before they are sent\n * to the message bus oder the underlying bus system\n *\n * The idea is to make it as easy as possible, you can use for instance crypto js to\n * handle everything\n */\nexport interface Crypto {\n    /**\n     * note anything can be passed\n     *\n     * @param data the data to be encrypted\n     * @returns the encrypted data in any format, important is decode must be able to handle it\n     */\n    encode(data: any): any;\n\n    /**\n     * @param data the encrypted data in the format you expect it to be\n     * @returns the unencrypted data\n     */\n    decode(data: any): any;\n}\n\n\n/**\n * generic hash interface which provides\n * exactly one method a hash encode which returns a string hash value of encoded data\n */\nexport interface Hash {\n    encode(encodedData: string): string;\n}\n\n/**\n * Default implementation = no encryption\n */\nexport class NoCrypto implements Crypto {\n    decode(data: any): string {\n        return data;\n    }\n\n    encode(data: any): any {\n        return data;\n    }\n}\n\n//TODO dynamic encryptor which flushes the messages before changing the keys\n//that way we can rotate and change internal crypto keys on the fly\n\nlet noEncryption = new NoCrypto();\n\nexport class Message {\n\n    creationDate?: number;\n    identifier?: string;\n    targetOrigin?: string;\n    encoded: boolean = false;\n\n    constructor(public message: any = {}, targetOrigin = \"*\") {\n        this.targetOrigin = targetOrigin;\n        this.creationDate = new Date().getMilliseconds();\n        this.identifier = new Date().getMilliseconds() + \"_\" + Math.random() + \"_\" + Math.random();\n    }\n}\n\n/**\n * custom dom event wrapping our messages\n */\nclass MessageWrapper implements CustomEventInit<Message> {\n\n    detail?: Message;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n    channel: string;\n\n    constructor(channel: string, message: Message) {\n        this.detail = message;\n        this.bubbles = true;\n        this.cancelable = true;\n        this.composed = true;\n        this.channel = channel;\n    }\n}\n\n\nabstract class BaseBroker {\n\n    static readonly EVENT_TYPE = \"brokerEvent\";\n    /**\n     * we can split the listeners with the system\n     * namespace... and type (aka identifier criteria)\n     */\n    protected messageListeners: any = {};\n    protected subjects: any = {};\n    protected processedMessages: any = {};\n\n    protected cleanupCnt = 0;\n    protected rootElem;\n    protected msgHandler;\n\n    protected readonly TIMEOUT_IN_MS = 1000;\n    protected readonly MSG_EVENT = \"message\";\n\n    //must be public because we also must have the option\n    //to set it outside of the constructor\n    crypto = noEncryption;\n\n\n    abstract register(scopeElement?: any): BaseBroker;\n\n    abstract unregister(): BaseBroker;\n\n    abstract broadcast(channel: string, message: Message | string): BaseBroker;\n\n\n    /**\n     * registers a listener on a channel\n     * @param channel the channel to register the listeners for\n     * @param listener the listener to register\n     */\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.reserveListenerNS(channel);\n\n        //we skip the processed messages, because they originated here\n        //and already are processed\n        this.messageListeners[channel].push((msg: Message) => {\n            if (msg.identifier in this.processedMessages) {\n                return;\n            }\n            if (msg?.encoded || msg?.[\"detail\"]?.encoded) {\n                if (msg?.[\"detail\"]) {\n                    msg[\"detail\"].message = this.crypto.decode(msg[\"detail\"].message);\n                    msg[\"detail\"].encoded = false;\n                } else {\n                    msg.message = this.crypto.decode(msg.message);\n                    msg.encoded = false;\n                }\n\n            }\n            listener(msg);\n        });\n        return this;\n    }\n\n    /**\n     * binding into rxjs\n     * produces a subject which can be used via next calls to send messages\n     * on the other hand we\n     * @param channel\n     */\n    asSubject(channel: string): Subject<Message> {\n        this.reserveSubjectNS(channel);\n        let subject = this.subjects[channel];\n        let oldNext = subject.next;\n\n        subject.next = (msg: Message | MessageWrapper) => {\n            //We use a recursive call to let the broadcaster handle\n            //The wrapper conversion and then again call us here\n            //that way both directions are handled.. next calls the broker\n            //and a broadcast calls next\n            if ((<MessageWrapper>msg)?.detail) {\n                oldNext.call(subject, (<MessageWrapper>msg)?.detail);\n            } else {\n                this.broadcast(channel, <Message>msg);\n            }\n        }\n        return subject;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * returns an observable on the baseBroker\n     * @param channel\n     */\n    asObservable(channel: string): Observable<Message> {\n        return this.asSubject(channel).asObservable();\n    }\n\n    /**\n     * reserves the listener namespace and wildcard namespace for the given identifier\n     * @param identifier\n     * @private\n     */\n    private reserveListenerNS(identifier: string) {\n        if (!this.messageListeners[identifier]) {\n            this.messageListeners[identifier] = [];\n        }\n        if (!this.messageListeners[\"*\"]) {\n            this.messageListeners[\"*\"] = [];\n        }\n    }\n\n    private reserveSubjectNS(identifier: string) {\n        if (!this.subjects[identifier]) {\n            this.subjects[identifier] = new Subject();\n        }\n        if (!this.subjects[\"*\"]) {\n            this.subjects[\"*\"] = new Subject();\n        }\n    }\n\n    /**\n     * unregisters a listener from this channel\n     *\n     * @param channel the channel to unregister from\n     * @param listener the listener to unregister the channel from\n     */\n    unregisterListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.messageListeners[channel] = (this.messageListeners[channel] || []).filter((item: any) => item !== listener);\n        return this;\n    }\n\n    /**\n     * answers a bidirectional message received\n     * usage, the client can use this method, to answer an incoming message in a precise manner\n     * so that the caller sending the bidirectional message knows how to deal with it\n     * this mechanism can be used for global storages where we have one answering entity per channel delivering the\n     * requested data, the request can be done asynchronously via promises waiting for answers\n     *\n     * @param channel the channel the originating message\n     * @param request the requesting message\n     * @param answer the answer to the request\n     */\n    answer(channel: string, request: Message | string, answer: Message): BaseBroker {\n        if ('string' == typeof request) {\n            request = new Message(request);\n        }\n\n        if (BaseBroker.isAnswer(request)) {\n            return;\n        }\n        answer.identifier = BaseBroker.getAnswerId(request);\n        this.broadcast(channel, answer);\n        return this;\n    }\n\n    private static getAnswerId(request: Message) {\n        return \"_r_\" + request.identifier;\n    }\n\n    private static isAnswer(request: Message) {\n        return request.identifier.indexOf(\"_r_\") == 0;\n    }\n\n    /**\n     * idea... a bidirectional broadcast\n     * sends a message and waits for the first answer coming in from one of the receivers\n     * sending the message back with a messageIdentifier_broadCastId answer\n     *\n     * @param channel\n     * @param message\n     */\n    request(channel: string, message: Message | string): Promise<Message> {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        let messageId = message.identifier;\n\n        let ret = new Promise<Message>((resolve, reject) => {\n            let timeout = null;\n            let listener = (message2: Message) => {\n                if (message2.identifier == messageId) {\n                    //broadcast from same source, we do not want\n                    //to deal with it now\n                    return;\n                }\n\n                if (message2.identifier == \"_r_\" + messageId) {\n                    clearTimeout(timeout);\n                    this.unregisterListener(channel, listener);\n                    resolve(message2);\n                }\n            }\n            timeout = setTimeout(() => {\n                this.unregisterListener(channel, listener);\n                reject(\"request message performed, timeout, no return value\");\n            }, 3000);\n            this.registerListener(channel, listener);\n\n        });\n        this.broadcast(channel, message);\n        return ret;\n    }\n\n\n    /**\n     * garbage collects the processed messages queue\n     * usually after one second\n     */\n    protected gcProcessedMessages() {\n        if ((++this.cleanupCnt) % 10 != 0) {\n            return;\n        }\n        let newProcessedMessages: any = {};\n        Object.keys(this.processedMessages).forEach(key => {\n            if (this.messageStillActive(key)) return;\n            newProcessedMessages[key] = this.processedMessages[key];\n        });\n        this.processedMessages = newProcessedMessages;\n    }\n\n    private messageStillActive(key: string): boolean {\n        return this.processedMessages[key] > ((new Date()).getMilliseconds() - this.TIMEOUT_IN_MS);\n    }\n\n    protected markMessageAsProcessed(message: Message) {\n        this.processedMessages[message.identifier] = message.creationDate;\n    }\n}\n\nlet broadCastChannelBrokerGenerator = (name) => {\n    if (_global$()?.BroadcastChannel) {\n        return new (_global$()).BroadcastChannel(name);\n    }\n    throw Error(\"No Broadcast channel in the system, use a shim or provide a factory function\" +\n        \"in the constructor\");\n};\n\nconst DEFAULT_CHANNEL_GROUP = \"brokr\";\n\n/**\n * a broker which hooks into the Broadcast Channel broker\n * either via shim or substitute lib\n */\nexport class BroadcastChannelBroker extends BaseBroker {\n    private openChannels: [{ key: string }, BroadcastChannel] = <any>{};\n    private readonly msgListener: Function;\n\n\n    /**\n     * @param brokerFactory a factory generating a broker\n     * @param channelGroup a group to combine a set of channels\n     * @param crypto a crypto class\n     */\n    constructor(private brokerFactory: Function = broadCastChannelBrokerGenerator, private channelGroup = DEFAULT_CHANNEL_GROUP, public crypto: Crypto = noEncryption) {\n        super();\n        this.msgListener = (messageData: MessageWrapper) => {\n            if (messageData.detail.encoded) {\n                messageData.detail.message = <any>this.crypto.decode(messageData.detail.message);\n                messageData.detail.encoded = false;\n            }\n            let coreMessage = messageData.detail;\n            let channel: string = messageData.channel;\n\n            if (this.messageListeners?.[channel]) {\n                this.messageListeners?.[channel].forEach(listener => {\n                    listener(coreMessage);\n                })\n            }\n            this.markMessageAsProcessed(coreMessage);\n            return true;\n        }\n        this.crypto = crypto;\n        this.register();\n    }\n\n    broadcast(channel: string, message: Message | string, includeOrigin = true): BaseBroker {\n        try {\n            if ('string' == typeof message) {\n                message = new Message(message);\n            }\n            //we now run a quick remapping to avoid\n            //serialisation errors\n            let msgString = JSON.stringify(<Message>message);\n            message = <Message>JSON.parse(msgString);\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n            messageWrapper.detail.encoded = true;\n\n            if (this?.subjects[channel]) {\n                this.subjects[channel].next(messageWrapper);\n            }\n\n            this.openChannels[this.channelGroup].postMessage(messageWrapper);\n            if (includeOrigin) {\n                this.msgListener(messageWrapper);\n            }\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        super.registerListener(channel, listener);\n        return <BaseBroker>this;\n    }\n\n    register(): BaseBroker {\n        if (!this.openChannels[this.channelGroup]) {\n            this.openChannels[this.channelGroup] = this.brokerFactory(this.channelGroup);\n        }\n        this.openChannels[this.channelGroup].addEventListener(\"message\", this.msgListener);\n        return <BaseBroker>this;\n    }\n\n    unregister(): BaseBroker {\n        this.openChannels[this.channelGroup].close();\n        return <BaseBroker>this;\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a broadcast channel broker\n */\nexport class BroadcastChannelBrokerBuilder {\n    private broadCastChannelGenerator: Function = broadCastChannelBrokerGenerator;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withGeneratorFunc(generatorFunc: Function): BroadcastChannelBrokerBuilder {\n        this.broadCastChannelGenerator = generatorFunc;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BroadcastChannelBrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n    withChannelGroup(channelGroup: string): BroadcastChannelBrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BroadcastChannelBrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): BroadcastChannelBroker {\n        let broker = new BroadcastChannelBroker(this.broadCastChannelGenerator, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}\n\n\n/**\n * implementation of a messaging based transport\n */\n\n/**\n * central message broker which uses various dom constructs\n * to broadcast messages into subelements\n *\n * we use the dom event system as transport and iframe and shadow dom mechanisms in a transparent way to\n * pull this off\n *\n * usage\n *\n * broker = new Broker(optional rootElement)\n *\n * defines a message broker within a scope of rootElement (without it is window aka the current isolation level)\n *\n * broker.registerListener(channel, listener) registers a new listener to the current broker and channel\n * broker.unregisterListener(channel, listener) unregisters the given listener\n *\n * broker.broadcast(message, optional direction, optional callBrokerListeners)\n * sends a message (channel included in the message object) in a direction (up, down, both)\n * and also optionally calls the listeners on the same broker (default off)\n *\n * the flow is like\n * up messages are propagated upwards only until it reaches the outer top of the dom\n * downwards, the messages are propagated downwards only\n * both the message is propagated into both directions\n *\n * Usually messages sent from the same broker are not processed within... however by setting\n * callBrokerListeners to true the listeners on the same broker also are called\n * brokers on the same level will get the message and process it automatically no matter what.\n * That way you can exclude the source from message processing (and it is done that way automatically)\n *\n * Isolation levels. Usually every isolation level needs its own broker object registering\n * on the outer bounds\n *\n * aka documents will register on window\n * iframes on the iframe windowObject\n * isolated shadow doms... document\n *\n *\n *\n */\nexport class Broker extends BaseBroker {\n\n    /**\n     * constructor has an optional root element\n     * and an internal name\n     *\n     * @param scopeElement\n     * @param brokerGroup\n     * @param crypto\n     */\n    constructor(scopeElement: HTMLElement | Window | ShadowRoot = window, public brokerGroup = \"brokr\", crypto: Crypto = noEncryption) {\n\n        super();\n\n        /**\n         * message relay.. identifies message events and relays them to the listeners\n         * @param event\n         */\n        let evtHandler = (event: MessageEvent | CustomEvent<Message>) => {\n            let details = (<any>event)?.detail ?? (<MessageEvent>event)?.data?.detail;\n            //TODO possible crypto hook, needs unit testing\n            let channel = ((<any>event)?.data?.channel) ?? ((<any>event)?.channel);\n\n            //javascript loses the type info in certain module types\n            if (details?.identifier && details?.message) {\n                let msg: Message = details;\n                if (msg.identifier in this.processedMessages) {\n                    return;\n                }\n                //coming in from up... we need to send it down\n                //a relayed message always has to trigger the listeners as well\n                if ((<any>event)?.detail) {\n                    this.broadcast(channel, msg);\n                } else {\n                    this.broadcast(channel, msg);\n                }\n\n            }\n        };\n        this.msgHandler = (evt: MessageEvent) => evtHandler(evt);\n        this.crypto = crypto;\n        this.register(scopeElement);\n    }\n\n    /**\n     * register the current broker into a scope defined by wnd\n     * @param scopeElement\n     */\n    register(scopeElement: HTMLElement | Window | ShadowRoot): BaseBroker {\n        this.rootElem = (<any>scopeElement).host ? (<any>scopeElement).host : scopeElement;\n        if ((<any>scopeElement).host) {\n            let host = (<ShadowRoot>scopeElement).host;\n            host.setAttribute(\"data-broker\", \"1\");\n        } else {\n            if (scopeElement?.[\"setAttribute\"])\n                (<any>scopeElement).setAttribute(\"data-broker\", \"1\");\n        }\n\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler, {capture: true});\n        /*dom message usable by iframes*/\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE + this.MSG_EVENT, this.msgHandler, {capture: true});\n        return <any>this;\n    }\n\n    /**\n     * manual unregister function, to unregister as broker from the current\n     * scope\n     */\n    unregister(): BaseBroker {\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler)\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + this.MSG_EVENT, this.msgHandler)\n        return <any>this;\n    }\n\n\n    /**\n     * broadcast a message\n     * the message contains the channel and the data and some internal bookkeeping data\n     *\n     * @param channel the channel to broadcast to\n     * @param message the message dot send\n     * (for instance 2 iframes within the same parent broker)\n     */\n    broadcast(channel: string, message: Message | string): BaseBroker {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        //message.message = this.crypto.encode(message);\n        //message.encoded = true;\n\n        if (this?.subjects[channel]) {\n            let messageWrapper = new MessageWrapper(channel, message);\n            if (!messageWrapper.detail.encoded) {\n                messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n                messageWrapper.detail.encoded = true;\n            }\n            this.subjects[channel].next(messageWrapper);\n        }\n\n        try {\n            this.dispatchUp(channel, message, false, true);\n            //listeners already called\n            this.dispatchDown(channel, message, true, false)\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n\n    private dispatchUp(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.markMessageAsProcessed(message);\n        if (_global$().parent != null) {\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            _global$().parent.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        }\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n    private dispatchSameLevel(channel: string, message: Message) {\n        let event = this.transformToEvent(channel, message, true);\n        //we also dispatch sideways\n        _global$().dispatchEvent(event);\n    }\n\n    //a dispatch of our own should never trigger the listeners hence the default true\n    private dispatchDown(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        let evt = this.transformToEvent(channel, message);\n\n        /*we now notify all iframes lying underneath */\n        Array.prototype.slice.call(document.querySelectorAll(\"iframe\")).forEach((element: HTMLIFrameElement) => {\n            let messageWrapper = new MessageWrapper(channel, message);\n            element.contentWindow.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        });\n\n        Array.prototype.slice.call(document.querySelectorAll(\"[data-broker='1']\")).forEach((element: HTMLElement) => element.dispatchEvent(evt))\n\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n\n    private msgCallListeners(channel: string, message: Message) {\n        let listeners = this.messageListeners[channel];\n        if (listeners?.length) {\n            let callElement = (element: (msg: Message) => void) => {\n                element(message);\n            }\n\n            listeners.forEach(callElement);\n        }\n    }\n\n    private transformToEvent(channel: string, message: Message, bubbles = false): CustomEvent {\n        let messageWrapper = new MessageWrapper(channel, message);\n        messageWrapper.bubbles = bubbles;\n        return Broker.createCustomEvent(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, messageWrapper);\n    }\n\n    private static createCustomEvent(name: string, wrapper: MessageWrapper): any {\n        if ('function' != typeof _global$().CustomEvent) {\n            let e: any = document.createEvent('HTMLEvents');\n            e.detail = wrapper.detail;\n            e.channel = wrapper.channel;\n            e.initEvent(name, wrapper.bubbles, wrapper.cancelable);\n            return e;\n\n        } else {\n            let customEvent = new (_global$()).CustomEvent(name, wrapper);\n            (<any>customEvent).channel = wrapper.channel;\n            return customEvent;\n        }\n\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a dom broker\n */\nexport class BrokerBuilder {\n    private scopeElement: HTMLElement | Window | ShadowRoot = window;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withScopeElement(scopeElement: HTMLElement | Window | ShadowRoot): BrokerBuilder {\n        this.scopeElement = scopeElement;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n\n    withChannelGroup(channelGroup: string): BrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): Broker {\n        let broker = new Broker(this.scopeElement, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {ArrayCollector, AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return Stream.of(...keys)\n            .flatMap(item => {\n                return Stream.of(...item.split(/\\]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            })\n\n            .collect(new ArrayCollector());\n    }\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\nconst ALL_VALUES = \"*\";\n\n\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assings an new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambigous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * returns the first config level as streeam\n     */\n    get stream(): Stream<[string, any]> {\n        return Stream.of(... Object.keys(this.value)).map(key => [key, this.value[key]]);\n    }\n    \n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semy typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        let currAccessPos = null;\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        const ABSENT = \"__ABSENT__\";\n        currAccessPos = this.configDef;\n\n\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos = (Array.isArray(currAccessPos)) ?\n                        Stream.of(...currAccessPos)\n                            .filter(item => !!(item?.[currKey] ?? false))\n                            .map(item => item?.[currKey]).first() :\n                        Optional.fromNullable(currAccessPos?.[currKey] ?? null);\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos)) ?\n                        Stream.of(...currAccessPos)\n                            .filter(item => Array.isArray(item))\n                            .flatMap(item => Stream.of(...item)).first() : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos)) ? Stream.of(...currAccessPos)\n                        .filter(item => !! (item?.[currKey] ?? false))\n                        .map(item => item?.[currKey])\n                        .first():\n                Optional.fromNullable(currAccessPos?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            currAccessPos = currAccessPos.value;\n\n            //no further testing needed, from this point onwards we are on our own\n            if(currAccessPos == CONFIG_ANY) {\n                return;\n            }\n        }\n\n    }\n\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {Optional} from \"./Monad\";\n\nexport enum PromiseStatus {\n    PENDING, FULLFILLED, REJECTED\n}\n\nexport interface IPromise {\n    then(executorFunc: (val: any) => any): IPromise;\n\n    catch(executorFunc: (val: any) => any): IPromise\n\n    finally(executorFunc: () => void): IPromise;\n\n}\n\n/*\n * Promise wrappers for timeout and interval\n */\nexport function timeout(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setTimeout(() => apply(), timeout);\n    }, () => {\n        if (handler) {\n            clearTimeout(handler);\n            handler = null;\n        }\n    });\n}\n\nexport function interval(timeout: number): CancellablePromise {\n    let handler: any = null;\n    return new CancellablePromise((apply: Function, reject: Function) => {\n        handler = setInterval(() => {\n            apply();\n        }, timeout);\n    }, () => {\n        if (handler) {\n            clearInterval(handler);\n            handler = null;\n        }\n    });\n}\n\n/**\n * a small (probably not 100% correct, although I tried to be correct as possible) Promise implementation\n * for systems which do not have a promise implemented\n * Note, although an internal state is kept, this is sideffect free since\n * is value is a function to operate on, hence no real state is kept internally, except for the then\n * and catch calling order\n */\nexport class Promise implements IPromise {\n\n    status = PromiseStatus.PENDING;\n    protected allFuncs: Array<any> = [];\n    private value: (resolve: (val?: any) => void, reject: (val?: any) => void) => void;\n\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void) {\n        //super(executor);\n        this.value = executor;\n        this.value((data: any) => this.resolve(data), (data: any) => this.reject(data));\n    }\n\n    static all(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n        });\n        let executor = () => {\n            promiseCnt++;\n\n            if (promises.length == promiseCnt) {\n                myapply();\n            }\n        };\n        (<any>executor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].finally(executor);\n        }\n        return myPromise;\n    }\n\n    static race(...promises: Array<IPromise>): IPromise {\n\n        let promiseCnt = 0;\n        let myapply: Function;\n        let myreject: Function;\n\n        let myPromise = new Promise((apply: Function, reject: Function) => {\n            myapply = apply;\n            myreject = reject;\n        });\n\n        let thenexecutor = (): IPromise => {\n            if (!!myapply) {\n                myapply();\n            }\n            myapply = null;\n            myreject = null;\n            return null;\n        };\n        (<any>thenexecutor).__last__ = true;\n\n        let catchexeutor = (): IPromise => {\n            if (!!myreject) {\n                myreject();\n            }\n            myreject = null;\n            myapply = null;\n            return null;\n        };\n        (<any>catchexeutor).__last__ = true;\n\n        for (let cnt = 0; cnt < promises.length; cnt++) {\n            promises[cnt].then(thenexecutor);\n            promises[cnt].catch(catchexeutor);\n        }\n        return myPromise;\n    }\n\n    static reject(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val: any) => {\n                    reject(val);\n                });\n            } else {\n                setTimeout(() => {\n                    reject(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    static resolve(reason: any): Promise {\n        let retVal = new Promise((resolve: any, reject: any) => {\n            //not really doable without a hack\n            if (reason instanceof Promise) {\n                reason.then((val) => resolve(val));\n            } else {\n                setTimeout(() => {\n                    resolve(reason);\n                }, 1);\n            }\n        });\n\n        return retVal;\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): Promise {\n        this.allFuncs.push({\"then\": executorFunc});\n        if (catchfunc) {\n            this.allFuncs.push({\"catch\": catchfunc});\n        }\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    catch(executorFunc: (val?: any) => void): Promise {\n        this.allFuncs.push({\"catch\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    finally(executorFunc: () => void): Promise {\n        if ((<any>this).__reason__) {\n            (<any>this).__reason__.finally(executorFunc);\n            return;\n        }\n\n        this.allFuncs.push({\"finally\": executorFunc});\n        this.spliceLastFuncs();\n        return this;\n    }\n\n    protected resolve(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (!this.allFuncs[0].then) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n\n            let funcResult = Optional.fromNullable(fn.then(val));\n\n            if (funcResult.isPresent()) {\n                funcResult = funcResult.flatMap();\n                val = funcResult.value;\n                if (val instanceof Promise) {\n                    //let func = (newVal: any) => {this.resolve(newVal)};\n                    //func.__last__  = true;\n                    //val.then(func);\n                    this.transferIntoNewPromise(val);\n\n                    return;\n                }\n            } else {\n                break;\n            }\n        }\n\n        this.appyFinally();\n        this.status = PromiseStatus.FULLFILLED;\n    }\n\n    protected reject(val?: any) {\n\n        while (this.allFuncs.length) {\n            if (this.allFuncs[0].finally) {\n                break;\n            }\n            let fn = this.allFuncs.shift();\n            if (fn.catch) {\n                let funcResult = Optional.fromNullable(fn.catch(val));\n                if (funcResult.isPresent()) {\n                    funcResult = funcResult.flatMap();\n                    val = funcResult.value;\n                    if (val instanceof Promise) {\n                        //val.then((newVal: any) => {this.resolve(newVal)});\n                        this.transferIntoNewPromise(val);\n                        return;\n                    }\n                    this.status = PromiseStatus.REJECTED;\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n    }\n\n    protected appyFinally() {\n        while (this.allFuncs.length) {\n            let fn = this.allFuncs.shift();\n            if (fn.finally) {\n                fn.finally();\n            }\n        }\n    }\n\n    private spliceLastFuncs() {\n        let lastFuncs = [];\n        let rest = [];\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                if (this.allFuncs[cnt][key].__last__) {\n                    lastFuncs.push(this.allFuncs[cnt]);\n                } else {\n                    rest.push(this.allFuncs[cnt]);\n                }\n            }\n        }\n        this.allFuncs = rest.concat(lastFuncs);\n    }\n\n    private transferIntoNewPromise(val: any) {\n        for (let cnt = 0; cnt < this.allFuncs.length; cnt++) {\n            for (let key in this.allFuncs[cnt]) {\n                val[key](this.allFuncs[cnt][key]);\n            }\n        }\n    }\n}\n\n/**\n * a cancellable promise\n * a Promise with a cancel function, which can be cancellend any time\n * this is useful for promises which use cancellable asynchronous operations\n * note, even in a cancel state, the finally of the promise is executed, however\n * subsequent thens are not anymore.\n * The current then however is fished or a catch is called depending on how the outer\n * operation reacts to a cancel order.\n */\nexport class CancellablePromise extends Promise {\n\n    /**\n     * @param executor asynchronous callback operation which triggers the callback\n     * @param cancellator cancel operation, separate from the trigger operation\n     */\n    constructor(executor: (resolve: (val?: any) => void, reject: (val?: any) => void) => void, cancellator: () => void) {\n        super(executor);\n        this.cancellator = cancellator;\n    }\n\n    cancel() {\n        this.status = PromiseStatus.REJECTED;\n        this.appyFinally();\n        //lets terminate it once and for all, the finally has been applied\n        this.allFuncs = [];\n    }\n\n    then(executorFunc: (val?: any) => any, catchfunc?: (val?: any) => any): CancellablePromise {\n        return <CancellablePromise>super.then(executorFunc, catchfunc);\n    }\n\n    catch(executorFunc: (val?: any) => void): CancellablePromise {\n        return <CancellablePromise>super.catch(executorFunc);\n    }\n\n    finally(executorFunc: () => void): CancellablePromise {\n        return <CancellablePromise>super.finally(executorFunc);\n    }\n\n    private cancellator = () => {\n    };\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\nimport type = Mocha.utils.type;\n\n/**\n * special status of the datasource location pointer\n * if an access, outside of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fullfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * returns the next element in the stream\n     * difference to next is, that the internal data position\n     * is not changed, so next still will deliver the next item from the current\n     * data position. Look ahead is mostly needed internally\n     * by possible endless data constructs which have no fixed data boundary, or index\n     * positions. (aka infinite sets, or flatmapped constructs)\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        //easy access trial\n        if (this?.activeDataSource && this?.activeDataSource?.lookAhead(cnt) != ITERATION_STATUS.EO_STRM) {\n            //this should coverr 95% of all accesses\n            return this?.activeDataSource.lookAhead(cnt);\n        }\n\n        /**\n         * we only can determine how many elems datasource has by going up\n         * (for now this suffices, however not ideal, we might have to introduce a numElements or so)\n         * @param datasource\n         */\n        function howManyElems(datasource: IStreamDataSource<any>): number {\n            let cnt = 1;\n            while (datasource.lookAhead(cnt) !== ITERATION_STATUS.EO_STRM) {\n                cnt++;\n            }\n            return cnt - 1;\n        }\n\n        function readjustSkip(dataSource) {\n            let skippedElems = (dataSource) ? howManyElems(dataSource) : 0;\n            cnt = cnt - skippedElems;\n        }\n\n        if (this.activeDataSource) {\n            readjustSkip(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams subsequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let currDatasource = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            if (currDatasource === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mapped = this.mapFunc(currDatasource as T);\n            //it either comes in as datasource or as array\n            let currentDataSource = this.toDatasource(mapped);\n            let ret = currentDataSource.lookAhead(cnt);\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            readjustSkip(currDatasource);\n\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            ;\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//poliyfill from @webcomponents/webcomponentsjs\nimport {DomQuery} from \"./DomQuery\";\nimport {_global$} from \"./Global\";\n\n\nif (\"undefined\" != typeof _global$) {\n    (function () {\n        if (void 0 === _global$().Reflect || void 0 === _global$().customElements || (<any>_global$().customElements).polyfillWrapFlushCallback) return;\n        const a = HTMLElement;\n        _global$().HTMLElement = {\n            HTMLElement: function HTMLElement() {\n                return Reflect.construct(a, [], this.constructor)\n            }\n        }.HTMLElement, HTMLElement.prototype = a.prototype, HTMLElement.prototype.constructor = HTMLElement, Object.setPrototypeOf(HTMLElement, a);\n    })();\n}\n\n/**\n * beginning custom tag support\n *\n * This api is still experimental\n * and might be interwoven with DomQuery\n * so it is bound to change\n *\n * it follows a builder pattern to allow easier creations\n * with less code of custom tags\n */\nexport class TagBuilder {\n    tagName: string;\n    connectedCallback?: Function;\n    clazz?: CustomElementConstructor;\n    extendsType: CustomElementConstructor = HTMLElement;\n    theOptions: ElementDefinitionOptions | null;\n    markup: string;\n    disconnectedCallback?: Function;\n    adoptedCallback ?: Function;\n    attributeChangedCallback ?: Function;\n    observedAttrs: string[] = [];\n\n    // noinspection JSUnusedGlobalSymbols\n    static withTagName(tagName): TagBuilder {\n        return new TagBuilder(tagName);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withObservedAttributes(...oAttrs) {\n        this.observedAttrs = oAttrs;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withConnectedCallback(callback: Function) {\n        this.connectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withDisconnectedCallback(callback: Function) {\n        this.disconnectedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAdoptedCallback(callback: Function) {\n        this.adoptedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withAttributeChangedCallback(callback: Function) {\n        this.attributeChangedCallback = callback;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withExtendsType(extendsType: CustomElementConstructor) {\n        this.extendsType = extendsType;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withOptions(theOptions) {\n        this.theOptions = theOptions;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withClass(clazz) {\n        if (this.markup) {\n            throw Error(\"Markup already defined, markup must be set in the class\");\n        }\n        this.clazz = clazz;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    withMarkup(markup) {\n        if (this.clazz) {\n            throw Error(\"Class already defined, markup must be set in the class\");\n        }\n        this.markup = markup;\n        return this;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    register() {\n        if (!this.clazz && !this.markup) {\n            throw Error(\"Class or markup must be defined\")\n        }\n        if (this.clazz) {\n\n            let applyCallback = (name: string) => {\n                let outerCallback = this[name];\n                let protoCallback = (<any>this.clazz.prototype)[name];\n                let finalCallback = outerCallback || protoCallback;\n                if (finalCallback) {\n                    (<any>this.clazz.prototype)[name] = function () {\n                        if(outerCallback) {\n                            finalCallback.apply(DomQuery.byId(this));\n                        } else {\n                            protoCallback.apply(<any>this);\n                        }\n                    }\n                }\n            }\n\n            applyCallback(\"connectedCallback\");\n            applyCallback(\"disconnectedCallback\");\n            applyCallback(\"adoptedCallback\");\n            applyCallback(\"attributeChangedCallback\");\n\n            //TODO how do we handle the oAttrs?\n            if (this.observedAttrs.length) {\n                Object.defineProperty(this.clazz.prototype, \"observedAttributes\", {\n                    get(): any {\n                        return this.observedAttrs;\n                    }\n                });\n            }\n\n            _global$().customElements.define(this.tagName, this.clazz, this.theOptions || null);\n        } else {\n            let _t_ = this;\n            let applyCallback = (name: string, scope: any) => {\n                if (_t_[name]) {\n                    _t_[name].apply(DomQuery.byId(<any>scope));\n                }\n            };\n\n            _global$().customElements.define(this.tagName, class extends this.extendsType {\n                constructor() {\n                    super();\n                    this.innerHTML = _t_.markup;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                static get observedAttributes() {\n                    return _t_.observedAttrs;\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                connectedCallback() {\n                    applyCallback(\"connectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                disconnectedCallback() {\n                    applyCallback(\"disconnectedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                adoptedCallback() {\n                    applyCallback(\"adoptedCallback\", this);\n                }\n\n                // noinspection JSUnusedGlobalSymbols\n                attributeChangedCallback() {\n                    applyCallback(\"attributeChangedCallback\", this);\n                }\n\n            }, this.theOptions || null);\n        }\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\nimport {_global$} from \"./Global\";\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new (_global$()).DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (_global$())?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","module.exports = require(\"rxjs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport {DomQuery, ElementAttribute, DomQueryCollector, DQ, DQ$} from \"./DomQuery\";\nexport {Lang} from \"./Lang\";\nexport {Config, CONFIG_VALUE, CONFIG_ANY, ConfigDef, Monad, IValueHolder, IFunctor, IMonad, IIdentity, Optional, ValueEmbedder} from \"./Monad\";\nexport {CancellablePromise, IPromise, PromiseStatus} from \"./Promise\";\nexport {XMLQuery, XQ} from \"./XmlQuery\";\nexport {Stream, LazyStream, IteratableConsumer, IStream} from \"./Stream\";\nexport {\n    ArrayStreamDataSource,\n    MappedStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    SequenceDataSource,\n    QueryFormStringCollector,\n    IStreamDataSource,\n    ICollector,\n    ArrayCollector,\n    AssocArrayCollector,\n    FormDataCollector,\n    QueryFormDataCollector,\n} from \"./SourcesCollectors\";\n\n\nexport {TagBuilder} from \"./TagBuilder\";\n\nexport {Message, Broker, BroadcastChannelBroker, Crypto, NoCrypto, Hash} from \"./Messaging\";\nexport {JSONCrypto, ExpiringCrypto} from \"./CryptoExtensions\";\n\n\n"],"names":["decode","data","encryptedData","JSON","parse","encode","stringify","JSONCrypto","timeout","parentCrypto","hashSum","gcCycleCnt","storedMessages","lastCall","currTime","Date","getTime","this","gcLimitReached","LazyStream","ofAssoc","filter","collect","AssocArrayCollector","rotatingEncoded","toString","Error","ExpiringCrypto","MAX_GC_CYCLES","encoded","ALLOWED_SUBMITTABLE_ELEMENTS","trim","Lang","isString","eqi","equalsIgnoreCase","objToArray","waitUntilDom","root","condition","options","attributes","childList","subtree","interval","Promise","success","error","observer","MUT_ERROR","findElement","childNodes","item","first","value","querySelectorAll","foundElement","DomQuery","MutationObserver","setTimeout","disconnect","mutationList","found","map","mut","target","isPresent","clearTimeout","eachElem","observe","setInterval","clearInterval","element","name","defaultVal","val","get","orElse","values","length","getAttribute","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","style","Style","DEFAULT_WHITELIST","rootNode","pos","_limits","Optional","isAbsent","push","getAsElem","allElems","_global$","getIf","isTag","tagName","nodeName","toLowerCase","absent","inputValue","id","Stream","of","allMatch","el","checked","newChecked","querySelectorAllDeep","queryStr","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","childNodeArr","concat","asArray","byId","ArrayCollector","elem","offsetWidth","reduce","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","selector","document","indexOf","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","globalEvalSticky","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","search","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","closest","_closestDeep","_closest","includeRoot","res","subItems","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","newInnerHTML","dispatchEvent","evt","retArr","newInnerHtml","filterSelector","matched","_mozMatchesSelector","lazyStream","match","selectorStage","nodeSelector","func","len","firstElem","lastElem","each","replace","toReplace","asElem","parent","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","insertBefore","insertAfter","append","last","lastNode","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","applyNonce","appendTo","orElseLazy","loadScriptEval","src","delay","_loadScriptEval","loadScriptEvalSticky","existingItem","existingElement","nextSibling","toInsertParams","insertElem","elseValue","allParents","ret","firstParent","parentsWhileMatch","host","copyAttrs","sourceItem","sourceNode","attrs","resolveAttributeHolder","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","sticky","whitelisted","evalCollectedScripts","scriptsToProcess","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","substring","stream","flatMap","sort","node1","node2","compareDocumentPosition","e","console","message","description","_toReplace","rel","matches","styles","DomQueryCollector","execCss","click","fireEvent","addEventListener","listener","removeEventListener","eventName","finalOptions","bubbles","cancelable","ownerDocument","nodeType","EventClass","Event","global","MouseEvent","KeyboardEvent","synthetic","createEventObject","key","textContent","joinString","text1","text2","encodeFormElement","toMerge","Config","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","assign","Array","from","reduced","subNodes","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","ITERATION_STATUS","EO_STRM","current","BEF_STRM","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","idx","notFound","prependTo","prepend","foundNodes","selectors","split","cnt2","levelSelector","toMatch","prototypeOwner","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","i","srcNode","createSourceNode","nonceCheck","marker","now","random","attrName","DQ","DQ$","globalThis","window","g","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","forEach","obj","offset","pack","prototype","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","Object","theArgs","nextSource","keys","nextKey","hasOwnProperty","NoCrypto","noEncryption","targetOrigin","creationDate","getMilliseconds","identifier","Message","channel","detail","composed","messageListeners","subjects","processedMessages","cleanupCnt","TIMEOUT_IN_MS","MSG_EVENT","crypto","registerListener","reserveListenerNS","msg","asSubject","reserveSubjectNS","subject","oldNext","broadcast","asObservable","Subject","unregisterListener","answer","request","BaseBroker","isAnswer","getAnswerId","messageId","resolve","reject","message2","gcProcessedMessages","newProcessedMessages","messageStillActive","markMessageAsProcessed","EVENT_TYPE","broadCastChannelBrokerGenerator","BroadcastChannel","DEFAULT_CHANNEL_GROUP","brokerFactory","channelGroup","openChannels","msgListener","messageData","coreMessage","register","includeOrigin","msgString","messageWrapper","MessageWrapper","postMessage","unregister","close","BroadcastChannelBroker","broadCastChannelGenerator","listeners","withGeneratorFunc","generatorFunc","withListener","withChannelGroup","withCrypto","build","broker","listenerItem","BroadcastChannelBrokerBuilder","scopeElement","brokerGroup","msgHandler","event","details","evtHandler","rootElem","Broker","capture","dispatchUp","dispatchDown","ignoreListeners","callBrokerListeners","msgCallListeners","dispatchSameLevel","transformToEvent","contentWindow","createCustomEvent","wrapper","CustomEvent","createEvent","initEvent","customEvent","withScopeElement","BrokerBuilder","_value","fn","inval","Monad","preprocessKeys","currentPos","currKey","keyVal","arrPos","arrayIndex","getIfPresent","toJson","start","parseInt","resolver","newVal","alternative","ConfigEntry","CONFIG_VALUE","CONFIG_ANY","configDef","shallowCopy$","deepCopy$","shallowMerge","other","overwrite","withAppend","isArray","noKeys","accessPath","assertAccessPath","lastKey","pathExists","buildPath","finalKeyArrPos","retVal","apply","appendIf","assignIf","setVal","currAccessPos","ERR_ACCESS_PATH","parentVal","parentPos","alloc","arr","length1","length2","isArrayPos","tempVal","isNoArray","PromiseStatus","handler","CancellablePromise","executor","status","PENDING","allFuncs","all","myapply","promiseCnt","myPromise","promises","__last__","finally","race","myreject","thenexecutor","catchexeutor","then","catch","reason","executorFunc","catchfunc","spliceLastFuncs","__reason__","shift","funcResult","transferIntoNewPromise","appyFinally","FULLFILLED","REJECTED","lastFuncs","rest","cancellator","cancel","total","SequenceDataSource","dataPos","max","ArrayStreamDataSource","filterFunc","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","lookupVal","loop","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","readjustSkip","dataSource","skippedElems","datasource","howManyElems","dsLoop","currDatasource","toDatasource","ds","FlatMapStreamDataSource","unshift","InverseArrayCollector","finalValue","ArrayAssocArrayCollector","Run","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ofDataSource","toConcat","toAppend","onElem","strmR","startVal","val1","anyMatch","noneMatch","comparator","newArr","collector","ofStreamDataSource","isOverLimits","nextFilter","t","stop","value1","value2","el1","el2","Reflect","customElements","polyfillWrapFlushCallback","a","HTMLElement","construct","constructor","setPrototypeOf","extendsType","observedAttrs","withTagName","TagBuilder","withObservedAttributes","oAttrs","withConnectedCallback","callback","connectedCallback","withDisconnectedCallback","disconnectedCallback","withAdoptedCallback","adoptedCallback","withAttributeChangedCallback","attributeChangedCallback","withExtendsType","withOptions","theOptions","withClass","withMarkup","applyCallback","outerCallback","protoCallback","finalCallback","defineProperty","define","scope","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","serialized","XMLSerializer","serializeToString","parserErrorText","joinstr","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}