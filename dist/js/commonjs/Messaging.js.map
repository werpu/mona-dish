{"version":3,"file":"Messaging.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/AssocArray.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///external commonjs \"rxjs\"","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Messaging.ts"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * various helpers to deal with associative\n * arrays. If someone feels uncomfortable using\n * The config system, this is similar!\n */\nimport {IValueHolder} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * A nop as assign functionality (aka ignore assign)\n */\nconst IGNORE_ASSIGN: IValueHolder<any> = new (class {\n    set value(value: any | Array<any>) {\n    }\n})();\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assign<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let assigner: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            lastPathItem.target[lastPathItem.key] = value;\n        }\n    })();\n    return assigner;\n}\n\n\nexport function append<T>(target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    const lastPathItem = buildPath(target, ...accessPath);\n    let appender: IValueHolder<T> = new (class {\n        set value(value: T | Array<T>) {\n            if(!Array.isArray(value)) {\n                value = [value];\n            }\n            if(!lastPathItem.target[lastPathItem.key]) {\n                lastPathItem.target[lastPathItem.key] = value\n            } else {\n                if(!Array.isArray(lastPathItem.target[lastPathItem.key])) {\n                    lastPathItem.target[lastPathItem.key] = [lastPathItem.target[lastPathItem.key]];\n                }\n                lastPathItem.target[lastPathItem.key].push(...value);\n            }\n        }y\n    })();\n    return appender;\n}\n\n/**\n * uses the known pattern from config\n * assign(target, key1, key2, key3).value = value;\n * @param target\n * @param keys\n */\nexport function assignIf<T>(condition: boolean, target: {[key: string]: any}, ...accessPath: string[]): IValueHolder<T> {\n    if (accessPath.length < 1) {\n        return IGNORE_ASSIGN;\n    }\n    return assign(target, ...accessPath);\n}\n\n\nfunction keyVal(key: string): string {\n    let start = key.indexOf(\"[\");\n\n    if (start >= 0) {\n        return key.substring(0, start);\n    } else {\n        return key;\n    }\n}\n\nfunction arrayIndex(key: string): number {\n    let start = key.indexOf(\"[\");\n    let end = key.indexOf(\"]\");\n    if (start >= 0 && end > 0 && start < end) {\n        return parseInt(key.substring(start + 1, end));\n    } else {\n        return -1;\n    }\n}\n\nfunction isArrayPos(currKey: string, arrPos: number): boolean {\n    return currKey === \"\" && arrPos >= 0;\n}\n\nfunction isNoArray(arrPos: number): boolean {\n    return arrPos == -1;\n}\n\nfunction alloc(arr: Array<any>, length: number) {\n    let toAdd = [];\n    toAdd.length = length;\n    toAdd[length - 1] = {};\n    arr.push(...toAdd);\n}\n\nfunction preprocessKeys(...keys): string[] {\n    return new Es2019Array(...keys)\n        .flatMap(item => {\n            return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                .map(item => {\n                    item = item.replace(/^\\s+|\\s+$/g, \"\");\n                    if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                        item = \"[\" + item;\n                    }\n                    if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                        item = item + \"]\";\n                    }\n                    return item;\n                })\n        });\n}\n\n/**\n * builds up a path\n * @param target\n * @param accessPath\n * @returns the last assignable entry\n */\nfunction buildPath(target, ...accessPath: string[]): { target, key } {\n    let val = target;\n    let parentVal = target;\n    let targetVal = val;\n    let parentPos = -1;\n    let targetKey = null;\n    accessPath = preprocessKeys(...accessPath);\n    for (let cnt = 0; cnt < accessPath.length; cnt++) {\n        let currKey = keyVal(accessPath[cnt]);\n        let arrPos = arrayIndex(accessPath[cnt]);\n\n        if (isArrayPos(currKey, arrPos)) {\n            targetVal[targetKey] = [];\n            alloc(targetVal[targetKey], arrPos + 1);\n            parentVal = targetVal[targetKey];\n            val = targetVal[targetKey][arrPos];\n            targetKey = arrPos;\n            parentPos = arrPos;\n            continue;\n        }\n\n        let tempVal = val?.[currKey];\n        if (isNoArray(arrPos)) {\n            if ('undefined' == typeof tempVal) {\n                tempVal = val[currKey] = {};\n            } else {\n                val = tempVal;\n            }\n        } else {\n            let arr = (tempVal instanceof Array) ? tempVal : [];\n            alloc(arr, arrPos + 1);\n            val[currKey] = arr;\n            tempVal = arr[arrPos];\n        }\n        parentVal = val;\n        parentPos = arrPos;\n        val = tempVal;\n        targetKey = arrPos == -1 ? currKey : arrPos;\n        targetVal = arrPos == -1 ? parentVal: parentVal[currKey];\n    }\n    // clear off the last value, it is not set yet\n    targetVal[targetKey] = null;\n    return {target: targetVal, key: targetKey};\n}\n\nexport function deepCopy(fromAssoc: {[key: string]: any}): {[key: string]: any} {\n    return JSON.parse(JSON.stringify(fromAssoc));\n}\n\n/**\n * simple left to right merge\n *\n * @param assocArrays\n */\nexport function simpleShallowMerge(...assocArrays) {\n   return shallowMerge(true, false, ...assocArrays);\n}\n\n/**\n * Shallow merge as in config\n *\n * @param overwrite\n * @param withAppend\n * @param assocArrays\n */\nexport function shallowMerge(overwrite = true, withAppend = false, ...assocArrays) {\n    let target: {[key: string]: any} = {};\n    assocArrays.map(arr => {\n        return {arr, keys: Object.keys(arr)};\n    }).forEach(({arr, keys}) => {\n        keys.forEach(key => {\n            if(overwrite || !target?.[key]) {\n                if(!withAppend) {\n                    target[key] = arr[key];\n                } else {\n                    if (Array.isArray(arr[key])) {\n                        if('undefined' == typeof target?.[key]) {\n                            target[key] = new Es2019Array(...arr[key])\n                        } else if(!Array.isArray(target[key])) {\n                            let oldVal = target[key];\n                            target[key] = new Es2019Array(...[]);\n                            target[key].push(oldVal);\n                            target[key].push(...arr[key]);\n                        } else {\n                            target[key].push(...arr[key]);\n                        }\n                        //new Es2019Array(...arr[key]).forEach(item => this.append(key).value = item);\n                    } else {\n                        if('undefined' == typeof target?.[key]) {\n                            target[key] = arr[key];\n                        } else if(!Array.isArray(target[key])) {\n                            let oldVal = target[key];\n                            target[key] = new Es2019Array(...[]);\n                            target[key].push(oldVal);\n                            target[key].push(arr[key]);\n                        } else {\n                            target[key].push(arr[key]);\n                        }\n                    }\n                }\n            }\n        })\n    });\n    return target;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\n\nimport {ICollector, IStreamDataSource, ITERATION_STATUS} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport {_global$} from \"./Global\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport objToArray = Lang.objToArray;\nimport {append, assign, simpleShallowMerge} from \"./AssocArray\";\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\ninterface IDomQuery {\n    /**\n     * reference to the systems global object\n     * (globalThis, window, global, depending on the environment)\n     */\n    readonly global: any;\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n\n    /**\n     * accumulated top element offsetWidth\n     */\n    readonly offsetWidth: number;\n    /**\n     * accumulated top element offsetHeight\n     */\n    readonly offsetHeight: number;\n    /**\n     * accumulated top element offsetLeft\n     */\n    readonly offsetLeft: number;\n    /**\n     * accumulated top element offsetTop\n     */\n    readonly offsetTop: number;\n\n\n    /**\n     * abbreviation for inputValue\\.value to make\n     * the code terser\n     */\n    val: string | boolean;\n\n    /**\n     * the underlying form elements as DomQuery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: any;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: any;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * inner html property\n     * setter and getter which works directly on strings\n     */\n    innerHTML: string;\n\n    /**\n     * same as innerHTML\n     * will be removed once\n     * my code is transitioned\n     * @deprecated do not use anymore, user innerHTML instead\n     */\n    innerHtml: string;\n\n    /**\n     * convenience for dq.id.value to make the code a little tighter\n     */\n    nodeId: string;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded ( highest level )\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n\n    /**\n     * closest, walks up the dom tree to fid the closest element to match\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchEvent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    lastElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * Runs an eval and keeps the evaluated code in the head\n     * This is a corner condition, where we want to update the head with custom\n     * code and leave the code in (instead of deleting ig)\n     *\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {DomQuery} DomQuery of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    append(elem: DomQuery): DomQuery;\n\n    /**\n     * replace convenience function replaces the domquery elements with the\n     * elements passed as parameter\n     * @param toReplace the replacement elements\n     * @return a reference on the replacement elements\n     */\n    replace(toReplace: DomQuery): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    prepend(elem: DomQuery): DomQuery;\n\n    /**\n     * prepend equivalent to appendTo\n     *\n     * @param elem the element to prepend to\n     */\n    prependTo(elem: DomQuery): DomQuery;\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param charSet\n     */\n    loadScriptEval(src: string, delay: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the DomQuery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery;\n\n    /**\n     * first parents with a matching selector\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery;\n\n    /**\n     * all parents until the selector match stops\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery;\n\n\n    /**\n     * the parent of the elements\n     */\n    parent(): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another DomQuery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the element must be left in the head after eval default === false\n     * @param whiteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky?: boolean, whiteListed?: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinString?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinString?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): {[key: string]: any};\n\n    /**\n     * fetches the sub-nodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    // observable: Observable<DomQuery>;\n\n    // observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    get stream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    get lazyStream(): any {\n        throw Error(\"Not implemented, include Stream.ts for this to work\")\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return new Es2019Array(...this.values).every(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n\n    get asArray(): DomQuery[] {\n        // filter not supported by IE11\n        let items = new Es2019Array(...this.rootNode).filter(item => {\n            return item != null\n        }).map(item => {\n            return DomQuery.byId(item)\n        });\n        return items as DomQuery[];\n    }\n\n    get offsetWidth(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetHeight(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetLeft(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetTop(): number {\n        return new Es2019Array(this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as any).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get asNodeArray(): Array<Element> {\n        return new Es2019Array(...this.rootNode.filter(item => item != null));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/<!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(...\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(((item) => id == item.id) as any)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = new Es2019Array(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce((reduction: any, item: Element) => reduction.concat([item]), res);\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        return this.asArray\n            .some(item => this._mozMatchesSelector(item.getAsElem(0).value, selector));\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        new Es2019Array(...this.rootNode)\n            .forEach((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                new Es2019Array(...scriptsToProcess).forEach(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.asArray\n                .flatMap(item => [...item.values])\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) // preceding 2, following == 4)\n                .forEach(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n            const _toReplace = DomQuery.byId(toReplace);\n            const tagName = _toReplace.tagName.orElse(\"\").value;\n            const head = DomQuery.byTagName(\"head\");\n\n            if (tagName && eqi(tagName, \"link\") && eqi(toReplace.getAttribute(\"rel\"), \"stylesheet\")) {\n                const rel = toReplace.getAttribute(\"rel\");\n                //if possible we are now replacing the existing elements where we reference this stylesheet\n                const matches = head.querySelectorAll(`link[rel='stylesheet'][href='${rel}']`);\n\n                if(matches.length) {\n                    matches.replace(_toReplace);\n                } else {\n                    head.append(_toReplace);\n                }\n            } else if (tagName && eqi(tagName, \"style\")) {\n                let innerText = _toReplace.innerHTML.replace(/\\s+/gi, \"\");\n                let styles = head.querySelectorAll(\"style\");\n                let filteredStyles = styles.asArray.filter(style => {\n                    return style.innerHTML.replace(/\\s+/gi, \"\") == innerText;\n                });\n                styles = new DomQuery(...filteredStyles);\n                if(!styles.length) { //already present\n                    head.append(_toReplace);\n                }\n            }\n        };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.asArray\n            .flatMap(item => [...item.values])\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .forEach(item => execCss(item as HTMLElement));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n\n        let finalOptions: any = {\n            bubbles: true, cancelable: true\n        }\n        finalOptions = simpleShallowMerge(finalOptions, options);\n\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Object.keys(finalOptions).forEach(key => event[key] = finalOptions[key]);\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\");\n    }\n\n    innerText(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => {\n                return [text1, text2].join(joinString)\n            }, \"\");\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = {}): {[key: string]: any} {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = simpleShallowMerge(toMerge);\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                append(target, name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        assign(target, name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        append(target, name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res = this.asArray\n            .flatMap( item => {\n                return item.childNodes.asArray;\n            })\n            .filter(item => {\n                return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n            })\n            .reduce((reduced: Array<any>, item: DomQuery) => {\n                reduced.push((<any>item?.value?.value)?.data ?? \"\");\n                return reduced;\n            }, []);\n        /*let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;*/\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): DomQuery {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): DomQuery {\n        let domQueries = this.asArray;\n        const ret = new DomQuery(...domQueries.concat(toAttach.asArray));\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return new DomQuery(...ret.asArray.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }));\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(...objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\n\n\n\n\n\nclass Es2019Array_<T>  extends Array<T>{\n\n    _another: T[];\n\n    constructor(...another: T[]) {\n        super(...another);\n        if((another as any)._another)  {\n            this._another = (another as any)._another;\n        } else {\n            this._another = another;\n        }\n\n        //for testing it definitely runs into this branch because we are on es5 level\n        //if (!(<any>Array.prototype).flatMap) {\n            this.flatMap = (flatMapFun) => this._flatMap(flatMapFun) as any;\n        //}\n        //if (!(<any>Array.prototype).flat) {\n            this.flat = (flatLevel: number = 1) => this._flat(flatLevel);\n        //}\n    }\n\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[] {\n        const ret = Array.prototype.map.call(this._another, callbackfn, thisArg);\n        return new (_Es2019Array as any) (... ret);\n    }\n\n    concat(...items): T[] {\n        const ret = Array.prototype.concat.call(this._another, ...items);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    reverse(): T[] {\n        const ret = Array.prototype.reverse.call(this._another);\n        return new (_Es2019Array as any)(... ret);\n    }\n\n    slice(start?: number, end?: number): T[] {\n        const ret = Array.prototype.slice.call(this._another, start, end);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        const ret = Array.prototype.splice.call(this._another, start, deleteCount);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        const ret = Array.prototype.filter.call(this._another, predicate, thisArg);\n        return new (_Es2019Array as any)(...ret);\n    }\n\n\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n        const ret = Array.prototype.reduce.call(this._another, callbackfn, initialValue);\n        return ret;\n    }\n\n    /*reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T {\n        const ret = Array.prototype.reduceRight.call(callbackfn, initialValue);\n        return ret;\n    }*/\n\n    private _flat(flatDepth = 1) {\n        return this._flatResolve(this._another, flatDepth);\n    }\n\n    private _flatResolve(arr, flatDepth = 1) {\n        //recursion break\n        if (flatDepth == 0) {\n            return arr;\n        }\n        let res = [];\n\n        let reFlat = item => {\n            item = Array.isArray(item) ? item : [item];\n            let mapped = this._flatResolve(item, flatDepth - 1);\n            res = res.concat(mapped);\n        };\n        arr.forEach(reFlat)\n\n        return new Es2019Array(...res);\n    }\n\n    private _flatMap(mapperFunction: Function): any {\n        let res = this.map(item => mapperFunction(item));\n        return this._flatResolve(res);\n    }\n}\n\n//let _Es2019Array = function<T>(...data: T[]) {};\n\n//let oldProto = Es2019Array.prototype;\n\nexport function _Es2019Array<T>(...data: T[]): Es2019Array_<T> {\n    let ret = new Es2019Array_<T>(...data);\n    let proxied = new Proxy<Es2019Array_<T>>(ret, {\n        get(target: Es2019Array_<unknown>, p: string | symbol, receiver: any): any {\n            if(\"symbol\" == typeof p) {\n\n                return target._another[p];\n            }\n            if(!isNaN(parseInt(p as string))) {\n                return target._another[p];\n            } else {\n                return target[p];\n            }\n        },\n\n        set(target, property, value): boolean {\n            target[property] = value;\n            target._another[property] = value;\n            return true;\n        }\n\n    });\n    return proxied;\n};\n\n/**\n * this is the switch between normal array and our shim\n * the shim is only provided in case the native browser\n * does not yet have flatMap support on arrays\n */\nexport var Es2019Array: any = (Array.prototype.flatMap) ? function<T>(...data: T[]): T[] {\n    return data;\n} : _Es2019Array;","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return new Es2019Array(...pack.concat(Array.prototype.slice.call(obj, offset)));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        new Es2019Array(...other.getIf(key).value).forEach(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos =  Array.isArray(currAccessPos.value) ?\n                         Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !! (item?.[currKey] ?? false);\n                        })?.[currKey])  :\n                Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if(currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let toAdd = [];\n            toAdd.length = length;\n            toAdd[length - 1] = {};\n            arr.push(...toAdd);\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Config} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {Config, IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource, calculateSkips,\n    FilteredStreamDatasource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource, MultiStreamDatasource\n} from \"./SourcesCollectors\";\nimport {DomQuery} from \"./DomQuery\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n\n        let lookAhead = this?.activeDataSource?.lookAhead(cnt);\n        if (this?.activeDataSource && lookAhead != ITERATION_STATUS.EO_STRM) {\n            //this should cover 95% of all cases\n            return lookAhead;\n        }\n\n        if (this.activeDataSource) {\n            cnt -= calculateSkips(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams sub-sequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them, so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let datasourceData = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            //no embedded data anymore? we are done, data\n            //can either be a scalar an array or another datasource\n            if (datasourceData === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mappedData = this.mapFunc(datasourceData as T);\n\n            //it either comes in as datasource or as array\n            //both cases must be unified into a datasource\n            let currentDataSource = this.toDatasource(mappedData);\n            //we now run again  a lookahead\n            let ret = currentDataSource.lookAhead(cnt);\n            //if the value is found then we are set\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            //reduce the next lookahead by the number of elements\n            //we are now skipping in the current data source\n            cnt -= calculateSkips(currentDataSource);\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns the currently element selected in the stream\n     */\n    current(): T | ITERATION_STATUS\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T>, IStreamDataSource<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    static ofDomQuery(value: DomQuery): Stream<DomQuery> {\n        return Stream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): Stream<[string, any]> {\n        return Stream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    current(): T | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        if(this.pos >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos];\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    static ofDomQuery(value: DomQuery): LazyStream<DomQuery> {\n        return LazyStream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): LazyStream<[string, any]> {\n        return LazyStream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.ofStreamDataSource(new MultiStreamDatasource(this, toAppend as any) as any)\n        //return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n/**\n * 1.0 backwards compatibility functions\n *\n * this restores the stream and lazy stream\n * property on DomQuery on prototype level\n *\n */\n\nObject.defineProperty(DomQuery.prototype, \"stream\", {\n    get: function stream(){\n        return Stream.ofDomQuery(this);\n    }\n})\n\n\nObject.defineProperty(DomQuery.prototype, \"lazyStream\", {\n    get: function lazyStream(){\n        return LazyStream.ofDomQuery(this);\n    }\n})","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs\");","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * a standardized message to be sent over the message bus\n */\nimport {Observable, Subject} from \"rxjs\";\nimport {Stream} from \"./Stream\";\nimport {_global$} from \"./Global\";\n\n\n/**\n * generic crypto interface\n * to encrypt messages before they are sent\n * to the message bus oder the underlying bus system\n *\n * The idea is to make it as easy as possible, you can use for instance crypto js to\n * handle everything\n */\nexport interface Crypto {\n    /**\n     * note anything can be passed\n     *\n     * @param data the data to be encrypted\n     * @returns the encrypted data in any format, important is decode must be able to handle it\n     */\n    encode(data: any): any;\n\n    /**\n     * @param data the encrypted data in the format you expect it to be\n     * @returns the unencrypted data\n     */\n    decode(data: any): any;\n}\n\n\n/**\n * generic hash interface which provides\n * exactly one method a hash encode which returns a string hash value of encoded data\n */\nexport interface Hash {\n    encode(encodedData: string): string;\n}\n\n/**\n * Default implementation = no encryption\n */\nexport class NoCrypto implements Crypto {\n    decode(data: any): string {\n        return data;\n    }\n\n    encode(data: any): any {\n        return data;\n    }\n}\n\n//TODO dynamic encryptor which flushes the messages before changing the keys\n//that way we can rotate and change internal crypto keys on the fly\n\nlet noEncryption = new NoCrypto();\n\nexport class Message {\n\n    creationDate?: number;\n    identifier?: string;\n    targetOrigin?: string;\n    encoded: boolean = false;\n\n    constructor(public message: any = {}, targetOrigin = \"*\") {\n        this.targetOrigin = targetOrigin;\n        this.creationDate = new Date().getMilliseconds();\n        this.identifier = new Date().getMilliseconds() + \"_\" + Math.random() + \"_\" + Math.random();\n    }\n}\n\n/**\n * custom dom event wrapping our messages\n */\nclass MessageWrapper implements CustomEventInit<Message> {\n\n    detail?: Message;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n    channel: string;\n\n    constructor(channel: string, message: Message) {\n        this.detail = message;\n        this.bubbles = true;\n        this.cancelable = true;\n        this.composed = true;\n        this.channel = channel;\n    }\n}\n\n/**\n * abstract broker class\n * (The broker is the central distribution unit of messages)\n */\nabstract class BaseBroker {\n\n    static readonly EVENT_TYPE = \"brokerEvent\";\n    /**\n     * we can split the listeners with the system\n     * namespace... and type (aka identifier criteria)\n     */\n    protected messageListeners: any = {};\n    protected subjects: any = {};\n    protected processedMessages: any = {};\n\n    protected cleanupCnt = 0;\n    protected rootElem;\n    protected msgHandler;\n\n    protected readonly TIMEOUT_IN_MS = 1000;\n    protected readonly MSG_EVENT = \"message\";\n\n    //must be public because we also must have the option\n    //to set it outside of the constructor\n    crypto = noEncryption;\n\n\n    abstract register(scopeElement?: any): BaseBroker;\n\n    abstract unregister(): BaseBroker;\n\n    abstract broadcast(channel: string, message: Message | string): BaseBroker;\n\n\n    /**\n     * registers a listener on a channel\n     * @param channel the channel to register the listeners for\n     * @param listener the listener to register\n     */\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.reserveListenerNS(channel);\n\n        //we skip the processed messages, because they originated here\n        //and already are processed\n        this.messageListeners[channel].push((msg: Message) => {\n            if (msg.identifier in this.processedMessages) {\n                return;\n            }\n            if (msg?.encoded || msg?.[\"detail\"]?.encoded) {\n                if (msg?.[\"detail\"]) {\n                    msg[\"detail\"].message = this.crypto.decode(msg[\"detail\"].message);\n                    msg[\"detail\"].encoded = false;\n                } else {\n                    msg.message = this.crypto.decode(msg.message);\n                    msg.encoded = false;\n                }\n\n            }\n            listener(msg);\n        });\n        return this;\n    }\n\n    /**\n     * binding into rxjs\n     * produces a subject which can be used via next calls to send messages\n     * on the other hand we\n     * @param channel\n     */\n    asSubject(channel: string): Subject<Message> {\n        this.reserveSubjectNS(channel);\n        let subject = this.subjects[channel];\n        let oldNext = subject.next;\n\n        subject.next = (msg: Message | MessageWrapper) => {\n            //We use a recursive call to let the broadcaster handle\n            //The wrapper conversion and then again call us here\n            //that way both directions are handled.. next calls the broker\n            //and a broadcast calls next\n            if ((<MessageWrapper>msg)?.detail) {\n                oldNext.call(subject, (<MessageWrapper>msg)?.detail);\n            } else {\n                this.broadcast(channel, <Message>msg);\n            }\n        }\n        return subject;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * returns an observable on the baseBroker\n     * @param channel\n     */\n    asObservable(channel: string): Observable<Message> {\n        return this.asSubject(channel).asObservable();\n    }\n\n    /**\n     * reserves the listener namespace and wildcard namespace for the given identifier\n     * @param identifier\n     * @private\n     */\n    private reserveListenerNS(identifier: string) {\n        if (!this.messageListeners[identifier]) {\n            this.messageListeners[identifier] = [];\n        }\n        if (!this.messageListeners[\"*\"]) {\n            this.messageListeners[\"*\"] = [];\n        }\n    }\n\n    private reserveSubjectNS(identifier: string) {\n        if (!this.subjects[identifier]) {\n            this.subjects[identifier] = new Subject();\n        }\n        if (!this.subjects[\"*\"]) {\n            this.subjects[\"*\"] = new Subject();\n        }\n    }\n\n    /**\n     * unregisters a listener from this channel\n     *\n     * @param channel the channel to unregister from\n     * @param listener the listener to unregister the channel from\n     */\n    unregisterListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        this.messageListeners[channel] = (this.messageListeners[channel] || []).filter((item: any) => item !== listener);\n        return this;\n    }\n\n    /**\n     * answers a bidirectional message received\n     * usage, the client can use this method, to answer an incoming message in a precise manner\n     * so that the caller sending the bidirectional message knows how to deal with it\n     * this mechanism can be used for global storages where we have one answering entity per channel delivering the\n     * requested data, the request can be done asynchronously via promises waiting for answers\n     *\n     * @param channel the channel the originating message\n     * @param request the requesting message\n     * @param answer the answer to the request\n     */\n    answer(channel: string, request: Message | string, answer: Message): BaseBroker {\n        if ('string' == typeof request) {\n            request = new Message(request);\n        }\n\n        if (BaseBroker.isAnswer(request)) {\n            return;\n        }\n        answer.identifier = BaseBroker.getAnswerId(request);\n        this.broadcast(channel, answer);\n        return this;\n    }\n\n    private static getAnswerId(request: Message) {\n        return \"_r_\" + request.identifier;\n    }\n\n    private static isAnswer(request: Message) {\n        return request.identifier.indexOf(\"_r_\") == 0;\n    }\n\n    /**\n     * idea... a bidirectional broadcast\n     * sends a message and waits for the first answer coming in from one of the receivers\n     * sending the message back with a messageIdentifier_broadCastId answer\n     *\n     * @param channel\n     * @param message\n     */\n    request(channel: string, message: Message | string): Promise<Message> {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        let messageId = message.identifier;\n\n        let ret = new Promise<Message>((resolve, reject) => {\n            let timeout = null;\n            let listener = (message2: Message) => {\n                if (message2.identifier == messageId) {\n                    //broadcast from same source, we do not want\n                    //to deal with it now\n                    return;\n                }\n\n                if (message2.identifier == \"_r_\" + messageId) {\n                    clearTimeout(timeout);\n                    this.unregisterListener(channel, listener);\n                    resolve(message2);\n                }\n            }\n            timeout = setTimeout(() => {\n                this.unregisterListener(channel, listener);\n                reject(\"request message performed, timeout, no return value\");\n            }, 3000);\n            this.registerListener(channel, listener);\n\n        });\n        this.broadcast(channel, message);\n        return ret;\n    }\n\n\n    /**\n     * garbage collects the processed messages queue\n     * usually after one second\n     */\n    protected gcProcessedMessages() {\n        if ((++this.cleanupCnt) % 10 != 0) {\n            return;\n        }\n        let newProcessedMessages: any = {};\n        Object.keys(this.processedMessages).forEach(key => {\n            if (this.messageStillActive(key)) return;\n            newProcessedMessages[key] = this.processedMessages[key];\n        });\n        this.processedMessages = newProcessedMessages;\n    }\n\n    private messageStillActive(key: string): boolean {\n        return this.processedMessages[key] > ((new Date()).getMilliseconds() - this.TIMEOUT_IN_MS);\n    }\n\n    protected markMessageAsProcessed(message: Message) {\n        this.processedMessages[message.identifier] = message.creationDate;\n    }\n}\n\nlet broadCastChannelBrokerGenerator = (name) => {\n    if (_global$()?.BroadcastChannel) {\n        return new (_global$()).BroadcastChannel(name);\n    }\n    throw Error(\"No Broadcast channel in the system, use a shim or provide a factory function\" +\n        \"in the constructor\");\n};\n\nconst DEFAULT_CHANNEL_GROUP = \"brokr\";\n\n/**\n * a broker which hooks into the Broadcast Channel\n * either via shim or substitute lib\n *\n * The broadcast channels are a standardized messaging library\n * The broker mechanism sets a layer on top to make it more manageable!\n *\n */\nexport class BroadcastChannelBroker extends BaseBroker {\n    private openChannels: [{ key: string }, BroadcastChannel] = <any>{};\n    private readonly msgListener: Function;\n\n\n    /**\n     * @param brokerFactory a factory generating a broker\n     * @param channelGroup a group to combine a set of channels\n     * @param crypto a crypto class\n     */\n    constructor(private brokerFactory: Function = broadCastChannelBrokerGenerator, private channelGroup = DEFAULT_CHANNEL_GROUP, public crypto: Crypto = noEncryption) {\n        super();\n        this.msgListener = (messageData: MessageWrapper) => {\n            if (messageData.detail.encoded) {\n                messageData.detail.message = <any>this.crypto.decode(messageData.detail.message);\n                messageData.detail.encoded = false;\n            }\n            let coreMessage = messageData.detail;\n            let channel: string = messageData.channel;\n\n            if (this.messageListeners?.[channel]) {\n                this.messageListeners?.[channel].forEach(listener => {\n                    listener(coreMessage);\n                })\n            }\n            this.markMessageAsProcessed(coreMessage);\n            return true;\n        }\n        this.crypto = crypto;\n        this.register();\n    }\n\n    broadcast(channel: string, message: Message | string, includeOrigin = true): BaseBroker {\n        try {\n            if ('string' == typeof message) {\n                message = new Message(message);\n            }\n            //we now run a quick remapping to avoid\n            //serialisation errors\n            let msgString = JSON.stringify(<Message>message);\n            message = <Message>JSON.parse(msgString);\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n            messageWrapper.detail.encoded = true;\n\n            if (this?.subjects[channel]) {\n                this.subjects[channel].next(messageWrapper);\n            }\n\n            this.openChannels[this.channelGroup].postMessage(messageWrapper);\n            if (includeOrigin) {\n                this.msgListener(messageWrapper);\n            }\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n    registerListener(channel: string, listener: (msg: Message) => void): BaseBroker {\n        super.registerListener(channel, listener);\n        return <BaseBroker>this;\n    }\n\n    register(): BaseBroker {\n        if (!this.openChannels[this.channelGroup]) {\n            this.openChannels[this.channelGroup] = this.brokerFactory(this.channelGroup);\n        }\n        this.openChannels[this.channelGroup].addEventListener(\"message\", this.msgListener);\n        return <BaseBroker>this;\n    }\n\n    unregister(): BaseBroker {\n        this.openChannels[this.channelGroup].close();\n        return <BaseBroker>this;\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a broadcast channel broker\n */\nexport class BroadcastChannelBrokerBuilder {\n    private broadCastChannelGenerator: Function = broadCastChannelBrokerGenerator;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withGeneratorFunc(generatorFunc: Function): BroadcastChannelBrokerBuilder {\n        this.broadCastChannelGenerator = generatorFunc;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BroadcastChannelBrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n    withChannelGroup(channelGroup: string): BroadcastChannelBrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BroadcastChannelBrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): BroadcastChannelBroker {\n        let broker = new BroadcastChannelBroker(this.broadCastChannelGenerator, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}\n\n\n/**\n * implementation of a messaging based transport\n */\n\n/**\n * central message broker which uses various dom constructs\n * to broadcast messages into subelements\n *\n * we use the dom event system as transport and iframe and shadow dom mechanisms in a transparent way to\n * pull this off\n *\n * usage\n *\n * broker = new Broker(optional rootElement)\n *\n * defines a message broker within a scope of rootElement (without it is window aka the current isolation level)\n *\n * broker.registerListener(channel, listener) registers a new listener to the current broker and channel\n * broker.unregisterListener(channel, listener) unregisters the given listener\n *\n * broker.broadcast(message, optional direction, optional callBrokerListeners)\n * sends a message (channel included in the message object) in a direction (up, down, both)\n * and also optionally calls the listeners on the same broker (default off)\n *\n * the flow is like\n * up messages are propagated upwards only until it reaches the outer top of the dom\n * downwards, the messages are propagated downwards only\n * both the message is propagated into both directions\n *\n * Usually messages sent from the same broker are not processed within... however by setting\n * callBrokerListeners to true the listeners on the same broker also are called\n * brokers on the same level will get the message and process it automatically no matter what.\n * That way you can exclude the source from message processing (and it is done that way automatically)\n *\n * Isolation levels. Usually every isolation level needs its own broker object registering\n * on the outer bounds\n *\n * aka documents will register on window\n * iframes on the iframe windowObject\n * isolated shadow doms... document\n *\n *\n *\n */\nexport class Broker extends BaseBroker {\n\n    /**\n     * constructor has an optional root element\n     * and an internal name\n     *\n     * @param scopeElement\n     * @param brokerGroup\n     * @param crypto\n     */\n    constructor(scopeElement: HTMLElement | Window | ShadowRoot = window, public brokerGroup = \"brokr\", crypto: Crypto = noEncryption) {\n\n        super();\n\n        /**\n         * message relay.. identifies message events and relays them to the listeners\n         * @param event\n         */\n        let evtHandler = (event: MessageEvent | CustomEvent<Message>) => {\n            let details = (<any>event)?.detail ?? (<MessageEvent>event)?.data?.detail;\n            //TODO possible crypto hook, needs unit testing\n            let channel = ((<any>event)?.data?.channel) ?? ((<any>event)?.channel);\n\n            //javascript loses the type info in certain module types\n            if (details?.identifier && details?.message) {\n                let msg: Message = details;\n                if (msg.identifier in this.processedMessages) {\n                    return;\n                }\n                //coming in from up... we need to send it down\n                //a relayed message always has to trigger the listeners as well\n                if ((<any>event)?.detail) {\n                    this.broadcast(channel, msg);\n                } else {\n                    this.broadcast(channel, msg);\n                }\n\n            }\n        };\n        this.msgHandler = (evt: MessageEvent) => evtHandler(evt);\n        this.crypto = crypto;\n        this.register(scopeElement);\n    }\n\n    /**\n     * register the current broker into a scope defined by wnd\n     * @param scopeElement\n     */\n    register(scopeElement: HTMLElement | Window | ShadowRoot): BaseBroker {\n        this.rootElem = (<any>scopeElement).host ? (<any>scopeElement).host : scopeElement;\n        if ((<any>scopeElement).host) {\n            let host = (<ShadowRoot>scopeElement).host;\n            host.setAttribute(\"data-broker\", \"1\");\n        } else {\n            if (scopeElement?.[\"setAttribute\"])\n                (<any>scopeElement).setAttribute(\"data-broker\", \"1\");\n        }\n\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler, {capture: true});\n        /*dom message usable by iframes*/\n        this.rootElem.addEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE + this.MSG_EVENT, this.msgHandler, {capture: true});\n        return <any>this;\n    }\n\n    /**\n     * manual unregister function, to unregister as broker from the current\n     * scope\n     */\n    unregister(): BaseBroker {\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, this.msgHandler)\n        this.rootElem.removeEventListener(this.brokerGroup + \"__||__\" + this.MSG_EVENT, this.msgHandler)\n        return <any>this;\n    }\n\n\n    /**\n     * broadcast a message\n     * the message contains the channel and the data and some internal bookkeeping data\n     *\n     * @param channel the channel to broadcast to\n     * @param message the message dot send\n     * (for instance 2 iframes within the same parent broker)\n     */\n    broadcast(channel: string, message: Message | string): BaseBroker {\n        if ('string' == typeof message) {\n            message = new Message(message);\n        }\n        //message.message = this.crypto.encode(message);\n        //message.encoded = true;\n\n        if (this?.subjects[channel]) {\n            let messageWrapper = new MessageWrapper(channel, message);\n            if (!messageWrapper.detail.encoded) {\n                messageWrapper.detail.message = this.crypto.encode(messageWrapper.detail.message);\n                messageWrapper.detail.encoded = true;\n            }\n            this.subjects[channel].next(messageWrapper);\n        }\n\n        try {\n            this.dispatchUp(channel, message, false, true);\n            //listeners already called\n            this.dispatchDown(channel, message, true, false)\n        } finally {\n            this.gcProcessedMessages();\n        }\n        return this;\n    }\n\n\n    private dispatchUp(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.markMessageAsProcessed(message);\n        if (_global$().parent != null) {\n\n            let messageWrapper = new MessageWrapper(channel, message);\n            _global$().parent.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        }\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n    private dispatchSameLevel(channel: string, message: Message) {\n        let event = this.transformToEvent(channel, message, true);\n        //we also dispatch sideways\n        _global$().dispatchEvent(event);\n    }\n\n    //a dispatch of our own should never trigger the listeners hence the default true\n    private dispatchDown(channel: string, message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.msgCallListeners(channel, message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        let evt = this.transformToEvent(channel, message);\n\n        /*we now notify all iframes lying underneath */\n        Array.prototype.slice.call(document.querySelectorAll(\"iframe\")).forEach((element: HTMLIFrameElement) => {\n            let messageWrapper = new MessageWrapper(channel, message);\n            element.contentWindow.postMessage(JSON.parse(JSON.stringify(messageWrapper)), message.targetOrigin);\n        });\n\n        Array.prototype.slice.call(document.querySelectorAll(\"[data-broker='1']\")).forEach((element: HTMLElement) => element.dispatchEvent(evt))\n\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(channel, message);\n        }\n    }\n\n\n    private msgCallListeners(channel: string, message: Message) {\n        let listeners = this.messageListeners[channel];\n        if (listeners?.length) {\n            let callElement = (element: (msg: Message) => void) => {\n                element(message);\n            }\n\n            listeners.forEach(callElement);\n        }\n    }\n\n    private transformToEvent(channel: string, message: Message, bubbles = false): CustomEvent {\n        let messageWrapper = new MessageWrapper(channel, message);\n        messageWrapper.bubbles = bubbles;\n        return Broker.createCustomEvent(this.brokerGroup + \"__||__\" + Broker.EVENT_TYPE, messageWrapper);\n    }\n\n    private static createCustomEvent(name: string, wrapper: MessageWrapper): any {\n        if ('function' != typeof _global$().CustomEvent) {\n            let e: any = document.createEvent('HTMLEvents');\n            e.detail = wrapper.detail;\n            e.channel = wrapper.channel;\n            e.initEvent(name, wrapper.bubbles, wrapper.cancelable);\n            return e;\n\n        } else {\n            let customEvent = new (_global$()).CustomEvent(name, wrapper);\n            (<any>customEvent).channel = wrapper.channel;\n            return customEvent;\n        }\n\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Helper factory to create a dom broker\n */\nexport class BrokerBuilder {\n    private scopeElement: HTMLElement | Window | ShadowRoot = window;\n    private channelGroup = DEFAULT_CHANNEL_GROUP;\n    private crypto = noEncryption;\n    private listeners: Array<any> = [];\n\n    withScopeElement(scopeElement: HTMLElement | Window | ShadowRoot): BrokerBuilder {\n        this.scopeElement = scopeElement;\n        return this;\n    }\n\n    withListener(channel: string, ...listeners: Function[]): BrokerBuilder {\n        Stream.of(...listeners).each(listener => {\n            this.listeners.push({\n                channel: channel,\n                listener: listener\n            })\n        });\n        return this;\n    }\n\n\n    withChannelGroup(channelGroup: string): BrokerBuilder {\n        this.channelGroup = channelGroup;\n        return this;\n    }\n\n    withCrypto(crypto: Crypto): BrokerBuilder {\n        this.crypto = crypto;\n        return this;\n    }\n\n    build(): Broker {\n        let broker = new Broker(this.scopeElement, this.channelGroup, this.crypto);\n        Stream.of(...this.listeners).each(listenerItem => {\n            broker.registerListener(listenerItem.channel, listenerItem.listener);\n        });\n        return broker;\n    }\n}"],"names":["IGNORE_ASSIGN","value","assign","target","accessPath","length","lastPathItem","buildPath","key","append","Array","isArray","push","keyVal","start","indexOf","substring","arrayIndex","end","parseInt","isArrayPos","currKey","arrPos","isNoArray","alloc","arr","toAdd","val","parentVal","targetVal","parentPos","targetKey","keys","Es2019Array","flatMap","item","split","map","replace","preprocessKeys","cnt","tempVal","simpleShallowMerge","assocArrays","overwrite","withAppend","Object","forEach","oldVal","shallowMerge","ALLOWED_SUBMITTABLE_ELEMENTS","trim","Lang","isString","eqi","objToArray","ElementAttribute","ValueEmbedder","constructor","element","name","defaultVal","super","this","get","orElse","values","getAttribute","setAttribute","getClass","static","valueKey","Style","style","DEFAULT_WHITELIST","DomQuery","rootNode","pos","_limits","Optional","isAbsent","foundElement","querySelectorAll","getAsElem","allElems","global","stream","Error","lazyStream","id","tagName","getIf","nodeName","isTag","toLowerCase","type","inputValue","isPresent","nodeId","checked","every","el","newChecked","eachElem","elements","deepElements","querySelectorAllDeep","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","disabled","attr","removeAttribute","childNodes","childNodeArr","concat","asArray","filter","byId","offsetWidth","elem","reduce","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","asNodeArray","selector","document","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","code","nonce","globalEval","globalEvalSticky","markup","doc","implementation","createHTMLDocument","lowerMarkup","search","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","absent","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","closest","_closestDeep","_closest","includeRoot","res","subItems","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","first","newInnerHTML","dispatchEvent","evt","retArr","innerHtml","newInnerHtml","filterSelector","matched","_mozMatchesSelector","some","nodeSelector","selectorStage","func","len","firstElem","lastElem","each","toReplace","asElem","parent","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","insertBefore","insertAfter","last","lastNode","reArr","head","getElementsByTagName","script","newScriptElement","appendChild","applyNonce","appendTo","orElseLazy","loadScriptEval","src","delay","_loadScriptEval","loadScriptEvalSticky","toInsertParams","existingItem","existingElement","nextSibling","insertElem","elseValue","allParents","ret","firstParent","parentsWhileMatch","host","copyAttrs","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","fromMarkup","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","sticky","whitelisted","evalCollectedScripts","scriptsToProcess","joinedScripts","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","sort","node1","node2","compareDocumentPosition","e","console","error","message","description","_toReplace","rel","matches","styles","filteredStyles","execCss","click","fireEvent","addEventListener","listener","options","removeEventListener","eventName","finalOptions","bubbles","cancelable","ownerDocument","nodeType","EventClass","Event","MouseEvent","KeyboardEvent","event","synthetic","createEventObject","textContent","joinString","text1","text2","encodeFormElement","toMerge","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","from","cDATAAsString","reduced","data","subNodes","to","Math","min","limits","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","current","reset","attachShadow","params","mode","shadowElement","waitUntilDom","condition","childList","subtree","timeout","interval","root","Promise","success","observer","MUT_ERROR","findElement","MutationObserver","mutTimeout","setTimeout","disconnect","callback","mutationList","mut","clearTimeout","observableOpts","observe","setInterval","clearInterval","shadowElements","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","domQueries","idx","notFound","prependTo","prepend","foundNodes","selectors","cnt2","levelSelector","toMatch","prototypeOwner","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","i","srcNode","createSourceNode","nonceCheck","marker","Date","now","random","attrName","Es2019Array_","another","_another","flatMapFun","_flatMap","flat","flatLevel","_flat","callbackfn","thisArg","_Es2019Array","prototype","items","reverse","splice","deleteCount","predicate","initialValue","flatDepth","_flatResolve","mapperFunction","Proxy","p","receiver","isNaN","set","property","_global$","globalThis","window","g","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","equalsIgnoreCase","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","theArgs","TypeError","nextSource","nextKey","hasOwnProperty","Monad","_value","fn","inVal","fromNullable","currentPos","getIfPresent","match","toJson","JSON","stringify","resolve","resolver","rootElem","newVal","alternative","ConfigEntry","ITERATION_STATUS","calculateSkips","next_strm","EO_STRM","MultiStreamDatasource","strms","selectedPos","activeStrm","findNextStrm","all_strms","shift","ArrayStreamDataSource","dataPos","max","FilteredStreamDatasource","filterFunc","_current","BEF_STRM","_filterIdx","_unfilteredPos","inputDataSource","steps","lookupVal","loop","MappedStreamDataSource","mapFunc","lookAheadVal","ArrayCollector","collect","finalValue","FlatMapStreamDataSource","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","dsLoop","datasourceData","mappedData","currentDataSource","toDatasource","ds","Stream","of","dataSource","toAppend","toConcat","onElem","inval","strmR","startVal","val1","anyMatch","allMatch","noneMatch","comparator","newArr","collector","LazyStream","isOverLimits","ofStreamDataSource","nextFilter","t","stop","value1","value2","el1","el2","defineProperty","ofDomQuery","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","o","enumerable","prop","r","toStringTag","require","NoCrypto","decode","encode","noEncryption","Message","targetOrigin","encoded","creationDate","getMilliseconds","identifier","MessageWrapper","channel","detail","composed","BaseBroker","messageListeners","subjects","processedMessages","cleanupCnt","TIMEOUT_IN_MS","MSG_EVENT","crypto","registerListener","reserveListenerNS","msg","asSubject","reserveSubjectNS","subject","oldNext","broadcast","asObservable","Subject","unregisterListener","answer","request","isAnswer","getAnswerId","messageId","reject","message2","gcProcessedMessages","newProcessedMessages","messageStillActive","markMessageAsProcessed","EVENT_TYPE","broadCastChannelBrokerGenerator","BroadcastChannel","DEFAULT_CHANNEL_GROUP","BroadcastChannelBroker","brokerFactory","channelGroup","openChannels","msgListener","messageData","coreMessage","register","includeOrigin","msgString","parse","messageWrapper","postMessage","unregister","close","BroadcastChannelBrokerBuilder","broadCastChannelGenerator","listeners","withGeneratorFunc","generatorFunc","withListener","withChannelGroup","withCrypto","build","broker","listenerItem","Broker","scopeElement","brokerGroup","evtHandler","details","msgHandler","capture","dispatchUp","dispatchDown","ignoreListeners","callBrokerListeners","msgCallListeners","dispatchSameLevel","transformToEvent","contentWindow","callElement","createCustomEvent","wrapper","CustomEvent","createEvent","initEvent","customEvent","BrokerBuilder","withScopeElement"],"sourceRoot":""}