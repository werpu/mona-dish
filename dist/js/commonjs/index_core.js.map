{"version":3,"file":"index_core.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Global.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/global","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/index_core.ts"],"sourcesContent":["/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\n\nimport {\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS\n} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport {_global$} from \"./Global\";\nimport objToArray = Lang.objToArray;\nimport {Es2019Array} from \"./Es2019Array\";\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\ninterface IDomQuery {\n    /**\n     * reference to the systems global object\n     * (globalThis, window, global, depending on the environment)\n     */\n    readonly global: any;\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n\n    /**\n     * accumulated top element offsetWidth\n     */\n    readonly offsetWidth: number;\n    /**\n     * accumulated top element offsetHeight\n     */\n    readonly offsetHeight: number;\n    /**\n     * accumulated top element offsetLeft\n     */\n    readonly offsetLeft: number;\n    /**\n     * accumulated top element offsetTop\n     */\n    readonly offsetTop: number;\n\n\n    /**\n     * abbreviation for inputValue\\.value to make\n     * the code terser\n     */\n    val: string | boolean;\n\n    /**\n     * the underlying form elements as DomQuery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * inner html property\n     * setter and getter which works directly on strings\n     */\n    innerHTML: string;\n\n    /**\n     * same as innerHTML\n     * will be removed once\n     * my code is transitioned\n     * @deprecated do not use anymore, user innerHTML instead\n     */\n    innerHtml: string;\n\n    /**\n     * convenience for dq.id.value to make the code a little bit tighter\n     */\n    nodeId: string;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded ( highest level )\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n\n    /**\n     * closest, walks up the dom tree to fid the closest element to match\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchEvent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    lastElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * Runs an eval and keeps the evaluated code in the head\n     * This is a corner condition, where we want to update the head with custom\n     * code and leave the code in (instead of deleting ig)\n     *\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {DomQuery} DomQuery of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    append(elem: DomQuery): DomQuery;\n\n    /**\n     * replace convenience function replaces the domquery elements with the\n     * elements passed as parameter\n     * @param toReplace the replacement elements\n     * @return a reference on the replacement elements\n     */\n    replace(toReplace: DomQuery): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    prepend(elem: DomQuery): DomQuery;\n\n    /**\n     * prepend equivalent to appendTo\n     *\n     * @param elem the element to prepend to\n     */\n    prependTo(elem: DomQuery): DomQuery;\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param charSet\n     */\n    loadScriptEval(src: string, delay: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the DomQuery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery;\n\n    /**\n     * first parents with a matching selector\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery;\n\n    /**\n     * all parents until the selector match stops\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery;\n\n\n    /**\n     * the parent of the elements\n     */\n    parent(): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another DomQuery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the element must be left in the head after eval default === false\n     * @param whiteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky?: boolean, whiteListed?: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinString?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinString?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the sub-nodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    // observable: Observable<DomQuery>;\n\n    // observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return new Es2019Array(...this.values).every(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n\n    get asArray(): Es2019Array<DomQuery> {\n        // filter not supported by IE11\n        let items = new Es2019Array<Element>(...this.rootNode).filter(item => {\n            return item != null\n        }).map(item => {\n            return DomQuery.byId(item)\n        });\n        return items as Es2019Array<DomQuery>;\n    }\n\n    get offsetWidth(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetHeight(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetLeft(): number {\n        return new Es2019Array(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get offsetTop(): number {\n        return new Es2019Array(this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as any).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0);\n    }\n\n    get asNodeArray(): Array<Element> {\n        return new Es2019Array<Element>(...this.rootNode.filter(item => item != null));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/\\<\\!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(...\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(((item) => id == item.id) as any)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                new Es2019Array(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any>new Es2019Array(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res);\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        return this.asArray\n            .some(item => this._mozMatchesSelector(item.getAsElem(0).value, selector));\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        new Es2019Array(...this.rootNode)\n            .forEach((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                new Es2019Array(...scriptsToProcess).forEach(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.asArray\n                .flatMap(item => [...item.values])\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) // preceding 2, following == 4)\n                .forEach(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n            const _toReplace = DomQuery.byId(toReplace);\n            const tagName = _toReplace.tagName.orElse(\"\").value;\n            const head = DomQuery.byTagName(\"head\");\n\n            if (tagName && eqi(tagName, \"link\") && eqi(toReplace.getAttribute(\"rel\"), \"stylesheet\")) {\n                const rel = toReplace.getAttribute(\"rel\");\n                //if possible we are now replacing the existing elements where we reference this stylesheet\n                const matches = head.querySelectorAll(`link[rel='stylesheet'][href='${rel}']`);\n\n                if(matches.length) {\n                    matches.replace(_toReplace);\n                } else {\n                    head.append(_toReplace);\n                }\n            } else if (tagName && eqi(tagName, \"style\")) {\n                let innerText = _toReplace.innerHTML.replace(/\\s+/gi, \"\");\n                let styles = head.querySelectorAll(\"style\");\n                let filteredStyles = styles.asArray.filter(style => {\n                    return style.innerHTML.replace(/\\s+/gi, \"\") == innerText;\n                });\n                styles = new DomQuery(...filteredStyles);\n                if(!styles.length) { //already present\n                    head.append(_toReplace);\n                }\n            }\n        };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.asArray\n            .flatMap(item => [...item.values])\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .forEach(item => execCss(item as HTMLElement));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n\n\n        let finalOptions: any = new Config({\n            bubbles: true, cancelable: true\n        });\n        finalOptions.shallowMerge(new Config(options));\n        finalOptions = JSON.parse(finalOptions.toJson());\n\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Object.keys(finalOptions).forEach(key => event[key] = finalOptions[key]);\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\");\n    }\n\n    innerText(joinString: string = \"\"): string {\n        let ret = this.asArray\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => {\n                return [text1, text2].join(joinString)\n            }, \"\");\n        return ret;\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        target.assign(name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res = this.asArray\n            .flatMap( item => item.childNodes.asArray)\n            .filter(item => item?.value?.value?.nodeType == TYPE_CDATA_BLOCK)\n            .reduce((reduced: Array<any>, item: DomQuery) => {\n                reduced.push((<any>item?.value?.value)?.data ?? \"\");\n                return reduced;\n            }, []);\n        /*let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;*/\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): DomQuery {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): DomQuery {\n        const ret = new DomQuery(...this.asArray.concat(toAttach.asArray));\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return new DomQuery(...ret.asArray.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }));\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\nexport class Es2019Array<T> extends Array<T> {\n    constructor(...another: T[]) {\n        super(...another);\n        //for testing it definitely runs into this branch because we are on es5 level\n        if(!(<any>Array.prototype).flatMap) {\n            let flatmapFun = (<any>Es2019Array).prototype.flatMap_;\n            //unfortunately in es5 the flatMap function is lost due to inheritance of a primitive\n            //es  class, we have to remap it back in\n            this.flatMap = flatmapFun;\n        }\n    }\n\n    flatMap_(mapperFunction: Function, noFallback: boolean = false): Es2019Array<T> {\n\n        let res = [];\n\n        let remap = item => {\n            let opRes = mapperFunction(item);\n            if(Array.isArray(opRes)) {\n                if(opRes.length == 1) {\n                    res.push(opRes[1])\n                    return;\n                }\n                if(opRes.length > 1) {\n                    opRes.forEach(newItem => remap(newItem))\n                }\n            } else {\n                res.push(item);\n            }\n        };\n        this.forEach( item => remap(item) )\n\n        return new Es2019Array(...res);\n    }\n\n\n    concat(...items): T[] {\n        return new Es2019Array(...super.concat(...items));\n    }\n\n    reverse(): T[] {\n        return new Es2019Array(...super.reverse());\n    }\n\n    slice(start?: number, end?: number): T[] {\n        return new Es2019Array(...super.slice(start, end));\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        return new Es2019Array(...super.splice(start, deleteCount));\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        return new Es2019Array(...super.filter(predicate, thisArg)  as any);\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        new Es2019Array(...other.getIf(key).value).forEach(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos =  Array.isArray(currAccessPos.value) ?\n                         Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !! (item?.[currKey] ?? false);\n                        })?.[currKey])  :\n                Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if(currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Config} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array<S>(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\nimport {_global$} from \"./Global\";\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new (_global$()).DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (_global$())?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport {DomQuery, ElementAttribute, DomQueryCollector, DQ, DQ$} from \"./DomQuery\";\nexport {Lang} from \"./Lang\";\nexport {Config, CONFIG_VALUE, CONFIG_ANY, ConfigDef, Monad, IValueHolder, IFunctor, IMonad, IIdentity, Optional, ValueEmbedder} from \"./Monad\";\nexport {XMLQuery, XQ} from \"./XmlQuery\";\nexport {\n    QueryFormStringCollector,\n    IStreamDataSource,\n    ICollector,\n    ArrayCollector,\n    AssocArrayCollector,\n    FormDataCollector,\n    QueryFormDataCollector\n} from \"./SourcesCollectors\";\n\n\n\n\n\n\n"],"names":["ALLOWED_SUBMITTABLE_ELEMENTS","trim","Lang","isString","eqi","equalsIgnoreCase","objToArray","waitUntilDom","root","condition","options","attributes","childList","subtree","timeout","interval","Promise","success","error","observer","MUT_ERROR","Error","findElement","childNodes","filter","item","first","value","querySelectorAll","foundElement","DomQuery","MutationObserver","setTimeout","disconnect","mutationList","found","map","mut","target","isPresent","clearTimeout","eachElem","observe","setInterval","clearInterval","element","name","defaultVal","val","this","get","orElse","values","length","getAttribute","cnt","setAttribute","getClass","ElementAttribute","fromNullable","valueKey","ValueEmbedder","style","Style","DEFAULT_WHITELIST","rootNode","pos","_limits","Optional","isAbsent","push","getAsElem","allElems","_global$","getIf","isTag","tagName","nodeName","toLowerCase","absent","inputValue","id","Es2019Array","every","el","checked","newChecked","querySelectorAllDeep","queryStr","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","childNodeArr","concat","byId","elem","offsetWidth","reduce","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","selector","document","indexOf","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","globalEvalSticky","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","search","documentElement","innerHTML","startsWithTag","str","tag1","join","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","presentRunnable","call","ifPresentLazy","delete","node","parentNode","removeChild","closest","_closestDeep","_closest","includeRoot","res","subItems","reduction","defaultValue","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","FILE_INPUT","matchesSelector","newInnerHTML","dispatchEvent","evt","retArr","newInnerHtml","filterSelector","matched","_mozMatchesSelector","asArray","some","selectorStage","nodeSelector","func","len","firstElem","lastElem","each","forEach","replace","toReplace","asElem","parent","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","insertBefore","insertAfter","append","last","lastNode","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","applyNonce","appendTo","orElseLazy","loadScriptEval","src","delay","_loadScriptEval","loadScriptEvalSticky","existingItem","existingElement","nextSibling","toInsertParams","insertElem","elseValue","allParents","ret","firstParent","parentsWhileMatch","host","copyAttrs","sourceItem","sourceNode","attrs","resolveAttributeHolder","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","runScripts","runCss","focusElement","setCaretPosition","sticky","whitelisted","evalCollectedScripts","scriptsToProcess","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","substring","flatMap","sort","node1","node2","compareDocumentPosition","e","console","message","description","_toReplace","rel","matches","styles","filteredStyles","execCss","click","fireEvent","addEventListener","listener","removeEventListener","eventName","finalOptions","Config","bubbles","cancelable","shallowMerge","JSON","parse","toJson","ownerDocument","nodeType","EventClass","Event","global","MouseEvent","KeyboardEvent","synthetic","createEventObject","Object","keys","key","textContent","joinString","text1","text2","encodeFormElement","toMerge","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","assign","Array","from","reduced","data","subNodes","to","Math","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","ITERATION_STATUS","EO_STRM","current","BEF_STRM","reset","attachShadow","params","mode","shadowElement","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","done","toAttach","filterDoubles","idx","notFound","prependTo","prepend","foundNodes","selectors","split","cnt2","levelSelector","toMatch","prototypeOwner","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","i","srcNode","createSourceNode","nonceCheck","marker","Date","now","random","attrName","collect","DomQueryCollector","DQ","DQ$","another","prototype","flatmapFun","flatMap_","mapperFunction","noFallback","remap","opRes","isArray","newItem","items","reverse","start","splice","deleteCount","predicate","thisArg","globalThis","window","g","ws","test","charAt","it","arguments","String","saveResolve","resolverProducer","result","saveResolveLazy","strToArray","splitter","obj","offset","pack","source","destination","finalDest","assertType","probe","theType","isFunc","Function","objAssign","TypeError","theArgs","nextSource","nextKey","hasOwnProperty","_value","fn","inVal","Monad","preprocessKeys","currentPos","currKey","keyVal","arrPos","arrayIndex","getIfPresent","match","stringify","parseInt","resolve","resolver","rootElem","newVal","alternative","ConfigEntry","CONFIG_VALUE","CONFIG_ANY","configDef","shallowCopy$","deepCopy$","other","overwrite","withAppend","noKeys","accessPath","assertAccessPath","lastKey","pathExists","buildPath","finalKeyArrPos","apply","appendIf","assignIf","setVal","ERR_ACCESS_PATH","currAccessPos","find","parentVal","parentPos","alloc","arr","length1","length2","isArrayPos","tempVal","isNoArray","calculateSkips","next_strm","selectedPos","strms","activeStrm","findNextStrm","all_strms","shift","MultiStreamDatasource","total","SequenceDataSource","dataPos","max","ArrayStreamDataSource","filterFunc","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","lookupVal","loop","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","ShimArrayCollector","unshift","InverseArrayCollector","finalValue","ArrayAssocArrayCollector","Run","AssocArrayCollector","ConfigCollector","FormData","FormDataCollector","QueryFormDataCollector","formData","item1","item2","QueryFormStringCollector","ArrayCollector","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","toString","serialized","XMLSerializer","constructor","serializeToString","parserErrorText","joinstr","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}