{"version":3,"file":"Stream.js","mappings":"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","sources":["webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Es2019Array.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///./src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["/**\n * Extended array\n */\n\n/**\n * Extended array which adds various es 2019 shim functions to the normal array\n * We must remap all array producing functions in order to keep\n * the delegation active, once we are in!\n */\nexport class Es2019Array<T> extends Array<T> {\n    constructor(...another: T[]) {\n        super(...another);\n        //for testing it definitely runs into this branch because we are on es5 level\n        if(!(<any>Array.prototype).flatMap) {\n            let flatmapFun = (<any>Es2019Array).prototype.flatMap_;\n            //unfortunately in es5 the flatMap function is lost due to inheritance of a primitive\n            //es  class, we have to remap it back in\n            this.flatMap = flatmapFun;\n        }\n    }\n\n    flatMap_(mapperFunction: Function, noFallback: boolean = false): Es2019Array<T> {\n\n        let res = [];\n\n        let remap = item => {\n            let opRes = mapperFunction(item);\n            if(Array.isArray(opRes)) {\n                if(opRes.length == 1) {\n                    res.push(opRes[1])\n                    return;\n                }\n                if(opRes.length > 1) {\n                    opRes.forEach(newItem => remap(newItem))\n                }\n            } else {\n                res.push(item);\n            }\n        };\n        this.forEach( item => remap(item) )\n\n        return new Es2019Array(...res);\n    }\n\n\n    concat(...items): T[] {\n        return new Es2019Array(...super.concat(...items));\n    }\n\n    reverse(): T[] {\n        return new Es2019Array(...super.reverse());\n    }\n\n    slice(start?: number, end?: number): T[] {\n        return new Es2019Array(...super.slice(start, end));\n    }\n\n    splice(start: number, deleteCount?: number): T[] {\n        return new Es2019Array(...super.splice(start, deleteCount));\n    }\n\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => any, thisArg?: any): S[] {\n        return new Es2019Array(...super.filter(predicate, thisArg)  as any);\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * lazy resolve... aka the function is called on resolve and a default value also\n     * is a producing function (called only if the original producer does not produce any result)\n     * @param resolverProducer the producer for the resolve\n     * @param defaultValue the default value producer function\n     */\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case-insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Back ported from Dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    /**\n     * Back-ported, a failsafe determination code for checking whether an object is a function\n     * @param it the object to check for being a function\n     */\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monad like definitions in place\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {Es2019Array} from \"./Es2019Array\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flatMap implementation, flatMap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are side - effect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Side - effect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inVal: any) => <R>inVal;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Side - effect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fulfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this method\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilities, unfortunately typescript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        return currentPos;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns the type of Optional\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return new Es2019Array(...keys)\n            .flatMap(item => {\n                return new Es2019Array(...item.split(/]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            });\n    }\n}\n\n\n// --------------------- From here onwards we break out the side effect free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrapper\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns ValueEmbedder\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not Side - effect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it side - effect free\n * since this would swallow a lot of performance and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        let ret = new Config({});\n        ret.shallowMerge(this.value);\n        return ret;\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        new Es2019Array(...other.getIf(key).value).forEach(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assigns a new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        return new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambiguous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semi typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        let currAccessPos: any = Optional.fromNullable(Object.keys(this.configDef).map(key => {\n            let ret = {};\n            ret[key] = this.configDef[key];\n            return ret;\n        }));\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos: any = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos =  Array.isArray(currAccessPos.value) ?\n                         Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                            .find(item => {\n                                return !!(item?.[currKey] ?? false)\n                            })?.[currKey]?.[arrPos]) :\n                        Optional.fromNullable(currAccessPos.value?.[currKey]?.[arrPos] ?? null);\n\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos.value)) ?\n                        Optional.fromNullable(currAccessPos.value?.[arrPos]) : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos.value)) ? Optional.fromNullable(new Es2019Array(...currAccessPos.value)\n                        .find(item => {\n                            return !! (item?.[currKey] ?? false);\n                        })?.[currKey])  :\n                Optional.fromNullable(currAccessPos.value?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            if(currAccessPos.value == CONFIG_ANY) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomQuery} from \"./DomQuery\";\nimport {Config} from \"./Monad\";\nimport {Es2019Array} from \"./Es2019Array\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside - of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fulfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\nexport function calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by possibly infinite constructs like lazy streams,\n     * because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * A data source which combines multiple streams sequentially into one\n * (this is used internally by  flatmap, but also can be used externally)\n */\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of a datasource on top of a standard array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    /**\n     * looks ahead cnt without changing the internal data \"pointers\" of the data source\n     * (this is mostly needed by LazyStreams, because they do not know by definition their\n     * boundaries)\n     *\n     * @param cnt the elements to look ahead\n     * @return either the element or ITERATION_STATUS.EO_STRM if we hit the end of the stream before\n     * finding the \"cnt\" element\n     */\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ShimArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = new Es2019Array<S>(...[]);\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return new Es2019Array(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"));\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {Config, IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource, calculateSkips,\n    FilteredStreamDatasource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource, MultiStreamDatasource\n} from \"./SourcesCollectors\";\nimport {DomQuery} from \"./DomQuery\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n\n        let lookAhead = this?.activeDataSource?.lookAhead(cnt);\n        if (this?.activeDataSource && lookAhead != ITERATION_STATUS.EO_STRM) {\n            //this should cover 95% of all cases\n            return lookAhead;\n        }\n\n        if (this.activeDataSource) {\n            cnt -= calculateSkips(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams sub-sequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them, so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let datasourceData = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            //no embedded data anymore? we are done, data\n            //can either be a scalar an array or another datasource\n            if (datasourceData === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mappedData = this.mapFunc(datasourceData as T);\n\n            //it either comes in as datasource or as array\n            //both cases must be unified into a datasource\n            let currentDataSource = this.toDatasource(mappedData);\n            //we now run again  a lookahead\n            let ret = currentDataSource.lookAhead(cnt);\n            //if the value is found then we are set\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            //reduce the next lookahead by the number of elements\n            //we are now skipping in the current data source\n            cnt -= calculateSkips(currentDataSource);\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns the currently element selected in the stream\n     */\n    current(): T | ITERATION_STATUS\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T>, IStreamDataSource<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    static ofDomQuery(value: DomQuery): Stream<DomQuery> {\n        return Stream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): Stream<[string, any]> {\n        return Stream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    current(): T | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        if(this.pos >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos];\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    static ofDomQuery(value: DomQuery): LazyStream<DomQuery> {\n        return LazyStream.of(...value.asArray);\n    }\n\n    static ofConfig(value: Config): LazyStream<[string, any]> {\n        return LazyStream.of(... Object.keys(value.value)).map(key => [key, value.value[key]])\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.ofStreamDataSource(new MultiStreamDatasource(this, toAppend as any) as any)\n        //return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(551);\n"],"names":["another","Array","prototype","flatMap","flatmapFun","Es2019Array","flatMap_","mapperFunction","noFallback","res","remap","item","opRes","isArray","length","push","forEach","newItem","this","concat","items","reverse","slice","start","end","splice","deleteCount","filter","predicate","thisArg","Lang","trim","str","ws","i","replace","test","charAt","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","Optional","fromNullable","e","absent","saveResolveLazy","strToArray","splitter","ret","split","element","objToArray","obj","offset","pack","call","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","objAssign","target","TypeError","to","Object","assign","theArgs","nextSource","keys","nextKey","hasOwnProperty","value","_value","map","fn","inVal","Monad","mapped","isAbsent","isPresent","presentRunnable","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","key","preprocessKeys","currentPos","cnt","currKey","keyVal","arrPos","arrayIndex","getClass","getIfPresent","match","get","defaultVal","toJson","JSON","stringify","indexOf","parseInt","substring","resolve","resolver","rootElem","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","CONFIG_VALUE","CONFIG_ANY","root","configDef","shallowCopy$","Config","shallowMerge","deepCopy$","other","overwrite","withAppend","append","noKeys","accessPath","assertAccessPath","lastKey","pathExists","buildPath","finalKeyArrPos","Error","apply","appendIf","condition","assignIf","delete","setVal","ERR_ACCESS_PATH","currAccessPos","find","parentVal","parentPos","alloc","arr","length1","length2","isArrayPos","tempVal","isNoArray","ITERATION_STATUS","calculateSkips","next_strm","pos","lookAhead","EO_STRM","first","selectedPos","strms","activeStrm","current","hasNext","findNextStrm","all_strms","shift","next","reset","MultiStreamDatasource","total","BEF_STRM","SequenceDataSource","dataPos","Math","max","ArrayStreamDataSource","filterFunc","parent","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","found","lookupVal","loop","FilteredStreamDatasource","mapFunc","lookAheadVal","MappedStreamDataSource","data","collect","ShimArrayCollector","unshift","InverseArrayCollector","finalValue","ArrayAssocArrayCollector","Run","AssocArrayCollector","ConfigCollector","FormData","FormDataCollector","toMerge","encodeFormElement","name","QueryFormDataCollector","formData","join","reduce","item1","item2","QueryFormStringCollector","ArrayCollector","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","dsLoop","datasourceData","mappedData","currentDataSource","toDatasource","ds","FlatMapStreamDataSource","_limits","of","Stream","ofAssoc","ofDataSource","dataSource","ofDomQuery","asArray","ofConfig","limits","toConcat","toAppend","onElem","each","inval","strmR","startVal","val1","last","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collector","isLimitsReached","isEndOfArray","Symbol","iterator","done","LazyStream","values","ofStreamDataSource","isOverLimits","nextFilter","t","el","stop","value1","value2","el1","el2","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}